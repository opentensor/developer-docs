(function() {
    var type_impls = Object.fromEntries([["cpp_demangle",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Symbol%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#161\">Source</a><a href=\"#impl-Clone-for-Symbol%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"cpp_demangle/struct.Symbol.html\" title=\"struct cpp_demangle::Symbol\">Symbol</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#161\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"cpp_demangle/struct.Symbol.html\" title=\"struct cpp_demangle::Symbol\">Symbol</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","cpp_demangle::OwnedSymbol","cpp_demangle::BorrowedSymbol"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Symbol%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#161\">Source</a><a href=\"#impl-Debug-for-Symbol%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"cpp_demangle/struct.Symbol.html\" title=\"struct cpp_demangle::Symbol\">Symbol</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#161\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","cpp_demangle::OwnedSymbol","cpp_demangle::BorrowedSymbol"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Symbol%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#457-478\">Source</a><a href=\"#impl-Display-for-Symbol%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"cpp_demangle/struct.Symbol.html\" title=\"struct cpp_demangle::Symbol\">Symbol</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#461-477\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","cpp_demangle::OwnedSymbol","cpp_demangle::BorrowedSymbol"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Symbol%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#161\">Source</a><a href=\"#impl-PartialEq-for-Symbol%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"cpp_demangle/struct.Symbol.html\" title=\"struct cpp_demangle::Symbol\">Symbol</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#161\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"cpp_demangle/struct.Symbol.html\" title=\"struct cpp_demangle::Symbol\">Symbol</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","cpp_demangle::OwnedSymbol","cpp_demangle::BorrowedSymbol"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Symbol%3C%26T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#371-455\">Source</a><a href=\"#impl-Symbol%3C%26T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T&gt; <a class=\"struct\" href=\"cpp_demangle/struct.Symbol.html\" title=\"struct cpp_demangle::Symbol\">Symbol</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;'a T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_tail\" class=\"method\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#397-399\">Source</a><h4 class=\"code-header\">pub fn <a href=\"cpp_demangle/struct.Symbol.html#tymethod.with_tail\" class=\"fn\">with_tail</a>(input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;'a T</a>) -&gt; <a class=\"type\" href=\"cpp_demangle/error/type.Result.html\" title=\"type cpp_demangle::error::Result\">Result</a>&lt;(<a class=\"type\" href=\"cpp_demangle/type.BorrowedSymbol.html\" title=\"type cpp_demangle::BorrowedSymbol\">BorrowedSymbol</a>&lt;'a&gt;, &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>])&gt;</h4></section></summary><div class=\"docblock\"><p>Parse a mangled symbol from input and return it and the trailing tail of\nbytes that come after the symbol, with the default options.</p>\n<p>While <code>Symbol::new</code> will return an error if there is unexpected trailing\nbytes, <code>with_tail</code> simply returns the trailing bytes along with the\nparsed symbol.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cpp_demangle::BorrowedSymbol;\n<span class=\"kw\">use </span>std::string::ToString;\n\n<span class=\"kw\">let </span>mangled = <span class=\"string\">b\"_ZN5space3fooEibc and some trailing junk\"</span>;\n\n<span class=\"kw\">let </span>(sym, tail) = BorrowedSymbol::with_tail(<span class=\"kw-2\">&amp;</span>mangled[..])\n    .expect(<span class=\"string\">\"Could not parse mangled symbol!\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(tail, <span class=\"string\">b\" and some trailing junk\"</span>);\n\n<span class=\"kw\">let </span>demangled = sym.to_string();\n<span class=\"macro\">assert_eq!</span>(demangled, <span class=\"string\">\"space::foo(int, bool, char)\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_tail_and_options\" class=\"method\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#425-454\">Source</a><h4 class=\"code-header\">pub fn <a href=\"cpp_demangle/struct.Symbol.html#tymethod.with_tail_and_options\" class=\"fn\">with_tail_and_options</a>(\n    input: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;'a T</a>,\n    options: &amp;<a class=\"struct\" href=\"cpp_demangle/struct.ParseOptions.html\" title=\"struct cpp_demangle::ParseOptions\">ParseOptions</a>,\n) -&gt; <a class=\"type\" href=\"cpp_demangle/error/type.Result.html\" title=\"type cpp_demangle::error::Result\">Result</a>&lt;(<a class=\"type\" href=\"cpp_demangle/type.BorrowedSymbol.html\" title=\"type cpp_demangle::BorrowedSymbol\">BorrowedSymbol</a>&lt;'a&gt;, &amp;'a [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>])&gt;</h4></section></summary><div class=\"docblock\"><p>Parse a mangled symbol from input and return it and the trailing tail of\nbytes that come after the symbol.</p>\n<p>While <code>Symbol::new_with_options</code> will return an error if there is\nunexpected trailing bytes, <code>with_tail_and_options</code> simply returns the\ntrailing bytes along with the parsed symbol.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cpp_demangle::{BorrowedSymbol, ParseOptions};\n<span class=\"kw\">use </span>std::string::ToString;\n\n<span class=\"kw\">let </span>mangled = <span class=\"string\">b\"_ZN5space3fooEibc and some trailing junk\"</span>;\n\n<span class=\"kw\">let </span>parse_options = ParseOptions::default()\n    .recursion_limit(<span class=\"number\">1024</span>);\n\n<span class=\"kw\">let </span>(sym, tail) = BorrowedSymbol::with_tail_and_options(<span class=\"kw-2\">&amp;</span>mangled[..], <span class=\"kw-2\">&amp;</span>parse_options)\n    .expect(<span class=\"string\">\"Could not parse mangled symbol!\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(tail, <span class=\"string\">b\" and some trailing junk\"</span>);\n\n<span class=\"kw\">let </span>demangled = sym.to_string();\n<span class=\"macro\">assert_eq!</span>(demangled, <span class=\"string\">\"space::foo(int, bool, char)\"</span>);</code></pre></div>\n</div></details></div></details>",0,"cpp_demangle::BorrowedSymbol"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Symbol%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#168-325\">Source</a><a href=\"#impl-Symbol%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"cpp_demangle/struct.Symbol.html\" title=\"struct cpp_demangle::Symbol\">Symbol</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#204-206\">Source</a><h4 class=\"code-header\">pub fn <a href=\"cpp_demangle/struct.Symbol.html#tymethod.new\" class=\"fn\">new</a>(raw: T) -&gt; <a class=\"type\" href=\"cpp_demangle/error/type.Result.html\" title=\"type cpp_demangle::error::Result\">Result</a>&lt;<a class=\"struct\" href=\"cpp_demangle/struct.Symbol.html\" title=\"struct cpp_demangle::Symbol\">Symbol</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Given some raw storage, parse the mangled symbol from it with the default\noptions.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cpp_demangle::Symbol;\n<span class=\"kw\">use </span>std::string::ToString;\n\n<span class=\"comment\">// First, something easy :)\n\n</span><span class=\"kw\">let </span>mangled = <span class=\"string\">b\"_ZN5space3fooEibc\"</span>;\n\n<span class=\"kw\">let </span>sym = Symbol::new(<span class=\"kw-2\">&amp;</span>mangled[..])\n    .expect(<span class=\"string\">\"Could not parse mangled symbol!\"</span>);\n\n<span class=\"kw\">let </span>demangled = sym.to_string();\n<span class=\"macro\">assert_eq!</span>(demangled, <span class=\"string\">\"space::foo(int, bool, char)\"</span>);\n\n<span class=\"comment\">// Now let's try something a little more complicated!\n\n</span><span class=\"kw\">let </span>mangled =\n    <span class=\"string\">b\"__Z28JS_GetPropertyDescriptorByIdP9JSContextN2JS6HandleIP8JSObjectEENS2_I4jsidEENS1_13MutableHandleINS1_18PropertyDescriptorEEE\"</span>;\n\n<span class=\"kw\">let </span>sym = Symbol::new(<span class=\"kw-2\">&amp;</span>mangled[..])\n    .expect(<span class=\"string\">\"Could not parse mangled symbol!\"</span>);\n\n<span class=\"kw\">let </span>demangled = sym.to_string();\n<span class=\"macro\">assert_eq!</span>(\n    demangled,\n    <span class=\"string\">\"JS_GetPropertyDescriptorById(JSContext*, JS::Handle&lt;JSObject*&gt;, JS::Handle&lt;jsid&gt;, JS::MutableHandle&lt;JS::PropertyDescriptor&gt;)\"\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_with_options\" class=\"method\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#241-276\">Source</a><h4 class=\"code-header\">pub fn <a href=\"cpp_demangle/struct.Symbol.html#tymethod.new_with_options\" class=\"fn\">new_with_options</a>(raw: T, options: &amp;<a class=\"struct\" href=\"cpp_demangle/struct.ParseOptions.html\" title=\"struct cpp_demangle::ParseOptions\">ParseOptions</a>) -&gt; <a class=\"type\" href=\"cpp_demangle/error/type.Result.html\" title=\"type cpp_demangle::error::Result\">Result</a>&lt;<a class=\"struct\" href=\"cpp_demangle/struct.Symbol.html\" title=\"struct cpp_demangle::Symbol\">Symbol</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Given some raw storage, parse the mangled symbol from it.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cpp_demangle::{ParseOptions, Symbol};\n<span class=\"kw\">use </span>std::string::ToString;\n\n<span class=\"comment\">// First, something easy :)\n\n</span><span class=\"kw\">let </span>mangled = <span class=\"string\">b\"_ZN5space3fooEibc\"</span>;\n\n<span class=\"kw\">let </span>parse_options = ParseOptions::default()\n    .recursion_limit(<span class=\"number\">1024</span>);\n\n<span class=\"kw\">let </span>sym = Symbol::new_with_options(<span class=\"kw-2\">&amp;</span>mangled[..], <span class=\"kw-2\">&amp;</span>parse_options)\n    .expect(<span class=\"string\">\"Could not parse mangled symbol!\"</span>);\n\n<span class=\"kw\">let </span>demangled = sym.to_string();\n<span class=\"macro\">assert_eq!</span>(demangled, <span class=\"string\">\"space::foo(int, bool, char)\"</span>);\n\n<span class=\"comment\">// Now let's try something a little more complicated!\n\n</span><span class=\"kw\">let </span>mangled =\n    <span class=\"string\">b\"__Z28JS_GetPropertyDescriptorByIdP9JSContextN2JS6HandleIP8JSObjectEENS2_I4jsidEENS1_13MutableHandleINS1_18PropertyDescriptorEEE\"</span>;\n\n<span class=\"kw\">let </span>sym = Symbol::new(<span class=\"kw-2\">&amp;</span>mangled[..])\n    .expect(<span class=\"string\">\"Could not parse mangled symbol!\"</span>);\n\n<span class=\"kw\">let </span>demangled = sym.to_string();\n<span class=\"macro\">assert_eq!</span>(\n    demangled,\n    <span class=\"string\">\"JS_GetPropertyDescriptorById(JSContext*, JS::Handle&lt;JSObject*&gt;, JS::Handle&lt;jsid&gt;, JS::MutableHandle&lt;JS::PropertyDescriptor&gt;)\"\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.demangle\" class=\"method\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#298-311\">Source</a><h4 class=\"code-header\">pub fn <a href=\"cpp_demangle/struct.Symbol.html#tymethod.demangle\" class=\"fn\">demangle</a>(&amp;self, options: &amp;<a class=\"struct\" href=\"cpp_demangle/struct.DemangleOptions.html\" title=\"struct cpp_demangle::DemangleOptions\">DemangleOptions</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Demangle the symbol and return it as a String.</p>\n<p>Unlike the <code>ToString</code> implementation, this function allows options to\nbe specified.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>cpp_demangle::{DemangleOptions, Symbol};\n<span class=\"kw\">use </span>std::string::ToString;\n\n<span class=\"kw\">let </span>mangled = <span class=\"string\">b\"_ZN5space3fooEibc\"</span>;\n\n<span class=\"kw\">let </span>sym = Symbol::new(<span class=\"kw-2\">&amp;</span>mangled[..])\n    .expect(<span class=\"string\">\"Could not parse mangled symbol!\"</span>);\n\n<span class=\"kw\">let </span>demangled = sym.to_string();\n<span class=\"kw\">let </span>options = DemangleOptions::default();\n<span class=\"kw\">let </span>demangled_again = sym.demangle(<span class=\"kw-2\">&amp;</span>options).unwrap();\n<span class=\"macro\">assert_eq!</span>(demangled_again, demangled);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.structured_demangle\" class=\"method\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#316-324\">Source</a><h4 class=\"code-header\">pub fn <a href=\"cpp_demangle/struct.Symbol.html#tymethod.structured_demangle\" class=\"fn\">structured_demangle</a>&lt;W: <a class=\"trait\" href=\"cpp_demangle/trait.DemangleWrite.html\" title=\"trait cpp_demangle::DemangleWrite\">DemangleWrite</a>&gt;(\n    &amp;self,\n    out: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut W</a>,\n    options: &amp;<a class=\"struct\" href=\"cpp_demangle/struct.DemangleOptions.html\" title=\"struct cpp_demangle::DemangleOptions\">DemangleOptions</a>,\n) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\"><p>Demangle the symbol to a DemangleWrite, which lets the consumer be informed about\nsyntactic structure.</p>\n</div></details></div></details>",0,"cpp_demangle::OwnedSymbol","cpp_demangle::BorrowedSymbol"],["<section id=\"impl-StructuralPartialEq-for-Symbol%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/cpp_demangle/lib.rs.html#161\">Source</a><a href=\"#impl-StructuralPartialEq-for-Symbol%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"cpp_demangle/struct.Symbol.html\" title=\"struct cpp_demangle::Symbol\">Symbol</a>&lt;T&gt;</h3></section>","StructuralPartialEq","cpp_demangle::OwnedSymbol","cpp_demangle::BorrowedSymbol"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[23280]}