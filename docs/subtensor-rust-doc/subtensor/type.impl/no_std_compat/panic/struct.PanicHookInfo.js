(function() {
    var type_impls = Object.fromEntries([["no_std_compat",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-PanicHookInfo%3C'a%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.81.0\">1.81.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/std/panic.rs.html#41\">Source</a></span><a href=\"#impl-Debug-for-PanicHookInfo%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"no_std_compat/fmt/trait.Debug.html\" title=\"trait no_std_compat::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"no_std_compat/panic/struct.PanicHookInfo.html\" title=\"struct no_std_compat::panic::PanicHookInfo\">PanicHookInfo</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/std/panic.rs.html#41\">Source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"no_std_compat/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"no_std_compat/fmt/struct.Formatter.html\" title=\"struct no_std_compat::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"no_std_compat/result/enum.Result.html\" title=\"enum no_std_compat::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"no_std_compat/fmt/struct.Error.html\" title=\"struct no_std_compat::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"no_std_compat/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","no_std_compat::panic::PanicInfo"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-PanicHookInfo%3C'_%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.26.0\">1.26.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/std/panic.rs.html#199\">Source</a></span><a href=\"#impl-Display-for-PanicHookInfo%3C'_%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"no_std_compat/fmt/trait.Display.html\" title=\"trait no_std_compat::fmt::Display\">Display</a> for <a class=\"struct\" href=\"no_std_compat/panic/struct.PanicHookInfo.html\" title=\"struct no_std_compat::panic::PanicHookInfo\">PanicHookInfo</a>&lt;'_&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/std/panic.rs.html#200\">Source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"no_std_compat/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, formatter: &amp;mut <a class=\"struct\" href=\"no_std_compat/fmt/struct.Formatter.html\" title=\"struct no_std_compat::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"no_std_compat/result/enum.Result.html\" title=\"enum no_std_compat::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"no_std_compat/fmt/struct.Error.html\" title=\"struct no_std_compat::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"no_std_compat/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","no_std_compat::panic::PanicInfo"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PanicHookInfo%3C'a%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/std/panic.rs.html#49\">Source</a><a href=\"#impl-PanicHookInfo%3C'a%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"struct\" href=\"no_std_compat/panic/struct.PanicHookInfo.html\" title=\"struct no_std_compat::panic::PanicHookInfo\">PanicHookInfo</a>&lt;'a&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.payload\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/std/panic.rs.html#93\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"no_std_compat/panic/struct.PanicHookInfo.html#tymethod.payload\" class=\"fn\">payload</a>(&amp;self) -&gt; &amp;(dyn <a class=\"trait\" href=\"no_std_compat/any/trait.Any.html\" title=\"trait no_std_compat::any::Any\">Any</a> + <a class=\"trait\" href=\"no_std_compat/marker/trait.Send.html\" title=\"trait no_std_compat::marker::Send\">Send</a> + 'static)</h4></section></summary><div class=\"docblock\"><p>Returns the payload associated with the panic.</p>\n<p>This will commonly, but not always, be a <code>&amp;'static str</code> or <a href=\"../../std/string/struct.String.html\"><code>String</code></a>.</p>\n<p>A invocation of the <code>panic!()</code> macro in Rust 2021 or later will always result in a\npanic payload of type <code>&amp;'static str</code> or <code>String</code>.</p>\n<p>Only an invocation of <a href=\"no_std_compat/panic/fn.panic_any.html\" title=\"fn no_std_compat::panic::panic_any\"><code>panic_any</code></a>\n(or, in Rust 2018 and earlier, <code>panic!(x)</code> where <code>x</code> is something other than a string)\ncan result in a panic payload other than a <code>&amp;'static str</code> or <code>String</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">â“˜</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::panic;\n\npanic::set_hook(Box::new(|panic_info| {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(s) = panic_info.payload().downcast_ref::&lt;<span class=\"kw-2\">&amp;</span>str&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred: {s:?}\"</span>);\n    } <span class=\"kw\">else if let </span><span class=\"prelude-val\">Some</span>(s) = panic_info.payload().downcast_ref::&lt;String&gt;() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred: {s:?}\"</span>);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred\"</span>);\n    }\n}));\n\n<span class=\"macro\">panic!</span>(<span class=\"string\">\"Normal panic\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.payload_as_str\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/std/panic.rs.html#126\">Source</a><h4 class=\"code-header\">pub fn <a href=\"no_std_compat/panic/struct.PanicHookInfo.html#tymethod.payload_as_str\" class=\"fn\">payload_as_str</a>(&amp;self) -&gt; <a class=\"enum\" href=\"no_std_compat/option/enum.Option.html\" title=\"enum no_std_compat::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.str.html\">str</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>panic_payload_as_str</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns the payload associated with the panic, if it is a string.</p>\n<p>This returns the payload if it is of type <code>&amp;'static str</code> or <code>String</code>.</p>\n<p>A invocation of the <code>panic!()</code> macro in Rust 2021 or later will always result in a\npanic payload where <code>payload_as_str</code> returns <code>Some</code>.</p>\n<p>Only an invocation of <a href=\"no_std_compat/panic/fn.panic_any.html\" title=\"fn no_std_compat::panic::panic_any\"><code>panic_any</code></a>\n(or, in Rust 2018 and earlier, <code>panic!(x)</code> where <code>x</code> is something other than a string)\ncan result in a panic payload where <code>payload_as_str</code> returns <code>None</code>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">Â§</a>Example</h5>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">â“˜</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(panic_payload_as_str)]\n\n</span>std::panic::set_hook(Box::new(|panic_info| {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(s) = panic_info.payload_as_str() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred: {s:?}\"</span>);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred\"</span>);\n    }\n}));\n\n<span class=\"macro\">panic!</span>(<span class=\"string\">\"Normal panic\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.location\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/std/panic.rs.html#163\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"no_std_compat/panic/struct.PanicHookInfo.html#tymethod.location\" class=\"fn\">location</a>(&amp;self) -&gt; <a class=\"enum\" href=\"no_std_compat/option/enum.Option.html\" title=\"enum no_std_compat::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"no_std_compat/panic/struct.Location.html\" title=\"struct no_std_compat::panic::Location\">Location</a>&lt;'_&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns information about the location from which the panic originated,\nif available.</p>\n<p>This method will currently always return <a href=\"no_std_compat/option/enum.Option.html#variant.Some\" title=\"variant no_std_compat::option::Option::Some\"><code>Some</code></a>, but this may change\nin future versions.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">â“˜</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::panic;\n\npanic::set_hook(Box::new(|panic_info| {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(location) = panic_info.location() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred in file '{}' at line {}\"</span>,\n            location.file(),\n            location.line(),\n        );\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"panic occurred but can't get location information...\"</span>);\n    }\n}));\n\n<span class=\"macro\">panic!</span>(<span class=\"string\">\"Normal panic\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.can_unwind\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.86.0/src/std/panic.rs.html#182\">Source</a><h4 class=\"code-header\">pub fn <a href=\"no_std_compat/panic/struct.PanicHookInfo.html#tymethod.can_unwind\" class=\"fn\">can_unwind</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>panic_can_unwind</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether the panic handler is allowed to unwind the stack from\nthe point where the panic occurred.</p>\n<p>This is true for most kinds of panics with the exception of panics\ncaused by trying to unwind out of a <code>Drop</code> implementation or a function\nwhose ABI does not support unwinding.</p>\n<p>It is safe for a panic handler to unwind even when this function returns\nfalse, however this will simply cause the panic handler to be called\nagain.</p>\n</div></details></div></details>",0,"no_std_compat::panic::PanicInfo"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[12705]}