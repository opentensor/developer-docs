(function() {
    var type_impls = Object.fromEntries([["jsonrpsee",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-OwnedSemaphorePermit\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#419\">Source</a><a href=\"#impl-Debug-for-OwnedSemaphorePermit\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#419\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","jsonrpsee::SubscriptionPermit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-OwnedSemaphorePermit\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1196\">Source</a><a href=\"#impl-Drop-for-OwnedSemaphorePermit\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1197\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","jsonrpsee::SubscriptionPermit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OwnedSemaphorePermit\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1074\">Source</a><a href=\"#impl-OwnedSemaphorePermit\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forget\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1096\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.forget\" class=\"fn\">forget</a>(self)</h4></section></summary><div class=\"docblock\"><p>Forgets the permit <strong>without</strong> releasing it back to the semaphore.\nThis can be used to reduce the amount of permits available from a\nsemaphore.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>tokio::sync::Semaphore;\n\n<span class=\"kw\">let </span>sem = Arc::new(Semaphore::new(<span class=\"number\">10</span>));\n{\n    <span class=\"kw\">let </span>permit = sem.clone().try_acquire_many_owned(<span class=\"number\">5</span>).unwrap();\n    <span class=\"macro\">assert_eq!</span>(sem.available_permits(), <span class=\"number\">5</span>);\n    permit.forget();\n}\n\n<span class=\"comment\">// Since we forgot the permit, available permits won't go back to its initial value\n// even after the permit is dropped.\n</span><span class=\"macro\">assert_eq!</span>(sem.available_permits(), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.merge\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1133\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.merge\" class=\"fn\">merge</a>(&amp;mut self, other: <a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a>)</h4></section></summary><div class=\"docblock\"><p>Merge two <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\"><code>OwnedSemaphorePermit</code></a> instances together, consuming <code>other</code>\nwithout releasing the permits it holds.</p>\n<p>Permits held by both <code>self</code> and <code>other</code> are released when <code>self</code> drops.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if permits from different <a href=\"tokio/sync/semaphore/struct.Semaphore.html\" title=\"struct tokio::sync::semaphore::Semaphore\"><code>Semaphore</code></a> instances\nare merged.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>tokio::sync::Semaphore;\n\n<span class=\"kw\">let </span>sem = Arc::new(Semaphore::new(<span class=\"number\">10</span>));\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>permit = sem.clone().try_acquire_owned().unwrap();\n\n<span class=\"kw\">for _ in </span><span class=\"number\">0</span>..<span class=\"number\">9 </span>{\n    <span class=\"kw\">let </span>_permit = sem.clone().try_acquire_owned().unwrap();\n    <span class=\"comment\">// Merge individual permits into a single one.\n    </span>permit.merge(_permit)\n}\n\n<span class=\"macro\">assert_eq!</span>(sem.available_permits(), <span class=\"number\">0</span>);\n\n<span class=\"comment\">// Release all permits in a single batch.\n</span>drop(permit);\n\n<span class=\"macro\">assert_eq!</span>(sem.available_permits(), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1164\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.split\" class=\"fn\">split</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Splits <code>n</code> permits from <code>self</code> and returns a new <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\"><code>OwnedSemaphorePermit</code></a> instance that holds <code>n</code> permits.</p>\n<p>If there are insufficient permits and it’s not possible to reduce by <code>n</code>, returns <code>None</code>.</p>\n<h5 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">§</a>Note</h5>\n<p>It will clone the owned <code>Arc&lt;Semaphore&gt;</code> to construct the new instance.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>tokio::sync::Semaphore;\n\n<span class=\"kw\">let </span>sem = Arc::new(Semaphore::new(<span class=\"number\">3</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p1 = sem.try_acquire_many_owned(<span class=\"number\">3</span>).unwrap();\n<span class=\"kw\">let </span>p2 = p1.split(<span class=\"number\">1</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(p1.num_permits(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(p2.num_permits(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.semaphore\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1180\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.semaphore\" class=\"fn\">semaphore</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"tokio/sync/semaphore/struct.Semaphore.html\" title=\"struct tokio::sync::semaphore::Semaphore\">Semaphore</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"tokio/sync/semaphore/struct.Semaphore.html\" title=\"struct tokio::sync::semaphore::Semaphore\"><code>Semaphore</code></a> from which this permit was acquired.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_permits\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1185\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.num_permits\" class=\"fn\">num_permits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of permits held by <code>self</code>.</p>\n</div></details></div></details>",0,"jsonrpsee::SubscriptionPermit"]]],["jsonrpsee_core",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-OwnedSemaphorePermit\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#419\">Source</a><a href=\"#impl-Debug-for-OwnedSemaphorePermit\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#419\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","jsonrpsee_core::server::subscription::SubscriptionPermit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-OwnedSemaphorePermit\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1196\">Source</a><a href=\"#impl-Drop-for-OwnedSemaphorePermit\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1197\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","jsonrpsee_core::server::subscription::SubscriptionPermit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OwnedSemaphorePermit\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1074\">Source</a><a href=\"#impl-OwnedSemaphorePermit\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forget\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1096\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.forget\" class=\"fn\">forget</a>(self)</h4></section></summary><div class=\"docblock\"><p>Forgets the permit <strong>without</strong> releasing it back to the semaphore.\nThis can be used to reduce the amount of permits available from a\nsemaphore.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>tokio::sync::Semaphore;\n\n<span class=\"kw\">let </span>sem = Arc::new(Semaphore::new(<span class=\"number\">10</span>));\n{\n    <span class=\"kw\">let </span>permit = sem.clone().try_acquire_many_owned(<span class=\"number\">5</span>).unwrap();\n    <span class=\"macro\">assert_eq!</span>(sem.available_permits(), <span class=\"number\">5</span>);\n    permit.forget();\n}\n\n<span class=\"comment\">// Since we forgot the permit, available permits won't go back to its initial value\n// even after the permit is dropped.\n</span><span class=\"macro\">assert_eq!</span>(sem.available_permits(), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.merge\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1133\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.merge\" class=\"fn\">merge</a>(&amp;mut self, other: <a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a>)</h4></section></summary><div class=\"docblock\"><p>Merge two <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\"><code>OwnedSemaphorePermit</code></a> instances together, consuming <code>other</code>\nwithout releasing the permits it holds.</p>\n<p>Permits held by both <code>self</code> and <code>other</code> are released when <code>self</code> drops.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if permits from different <a href=\"tokio/sync/semaphore/struct.Semaphore.html\" title=\"struct tokio::sync::semaphore::Semaphore\"><code>Semaphore</code></a> instances\nare merged.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>tokio::sync::Semaphore;\n\n<span class=\"kw\">let </span>sem = Arc::new(Semaphore::new(<span class=\"number\">10</span>));\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>permit = sem.clone().try_acquire_owned().unwrap();\n\n<span class=\"kw\">for _ in </span><span class=\"number\">0</span>..<span class=\"number\">9 </span>{\n    <span class=\"kw\">let </span>_permit = sem.clone().try_acquire_owned().unwrap();\n    <span class=\"comment\">// Merge individual permits into a single one.\n    </span>permit.merge(_permit)\n}\n\n<span class=\"macro\">assert_eq!</span>(sem.available_permits(), <span class=\"number\">0</span>);\n\n<span class=\"comment\">// Release all permits in a single batch.\n</span>drop(permit);\n\n<span class=\"macro\">assert_eq!</span>(sem.available_permits(), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1164\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.split\" class=\"fn\">split</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Splits <code>n</code> permits from <code>self</code> and returns a new <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\"><code>OwnedSemaphorePermit</code></a> instance that holds <code>n</code> permits.</p>\n<p>If there are insufficient permits and it’s not possible to reduce by <code>n</code>, returns <code>None</code>.</p>\n<h5 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">§</a>Note</h5>\n<p>It will clone the owned <code>Arc&lt;Semaphore&gt;</code> to construct the new instance.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>tokio::sync::Semaphore;\n\n<span class=\"kw\">let </span>sem = Arc::new(Semaphore::new(<span class=\"number\">3</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p1 = sem.try_acquire_many_owned(<span class=\"number\">3</span>).unwrap();\n<span class=\"kw\">let </span>p2 = p1.split(<span class=\"number\">1</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(p1.num_permits(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(p2.num_permits(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.semaphore\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1180\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.semaphore\" class=\"fn\">semaphore</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"tokio/sync/semaphore/struct.Semaphore.html\" title=\"struct tokio::sync::semaphore::Semaphore\">Semaphore</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"tokio/sync/semaphore/struct.Semaphore.html\" title=\"struct tokio::sync::semaphore::Semaphore\"><code>Semaphore</code></a> from which this permit was acquired.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_permits\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1185\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.num_permits\" class=\"fn\">num_permits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of permits held by <code>self</code>.</p>\n</div></details></div></details>",0,"jsonrpsee_core::server::subscription::SubscriptionPermit"]]],["jsonrpsee_server",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-OwnedSemaphorePermit\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#419\">Source</a><a href=\"#impl-Debug-for-OwnedSemaphorePermit\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#419\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","jsonrpsee_server::future::ConnectionPermit","jsonrpsee_server::SubscriptionPermit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-OwnedSemaphorePermit\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1196\">Source</a><a href=\"#impl-Drop-for-OwnedSemaphorePermit\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1197\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","jsonrpsee_server::future::ConnectionPermit","jsonrpsee_server::SubscriptionPermit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OwnedSemaphorePermit\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1074\">Source</a><a href=\"#impl-OwnedSemaphorePermit\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forget\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1096\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.forget\" class=\"fn\">forget</a>(self)</h4></section></summary><div class=\"docblock\"><p>Forgets the permit <strong>without</strong> releasing it back to the semaphore.\nThis can be used to reduce the amount of permits available from a\nsemaphore.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>tokio::sync::Semaphore;\n\n<span class=\"kw\">let </span>sem = Arc::new(Semaphore::new(<span class=\"number\">10</span>));\n{\n    <span class=\"kw\">let </span>permit = sem.clone().try_acquire_many_owned(<span class=\"number\">5</span>).unwrap();\n    <span class=\"macro\">assert_eq!</span>(sem.available_permits(), <span class=\"number\">5</span>);\n    permit.forget();\n}\n\n<span class=\"comment\">// Since we forgot the permit, available permits won't go back to its initial value\n// even after the permit is dropped.\n</span><span class=\"macro\">assert_eq!</span>(sem.available_permits(), <span class=\"number\">5</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.merge\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1133\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.merge\" class=\"fn\">merge</a>(&amp;mut self, other: <a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a>)</h4></section></summary><div class=\"docblock\"><p>Merge two <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\"><code>OwnedSemaphorePermit</code></a> instances together, consuming <code>other</code>\nwithout releasing the permits it holds.</p>\n<p>Permits held by both <code>self</code> and <code>other</code> are released when <code>self</code> drops.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if permits from different <a href=\"tokio/sync/semaphore/struct.Semaphore.html\" title=\"struct tokio::sync::semaphore::Semaphore\"><code>Semaphore</code></a> instances\nare merged.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>tokio::sync::Semaphore;\n\n<span class=\"kw\">let </span>sem = Arc::new(Semaphore::new(<span class=\"number\">10</span>));\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>permit = sem.clone().try_acquire_owned().unwrap();\n\n<span class=\"kw\">for _ in </span><span class=\"number\">0</span>..<span class=\"number\">9 </span>{\n    <span class=\"kw\">let </span>_permit = sem.clone().try_acquire_owned().unwrap();\n    <span class=\"comment\">// Merge individual permits into a single one.\n    </span>permit.merge(_permit)\n}\n\n<span class=\"macro\">assert_eq!</span>(sem.available_permits(), <span class=\"number\">0</span>);\n\n<span class=\"comment\">// Release all permits in a single batch.\n</span>drop(permit);\n\n<span class=\"macro\">assert_eq!</span>(sem.available_permits(), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1164\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.split\" class=\"fn\">split</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\">OwnedSemaphorePermit</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Splits <code>n</code> permits from <code>self</code> and returns a new <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html\" title=\"struct tokio::sync::semaphore::OwnedSemaphorePermit\"><code>OwnedSemaphorePermit</code></a> instance that holds <code>n</code> permits.</p>\n<p>If there are insufficient permits and it’s not possible to reduce by <code>n</code>, returns <code>None</code>.</p>\n<h5 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">§</a>Note</h5>\n<p>It will clone the owned <code>Arc&lt;Semaphore&gt;</code> to construct the new instance.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::sync::Arc;\n<span class=\"kw\">use </span>tokio::sync::Semaphore;\n\n<span class=\"kw\">let </span>sem = Arc::new(Semaphore::new(<span class=\"number\">3</span>));\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p1 = sem.try_acquire_many_owned(<span class=\"number\">3</span>).unwrap();\n<span class=\"kw\">let </span>p2 = p1.split(<span class=\"number\">1</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(p1.num_permits(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(p2.num_permits(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.semaphore\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1180\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.semaphore\" class=\"fn\">semaphore</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"tokio/sync/semaphore/struct.Semaphore.html\" title=\"struct tokio::sync::semaphore::Semaphore\">Semaphore</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"tokio/sync/semaphore/struct.Semaphore.html\" title=\"struct tokio::sync::semaphore::Semaphore\"><code>Semaphore</code></a> from which this permit was acquired.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_permits\" class=\"method\"><a class=\"src rightside\" href=\"src/tokio/sync/semaphore.rs.html#1185\">Source</a><h4 class=\"code-header\">pub fn <a href=\"tokio/sync/semaphore/struct.OwnedSemaphorePermit.html#tymethod.num_permits\" class=\"fn\">num_permits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of permits held by <code>self</code>.</p>\n</div></details></div></details>",0,"jsonrpsee_server::future::ConnectionPermit","jsonrpsee_server::SubscriptionPermit"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[11256,11343,11420]}