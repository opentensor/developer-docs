(function() {
    var type_impls = Object.fromEntries([["lioness",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Lioness%3CH,+SC%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lioness/lib.rs.html#72-218\">Source</a><a href=\"#impl-Lioness%3CH,+SC%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;H, SC&gt; <a class=\"struct\" href=\"lioness/struct.Lioness.html\" title=\"struct lioness::Lioness\">Lioness</a>&lt;H, SC&gt;<div class=\"where\">where\n    H: <a class=\"trait\" href=\"lioness/trait.DigestLioness.html\" title=\"trait lioness::DigestLioness\">DigestLioness</a> + <a class=\"trait\" href=\"digest/trait.Input.html\" title=\"trait digest::Input\">Input</a> + <a class=\"trait\" href=\"digest/trait.VariableOutput.html\" title=\"trait digest::VariableOutput\">VariableOutput</a>,\n    SC: <a class=\"trait\" href=\"lioness/trait.StreamCipherLioness.html\" title=\"trait lioness::StreamCipherLioness\">StreamCipherLioness</a> + <a class=\"trait\" href=\"keystream/trait.KeyStream.html\" title=\"trait keystream::KeyStream\">KeyStream</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.encrypt\" class=\"method\"><a class=\"src rightside\" href=\"src/lioness/lib.rs.html#122-157\">Source</a><h4 class=\"code-header\">pub fn <a href=\"lioness/struct.Lioness.html#tymethod.encrypt\" class=\"fn\">encrypt</a>(&amp;self, block: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"lioness/error/enum.LionessError.html\" title=\"enum lioness::error::LionessError\">LionessError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>encrypt a block</p>\n<h5 id=\"arguments\"><a class=\"doc-anchor\" href=\"#arguments\">§</a>Arguments</h5>\n<ul>\n<li><code>block</code> - a mutable byte slice of data to encrypt</li>\n</ul>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<ul>\n<li><code>LionessError::BlockSizeError</code> - returned if block size is too small</li>\n</ul>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">extern crate </span>blake2;\n<span class=\"kw\">extern crate </span>chacha;\n<span class=\"kw\">extern crate </span>lioness;\n<span class=\"kw\">extern crate </span>hex;\n<span class=\"kw\">use </span><span class=\"self\">self</span>::lioness::{Lioness, RAW_KEY_SIZE};\n<span class=\"kw\">use </span>chacha::ChaCha;\n<span class=\"kw\">use </span>blake2::VarBlake2b;\n\n<span class=\"kw\">let </span>key = hex::decode(\n    <span class=\"string\">\"e98e0e3f28311995e8448e6dc1de73159e800c8184a7846418347f4490f063e372\\\n     6eebda84e02f2cc218bd6c6e9a9b801e8d8899e8f5b6dcd23bf7ca7f11641c584cd9568f045e9\\\n     ad92c59275f67b9bed7f02bb23e28c0b8e56fbb634d60a6d1eae7145e53a4442dda40ae37b2e2\\\n     e1f97ae495c8ce0166605d4f1ea91f139159229f208c69362095d8d8e00d7b4c9ca5603dc8b87\\\n     50b0eb500670858ca7983a8760be307ff3e5c05f22799cb60d7c57fe3fc8b980aa65e89e3ac0a\\\n     c147af7deb\"</span>).unwrap();\n\n<span class=\"kw\">const </span>PLAINTEXT: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span>[u8] = <span class=\"string\">b\"Open, secure and reliable\nconnectivity is necessary (although not sufficient) to\nexcercise the human rights such as freedom of expression and\nfreedom of association [FOC], as defined in the Universal\nDeclaration of Human Rights [UDHR]. The purpose of the\nInternet to be a global network of networks that provides\nunfettered connectivity to all users and for any content\n[RFC1958]. This objective of stimulating global connectivity\ncontributes to the Internet's role as an enabler of human\nrights.\"</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>block: Vec&lt;u8&gt; = PLAINTEXT.to_owned();\n<span class=\"kw\">let </span>cipher = Lioness::&lt;VarBlake2b,ChaCha&gt;::new_raw(<span class=\"macro\">array_ref!</span>(key, <span class=\"number\">0</span>, RAW_KEY_SIZE));\ncipher.encrypt(<span class=\"kw-2\">&amp;mut </span>block).unwrap();\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.decrypt\" class=\"method\"><a class=\"src rightside\" href=\"src/lioness/lib.rs.html#169-204\">Source</a><h4 class=\"code-header\">pub fn <a href=\"lioness/struct.Lioness.html#tymethod.decrypt\" class=\"fn\">decrypt</a>(&amp;self, block: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"lioness/error/enum.LionessError.html\" title=\"enum lioness::error::LionessError\">LionessError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>decrypt a block</p>\n<h5 id=\"arguments-1\"><a class=\"doc-anchor\" href=\"#arguments-1\">§</a>Arguments</h5>\n<ul>\n<li><code>block</code> - a mutable byte slice of data to decrypt</li>\n</ul>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<ul>\n<li><code>LionessError::BlockSizeError</code> - returned if block size is too small</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/lioness/lib.rs.html#207-217\">Source</a><h4 class=\"code-header\">pub fn <a href=\"lioness/struct.Lioness.html#tymethod.new_raw\" class=\"fn\">new_raw</a>(key: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.array.html\">192</a>]) -&gt; <a class=\"struct\" href=\"lioness/struct.Lioness.html\" title=\"struct lioness::Lioness\">Lioness</a>&lt;H, SC&gt;</h4></section></summary><div class=\"docblock\"><p>Given a key, create a new Lioness cipher</p>\n</div></details></div></details>",0,"lioness::LionessDefault"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[6484]}