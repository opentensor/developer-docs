searchState.loadedDescShard("fragile", 0, "This library provides wrapper types that permit sending …\nA <code>Fragile&lt;T&gt;</code> wraps a non sendable <code>T</code> to be safely send to …\nReturned when borrowing fails.\nA <code>SemiSticky&lt;T&gt;</code> keeps a value T stored in a thread if it …\nA token that is placed to the stack to constrain lifetimes.\nA <code>Sticky&lt;T&gt;</code> keeps a value T stored in a thread.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImmutably borrows the wrapped value.\nImmutably borrows the wrapped value.\nImmutably borrows the wrapped value.\nMutably borrows the wrapped value.\nMutably borrows the wrapped value.\nMutably borrows the wrapped value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Fragile</code>, returning the wrapped value.\nConsumes the <code>SemiSticky</code>, returning the wrapped value.\nConsumes the <code>Sticky</code>, returning the wrapped value.\nReturns <code>true</code> if the access is valid.\nReturns <code>true</code> if the access is valid.\nReturns <code>true</code> if the access is valid.\nCreates a new <code>Fragile</code> wrapping a <code>value</code>.\nCreates a new <code>SemiSticky</code> wrapping a <code>value</code>.\nCreates a new <code>Sticky</code> wrapping a <code>value</code>.\nCrates a token on the stack with a certain name for …\nTries to immutably borrow the wrapped value.\nTries to immutably borrow the wrapped value.\nTries to immutably borrow the wrapped value.\nTries to mutably borrow the wrapped value.\nTries to mutably borrow the wrapped value.\nTries to mutably borrow the wrapped value.\nConsumes the <code>Fragile</code>, returning the wrapped value if …\nConsumes the <code>SemiSticky</code>, returning the wrapped value if …\nConsumes the <code>Sticky</code>, returning the wrapped value if …")