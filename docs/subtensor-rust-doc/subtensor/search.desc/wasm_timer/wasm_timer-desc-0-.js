searchState.loadedDescShard("wasm_timer", 0, "A future representing the notification that an elapsed …\nA measurement of a monotonically nondecreasing clock. …\nA stream representing notifications at fixed interval\nError returned from <code>TimerHandle::set_fallback</code>.\nA measurement of the system clock, useful for talking to …\nA “timer heap” used to power separately owned …\nA handle to a <code>Timer</code> which is used to create instances of a …\nAn extension trait for futures which provides convenient …\nAn extension trait for streams which provides convenient …\nAn anchor in time which can be used to create new …\nAn anchor in time which can be used to create new …\nPanics\nPanics\nProces any timers which are supposed to fire at or before …\nProces any timers which are supposed to fire before <code>now</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nReturns the amount of time elapsed from another instant to …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nReturns the amount of time elapsed from another instant to …\nReturns the amount of time elapsed from an earlier point …\nReturns the amount of time elapsed since this instant.\nReturns the difference from this system time to the …\nExtension traits for the standard <code>Stream</code> and <code>Future</code> traits.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a handle to this timer heap, used to create new …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new timer heap ready to create new timers.\nCreates a new future which will fire at <code>dur</code> time into the …\nCreates a new interval which will fire at <code>dur</code> time into …\nCreates a new future which will fire at the time specified …\nCreates a new interval which will fire at the time …\nCreates a new future which will fire at the time specified …\nCreates a new interval which will fire at the time …\nReturns the time at which this timer next needs to be …\nReturns an instant corresponding to “now”.\nReturns the system time corresponding to “now”.\nResets this timeout to an new timeout which will fire at …\nResets this timeout to an new timeout which will fire at …\nReturns the amount of time elapsed from another instant to …\nConfigures this timer handle to be the one returned by …\nReturns the amount of time elapsed from another instant to …\nCreates a new future which will take at most <code>dur</code> time to …\nCreates a new future which will take at most <code>dur</code> time to …\nCreates a new stream which will take at most <code>dur</code> time to …\nCreates a new stream which will take at most <code>dur</code> time to …\nCreates a new future which will resolve no later than <code>at</code> …\nCreates a new future which will resolve no later than <code>at</code> …\nFuture returned by the <code>FutureExt::timeout</code> method.\nStream returned by the <code>StreamExt::timeout</code> method.\nAn extension trait for futures which provides convenient …\nAn extension trait for streams which provides convenient …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new future which will take at most <code>dur</code> time to …\nCreates a new stream which will take at most <code>dur</code> time to …\nCreates a new future which will resolve no later than <code>at</code> …")