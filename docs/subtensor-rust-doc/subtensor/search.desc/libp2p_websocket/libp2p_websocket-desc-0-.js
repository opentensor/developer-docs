searchState.loadedDescShard("libp2p_websocket", 0, "Implementation of the libp2p <code>Transport</code> trait for …\nThe websocket connection.\nType alias corresponding to <code>framed::WsConfig::Dial</code> and …\nFunction type that wraps a websocket connection (see. …\nA Websocket transport.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the max. frame data size we support.\nReturn the configured maximum number of redirects.\nCreate a new websocket transport based on the given …\nSet the max. frame data size we support.\nSet max. number of redirects to follow.\nSet the TLS configuration if TLS support is desired.\nWebsocket base framing error.\nError in WebSockets.\nWebsocket handshake error.\nA multi-address is not supported.\nThe location header URL was invalid.\nA TLS related error.\nThe configured maximum of redirects have been made.\nError in the transport layer underneath.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBinary data.\nSend some bytes.\nClose reason.\nThe websocket connection.\nApplication data received over the websocket connection\nApplication data.\nData or control information received over the websocket …\nData sent over the websocket connection.\nSend a PING message.\nPONG control frame data.\nSend an unsolicited PONG message. (Incoming PINGs are …\nUTF-8 encoded textual data.\nA Websocket transport whose output type is a <code>Stream</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the max. frame data size we support.\nReturn the configured maximum number of redirects.\nCreate a new websocket transport based on another …\nSend binary application data to the remote.\nSend a PING to the remote.\nSend an unsolicited PONG to the remote.\nSet the max. frame data size we support.\nSet max. number of redirects to follow.\nSet the TLS configuration if TLS support is desired.\nTLS configuration builder.\nCertificate, DER-encoded X.509 format.\nTLS configuration.\nTLS related errors.\nThe DNS name was invalid.\nAn underlying I/O error.\nPrivate key, DER-encoded ASN.1 in either PKCS#8 or PKCS#1 …\nActual TLS error.\nAdd an additional trust anchor.\nCreate a new TLS configuration builder.\nCreate a client-only configuration.\nFinish configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new TLS configuration with the given server key …\nAssert the given bytes are DER-encoded ASN.1 in either …\nAssert the given bytes are in DER-encoded X.509 format.\nSet server key and certificate chain.")