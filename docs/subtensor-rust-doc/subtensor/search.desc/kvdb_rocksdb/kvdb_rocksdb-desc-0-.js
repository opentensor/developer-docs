searchState.loadedDescShard("kvdb_rocksdb", 0, "Compaction profile for the database settings Note, that …\nThe default column memory budget in MiB.\nThe default memory budget in MiB.\nKey-Value database.\nDatabase configuration\nAdd a new column family to the DB.\nAttempt to determine the best profile automatically, only …\nblock size\nSet number of columns.\nCompaction profile.\nCreates a new database if no database exists. Set to <code>true</code> …\nDefault profile suitable for most storage\nEnable native RocksDB statistics. Disabled by default.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet value by key.\nGet value by partial key. Prefix size should match …\nGet RocksDB statistics.\nSlow HDD compaction profile\nL0-L1 target file size The minimum size should be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterator over the data in the given database column index. …\nSpecify the maximum number of info/debug log files to be …\nMax number of open files.\nLimit the size (in bytes) of write ahead logs More info: …\nReturns the total memory budget in bytes.\nMemory budget (in MiB) used for setting block cache size …\nThe number of column families in the db.\nThe number of keys in a column (estimated).\nOpen database file.\nRemove the last column family in the database. The …\nGiven output of df command return Linux rotational flag …\nOpen the database as a secondary instance. Specify a path …\nDefault profile suitable for SSD storage\nHelper to create new transaction for this database.\nTry to catch up a secondary instance with the primary by …\nCreate new <code>DatabaseConfig</code> with default parameters and …\nCommit transaction to database.")