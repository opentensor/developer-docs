searchState.loadedDescShard("ip_network", 0, "IPv4 and IPv6 network structs.\nInvalid IP address syntax (IPv4 or IPv6).\nDefault route that contains all IP addresses, IP network …\nDefault route that contains all IP addresses, IP network …\nHost bits are set in given network IP address.\nNetwork address has invalid format (not X/Y).\nNetwork mask is not valid integer between 0 and 255.\nHolds IPv4 or IPv6 network.\nErrors when creating new IPv4 or IPv6 networks.\nError when creating new IPv4 or IPv6 networks.\nErrors from IPv4 or IPv6 network parsing.\nIPv4 Network.\nIPv6 Multicast Address Scopes.\nIPv6 Network.\nIPv4 address length in bits.\nIPv6 address length in bits.\nNetwork mask is bigger than possible for given IP version …\nReturns broadcast address of network (last address in …\nReturn an iterator of the collapsed IpNetworks.\nReturn an iterator of the collapsed Ipv4Networks.\nReturn an iterator of the collapsed Ipv6Networks.\nReturns <code>true</code> if <code>IpNetwork</code> contains <code>IpAddr</code>. For different …\nReturns <code>true</code> if given <code>IPv4Addr</code> is inside this network.\nReturns <code>true</code> if given <code>IPv6Addr</code> is inside this network.\nConverts <code>IpNetwork</code> to string in format X.X.X.X/Y for IPv4 …\nConverts <code>Ipv4Network</code> to string in format X.X.X.X/Y (CIDR …\nConverts <code>Ipv6Network</code> to string in format X:X::X/Y (CIDR …\nReturns the argument unchanged.\nConverts <code>Ipv4Addr</code> to <code>IpNetwork</code> with netmask 32.\nConverts <code>IpAddr</code> to <code>IpNetwork</code> with netmask 32 for IPv4 …\nConverts <code>Ipv6Addr</code> to <code>IpNetwork</code> with netmask 128.\nConverts <code>Ipv4Addr</code> to <code>Ipv4Network</code> with netmask 32.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts <code>Ipv6Addr</code> to <code>Ipv6Network</code> with netmask 128.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts string in format IPv4 (X.X.X.X/Y) or IPv6 …\nConverts string in format X.X.X.X/Y (CIDR notation) to …\nConverts string in format X:X::X/Y (CIDR notation) to …\nConverts string in format IPv4 (X.X.X.X/Y) or IPv6 …\nConverts string in format X.X.X.X/Y (CIDR notation) to …\nConverts string in format X:X::X/Y (CIDR notation) to …\nReturns network mask as IPv4 address.\nReturns iterator over host IP addresses in range (without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns iterator over all IP addresses in range including …\nReturns <code>true</code> if this whole network is inside benchmarking …\nReturns <code>true</code> if this is a broadcast network …\nReturns <code>true</code> if the network is default route, that …\nReturns <code>true</code> for the default route network (0.0.0.0/0), …\nReturns <code>true</code> for the default route network (::/0), that …\nReturns <code>true</code> if this is a part of network reserved for …\nReturns <code>true</code> if this network is in a range designated for …\nReturns <code>true</code> if this is a part of network reserved for …\nReturns <code>true</code> if the network appears to be globally …\nReturns <code>true</code> if the network appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if this whole network is inside IETF Protocol …\nReturns <code>true</code> if <code>IpNetwork</code> contains <code>Ipv4Network</code> struct.\nReturns <code>true</code> if <code>IpNetwork</code> contains <code>Ipv6Network</code> struct.\nReturns <code>true</code> if the network is is inside link-local range …\nReturns <code>true</code> for network in local identification range …\nReturns <code>true</code> if this network is inside loopback address …\nReturns <code>true</code> if this network is inside loopback address …\nReturns <code>true</code> if this is a loopback network (::1/128).\nReturns <code>true</code> if the network is part of multicast network …\nReturns <code>true</code> if this whole network is inside multicast …\nReturns <code>true</code> if this is a part of multicast network …\nReturns <code>true</code> if this whole network range is inside private …\nReturns <code>true</code> if this whole network is inside reserved …\nReturns <code>true</code> if this whole network is inside Shared …\nReturns <code>true</code> if the network is a globally routable unicast …\nReturns <code>true</code> if the network is part of unicast and …\nReturns <code>true</code> if this is a deprecated unicast site-local …\nReturns <code>true</code> if this is a part of unique local network …\nReturns <code>true</code> for the special ‘unspecified’ network …\nReturns <code>true</code> for the special ‘unspecified’ network …\n<code>Ipv4RangeIterator</code>, <code>Ipv4NetworkIterator</code>, and …\nReturns last IP address in range. Similar as …\nReturns the network’s multicast scope if the network is …\nReturns network mask as integer.\nReturns network mask as integer.\nReturns network mask.\nReturns network IP address.\nReturns network IP address (first address in range).\nReturns network IP address (first address in range).\nConstructs new <code>IpNetwork</code> based on <code>IpAddr</code> and <code>netmask</code>.\nConstructs new <code>Ipv4Network</code> based on <code>Ipv4Addr</code> and <code>netmask</code>.\nConstructs new <code>Ipv6Network</code> based on <code>Ipv6Addr</code> and <code>netmask</code>.\nConstructs new <code>IpNetwork</code> based on <code>IpAddr</code> and <code>netmask</code> with …\nConstructs new <code>Ipv4Network</code> based on <code>Ipv4Addr</code> and <code>netmask</code> …\nConstructs new <code>Ipv6Network</code> based on <code>Ipv6Addr</code> and <code>netmask</code> …\nReturns iterator over networks with bigger netmask by one. …\nReturns <code>Ipv6NetworkIterator</code> over networks with netmask …\nReturns <code>Ipv4NetworkIterator</code> over networks with defined …\nReturns <code>Ipv6NetworkIterator</code> over networks with defined …\nReturn a vector of the summarized network range given the …\nReturns network with smaller netmask by one. If netmask is …\nReturns network with smaller netmask by one. If netmask is …\nIterates over new created IPv4 network from given network.\nIPv4 range iterator.\nIterates over new created IPv6 network from given network.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs new <code>Ipv4RangeIterator</code> that iterates host …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs new <code>Ipv4RangeIterator</code> for given range, both <code>from</code>…\nConstructs new <code>Ipv4NetworkIterator</code>, that iterates over …\nConstructs new <code>Ipv6NetworkIterator</code>, that iterates over …")