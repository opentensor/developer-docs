searchState.loadedDescShard("bitcoin_internals", 0, "Rust Bitcoin Internal\nAsserts a boolean expression at compile time.\nImplements <code>Debug</code> by calling through to <code>Display</code>.\nError\nFormat known-length array as hex.\nHelpers for encoding bytes as hex strings.\nImplements standard array methods for a given wrapper type.\nImplements conversions from various string types.\nImplements conversions from various string types as well …\nImpls std::error::Error for the specified type with …\nVarious macros used by the Rust Bitcoin ecosystem.\nCreates an error type intended for string parsing errors.\nContains extensions of <code>serde</code> and internal reexports.\nFormats error.\nImplements the <code>InputString</code> type storing the parsed input.\nDisplays message saying <code>failed to parse &lt;input&gt; as &lt;what&gt;</code>.\nConditionally stores the input string in parse errors.\nDisplays a message saying <code>failed to parse &lt;self&gt; as &lt;what&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFormats a message saying <code>&lt;self&gt; is not a known &lt;what&gt;</code>.\nPossible case of hex.\nProduce lower-case chars (<code>[0-9a-f]</code>).\nProduce upper-case chars (<code>[0-9A-F]</code>).\nImplements a buffered encoder.\nHelpers for displaying bytes as hex strings.\nReexports of extension traits.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait for types that can be soundly converted to <code>OutBytes</code>.\nHex-encodes bytes into the provided buffer.\nA buffer with compile-time-known length.\nA byte buffer that can only be written-into.\nPerforms the conversion.\nPerforms the conversion.\nReturns the written bytes as a hex <code>str</code>.\nResets the buffer to become empty.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if no more bytes can be written into the …\nCreates an empty <code>BufEncoder</code>.\nEncodes <code>byte</code> as hex in given <code>case</code> and appends it to the …\nEncodes <code>bytes</code> as hex in given <code>case</code> and appends them to the …\nEncodes as many <code>bytes</code> as fit into the buffer as hex and …\nHow many bytes can be written to this buffer.\nCreates an uninitialized buffer.\nThe type providing <code>fmt::Display</code> implementation.\nDisplays byte array as hex.\nDisplays byte slice as hex.\nExtension trait for types that can be displayed as hex.\nDisplay <code>Self</code> as a continuous sequence of ASCII hex chars.\nFormat known-length array as hex.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHints how much bytes to reserve when creating a <code>String</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates the wrapper.")