searchState.loadedDescShard("pallet_crowdloan", 0, "Crowdloan Pallet\nA struct containing the information about a crowdloan.\nA an bounded <code>Call</code>. Its encoding must be at most 128 bytes.\nA hash with no preimage length. We do not support creation …\nA hash of the call together with an upper limit for its …\nThe optional call to dispatch when the crowdloan is …\nThe optional call to dispatch when the crowdloan is …\nThe cap to raise.\nThe cap to raise.\nThe number of contributors to the crowdloan.\nThe number of contributors to the crowdloan.\nThe creator of the crowdloan.\nThe creator of the crowdloan.\nThe initial deposit of the crowdloan from the creator.\nThe initial deposit of the crowdloan from the creator.\nThe end block of the crowdloan.\nThe end block of the crowdloan.\nWhether the crowdloan has been finalized.\nWhether the crowdloan has been finalized.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nThe account holding the funds for this crowdloan. Derived …\nThe account holding the funds for this crowdloan. Derived …\nCalls <code>U::from(self)</code>.\nMinimum contribution to the crowdloan.\nMinimum contribution to the crowdloan.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nThe amount raised so far.\nThe amount raised so far.\nThe optional target address to transfer the raised funds …\nThe optional target address to transfer the raised funds …\nAutogenerated weights for <code>pallet_crowdloan</code>\nThe absolute minimum contribution required to contribute …\nA refund was fully processed for a failed crowdloan.\nThe crowdloan has already been finalized.\nThe block duration is too long.\nThe crowdloan block duration is too short.\nContains a variant per dispatchable extrinsic that this …\nCall to dispatch was not found in the preimage storage.\nThe crowdloan cannot end in the past.\nThe crowdloan cap has not been raised.\nThe crowdloan cap has been fully raised.\nThe crowdloan cap is too low.\nThe cap was updated.\nConfiguration trait of this pallet.\nA contribution was made to an active crowdloan.\nThe contribution period has ended.\nThe crowdloan contribution period has not ended yet.\nThe contribution is too low.\nA map of crowdloan ids to their contributors and their …\nA crowdloan was created.\nA map of crowdloan ids to their information.\nThe currency mechanism.\nThe current crowdloan id that will be set during the …\nThe deposit cannot be withdrawn from the crowdloan.\nThe crowdloan initial deposit is too low.\nA crowdloan was dissolved.\nThe end was updated.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nA crowdloan was finalized, funds were transferred and the …\nStorage for the migration run status.\nThe account does not have enough balance to pay for the …\nThe crowdloan id is invalid.\nThe origin of this call is invalid.\nThe maximum number of contributors has been reached.\nThe maximum block duration for a crowdloan.\nThe minimum contribution was updated.\nThe minimum block duration for a crowdloan.\nThe minimum contribution is too low.\nThe minimum deposit required to create a crowdloan.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe next incrementing crowdloan id.\nThe contributor has no contribution for this crowdloan.\nThe crowdloan is not ready to be dissolved, it still has …\nAn overflow occurred.\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe pallet id that will be used to derive crowdloan …\nA refund was partially processed for a failed crowdloan.\nThe preimage provider which will be used to store the call …\nThe maximum number of contributors that can be refunded in …\nThe overarching call type.\nThe overarching event type.\nAn underflow occurred.\nThe weight information for the pallet.\nA contribution was withdrawn from a failed crowdloan.\nContribute to an active crowdloan.\nContribute to an active crowdloan.\nCreate a crowdloan that will raise funds up to a maximum …\nCreate a crowdloan that will raise funds up to a maximum …\nAuto-generated docs-only module listing all defined …\nDissolve a crowdloan.\nDissolve a crowdloan.\nFinalize a successful crowdloan.\nFinalize a successful crowdloan.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>contribute</code>.\nCreate a call with the variant <code>create</code>.\nCreate a call with the variant <code>dissolve</code>.\nCreate a call with the variant <code>finalize</code>.\nCreate a call with the variant <code>refund</code>.\nCreate a call with the variant <code>update_cap</code>.\nCreate a call with the variant <code>update_end</code>.\nCreate a call with the variant <code>update_min_contribution</code>.\nCreate a call with the variant <code>withdraw</code>.\nRefund a failed crowdloan.\nRefund a failed crowdloan.\nAuto-generated docs-only module listing all (public and …\nUpdate the cap of a non-finalized crowdloan.\nUpdate the cap of a non-finalized crowdloan.\nUpdate the end block of a non-finalized crowdloan.\nUpdate the end block of a non-finalized crowdloan.\nUpdate the minimum contribution of a non-finalized …\nUpdate the minimum contribution of a non-finalized …\nWithdraw a contribution from an active (not yet finalized …\nWithdraw a contribution from an active (not yet finalized …\nContribute to an active crowdloan.\nCreate a crowdloan that will raise funds up to a maximum …\nDissolve a crowdloan.\nFinalize a successful crowdloan.\nRefund a failed crowdloan.\nUpdate the cap of a non-finalized crowdloan.\nUpdate the end block of a non-finalized crowdloan.\nUpdate the minimum contribution of a non-finalized …\nWithdraw a contribution from an active (not yet finalized …\nA map of crowdloan ids to their contributors and their …\nA map of crowdloan ids to their information.\nThe current crowdloan id that will be set during the …\nStorage for the migration run status.\nThe next incrementing crowdloan id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_crowdloan</code> using the Substrate node and …\nWeight functions needed for <code>pallet_crowdloan</code>.\nStorage: <code>Crowdloan::Crowdloans</code> (r:1 w:1) Proof: …\nStorage: <code>System::Account</code> (r:2 w:2) Proof: <code>System::Account</code> (…\nStorage: <code>Crowdloan::Crowdloans</code> (r:1 w:1) Proof: …\nStorage: <code>Crowdloan::Crowdloans</code> (r:1 w:1) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>Crowdloan::Crowdloans</code> (r:1 w:1) Proof: …\nStorage: <code>Crowdloan::Crowdloans</code> (r:1 w:1) Proof: …\nStorage: <code>Crowdloan::Crowdloans</code> (r:1 w:1) Proof: …\nStorage: <code>Crowdloan::Crowdloans</code> (r:1 w:1) Proof: …\nStorage: <code>Crowdloan::Crowdloans</code> (r:1 w:1) Proof: …")