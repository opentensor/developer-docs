searchState.loadedDescShard("ark_scale", 0, "Arkworks serialization wrapped in Parity SCALE codec\nArkworks type wrapped for serialization by Scale\nArkworks type wrapped for serialization by Scale\nAn orphan rules helper which provides …\nArkScale usage which neither compresses nor validates …\nItems implementing <code>MaxEncodedLen</code> have a statically known …\nDerive <code>parity_scale_codec::MaxEncodedLen</code> for struct and …\nArkworks’ serialization modes, morally (Compress, …\nArkScale usage for typical wire formats, like block data …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHazardous projective serialization and deserialization\nImplement body of <code>scale::MaxEncodedLen</code> by delegation to …\nImplement body of <code>scale::Decode</code> by delegation to <code>ArkScale</code>, …\nImplement body of <code>scale::Encode</code> by delegation to <code>ArkScale</code>, …\nImplement <code>scale::{Encode,Decode}</code> by delegation to <code>ArkScale</code>,\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nArkworks’ <code>CanonicalSerialize</code> cannot consume <code>Iterator</code>s …\nArkworks’ <code>CanonicalSerialize</code> cannot consume <code>Iterator</code>s …\nArkworks’ serialization modes hack.\nUpper bound, in bytes, of the maximum encoded size of this …\nUpper bound, in bytes, of the maximum encoded size of this …\nUpper bound, in bytes, of the maximum encoded size of this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAffine coordinates for a point on an elliptic curve in …\nCoefficient <code>a</code> of the curve equation.\nCoefficient <code>b</code> of the curve equation.\nGenerator of the prime-order subgroup.\nRepresents the point at infinity by setting the setting …\nJacobian coordinates for a point on an elliptic curve in …\nConstants and convenience functions that collectively …\nFlags to be encoded into the serialization. The default …\nRepresents a point with negative y-coordinate by setting …\nRepresents a point with positive y-coordinate by setting …\nUsing …\nHelper method for computing <code>elem + Self::COEFF_B</code>.\nPerforms cofactor clearing. The default method is simply …\nPerforms cofactor clearing. The default method is simply …\nIf <code>validate</code> is <code>Yes</code>, calls <code>check()</code> to make sure the element …\nSets <code>self = 2 * self</code>. Note that Jacobian formulae are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to construct an affine point given an …\nReturns the two possible y-coordinates corresponding to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the provided curve point is in the prime-order …\nChecks if <code>self</code> is in the subgroup having order that …\nChecks if <code>self</code> is a valid point on the curve.\nChecks whether <code>self.z.is_zero()</code>.\nDefault implementation for multi scalar multiplication\nDefault implementation of group multiplication for affine …\nHelper method for computing <code>elem * Self::COEFF_A</code>.\nMultiplies this element by the cofactor and output the …\nDefault implementation of group multiplication for …\nIf <code>self.is_zero()</code>, returns <code>self</code> (<code>== Self::zero()</code>). Else, …\nConstructs a group element from x and y coordinates. …\nConstructs a new group element in a way while enforcing …\nConstructs a group element from x and y coordinates.\nConstructs a new group element without checking whether …\nNormalizes a slice of projective elements so that …\nIf uncompressed, serializes both x and y coordinates as …\n<code>X / Z</code> projection of the affine <code>X</code>\n<code>Y / Z</code> projection of the affine <code>Y</code>\nProjective multiplicative inverse. Will be <code>0</code> only at …\nReturns the point at infinity, which always has Z = 0.\nAffine coordinates for a point on a twisted Edwards curve, …\nCoefficient <code>a</code> of the curve equation.\nCoefficient <code>a</code> of the curve equation.\nCoefficient <code>b</code> of the curve equation.\nCoefficient <code>d</code> of the curve equation.\nGenerator of the prime-order subgroup.\nConstants and convenience functions that collectively …\nModel parameters for the Montgomery curve that is …\n<code>Projective</code> implements Extended Twisted Edwards Coordinates …\nConstants and convenience functions that collectively …\nModel parameters for the Twisted Edwards curve that is …\nFlags to be encoded into the serialization. The default …\nPerforms cofactor clearing. The default method is simply …\nPerforms cofactor clearing. The default method is simply …\nIf <code>validate</code> is <code>Yes</code>, calls <code>check()</code> to make sure the element …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to construct an affine point given an …\nAttempts to recover the x-coordinate given an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that the current point is in the prime order …\nChecks if <code>self</code> is in the subgroup having order equaling …\nChecks that the current point is on the elliptic curve.\nIs this point the identity?\nDefault implementation for multi scalar multiplication\nDefault implementation of group multiplication for affine …\nHelper method for computing <code>elem * Self::COEFF_A</code>.\nMultiplies this element by the cofactor and output the …\nDefault implementation of group multiplication for …\nConstruct a new group element in a way while enforcing …\nConstruct a new group element in a way while enforcing …\nConstruct a new group element without checking whether the …\nConstruct a new group element without checking whether the …\nIf uncompressed, serializes both x and y coordinates. If …\nX coordinate of the point represented as a field element\nY coordinate of the point represented as a field element\nConstruct the identity of the group\nScale <code>Input</code> error wrapped for passage through Arkworks’ …\nScale <code>Input</code> wrapped as Arkworks’ <code>Read</code>\nScale <code>Output</code> wrapped as Arkworks’ <code>Write</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")