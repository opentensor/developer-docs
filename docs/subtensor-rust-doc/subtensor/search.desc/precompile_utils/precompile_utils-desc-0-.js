searchState.loadedDescShard("precompile_utils", 0, "Contains the error value\nAlias for Result returning an EVM precompile error.\nContains the success value\nOne single precompile used by EVM engine.\nTry to execute the precompile with given <code>handle</code> which …\nProvide utils to assemble precompiles and precompilesets …\nProvides utilities for compatibility with Solidity tooling.\nUtils related to Substrate features:\nCost calculations. TODO: PR EVM to make those cost …\nCheck that a function call is compatible with the context …\nReturns a reader of the input, skipping the selector.\nRead the selector from the input data.\nRecord cost of one DB read manually. The max encoded …\nRecord cost of logs.\nRecord cost of a log manually. This can be useful to …\nExtension trait allowing to record logs into a …\nCreate a 0-topic log.\nCreate a 1-topic log.\nCreate a 2-topics log.\nCreate a 3-topics log.\nCreate a 4-topics log.\nPrecompile can be called using DELEGATECALL/CALLCODE.\nThe type of EVM address.\nPrecompiles are allowed to call this precompile.\nThe code is greater than 5-bytes, potentially a Smart …\nNo code is stored at the address, therefore is EOA.\nAllows to know if a precompile is active or not. This …\nThe 5-byte magic constant for a precompile is stored at …\nWraps a stateless precompile: a type implementing the …\nTrait representing checks that can be made on a precompile …\nWraps a tuple of <code>PrecompileSetFragment</code> to make a real …\nA fragment of a PrecompileSet. Should be implemented as is …\nWraps an inner PrecompileSet with all its addresses …\nWraps a precompileset fragment into a range, and will skip …\nA precompile that was removed from a precompile set. Still …\nMake a precompile that always revert. Can be useful when …\nPrecompile is able to do subcalls with provided nesting …\nThe code stored at the address is less than 5 bytes, but …\nDoes this precompile supports being called with …\nIs this precompile able to do subcalls?\nIs this precompile callable by a precompile?\nSummarize the checks when being called by a precompile.\nIs this precompile callable by a smart contract?\nSummarize the checks when being called by a smart contract.\nCheck that a function call is compatible with the context …\nExecute the fragment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nRetrieves the type of address demarcated by <code>AddressType</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the provided address an active precompile, a precompile …\nIs the provided address a precompile in this fragment?\nInstanciate the fragment.\nCreate a new instance of the PrecompileSet.\nReturns a reader of the input, skipping the selector.\nRead the selector from the input data as u32.\nRecord cost of logs.\nRecord cost of a log manually. This can be useful to …\nIs there a limit to the amount of recursions this …\nSummarize\nReturn the list of addresses covered by this fragment.\nReturn the list of mapped addresses contained in this …\nReturn the list of H160 addresses contained in this …\nHandle provided to a precompile to interact with the EVM.\nData returned by a precompile on success.\nA UTF-8–encoded, growable string.\nReturns a byte slice of this <code>String</code>’s contents.\nConverts a <code>String</code> into a mutable string slice.\nReturns a mutable reference to the contents of this <code>String</code>.\nExtracts a string slice containing the entire <code>String</code>.\nPerform subcall in provided context. Precompile specifies …\nReturns this <code>String</code>’s capacity, in bytes.\nTruncates this <code>String</code>, removing all contents.\nClones the contents of <code>source</code> into <code>self</code>.\nRetreive the code address (what is the address of the …\nRetreive the context in which the precompile is executed.\nCreates an empty <code>String</code>.\nRemoves the specified range from the string in bulk, …\nEncode this value as ASN.1 DER using the provided <code>Writer</code>.\nCompute the length of this value in bytes when encoded as …\nCopies elements from <code>src</code> range to the end of the string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>&amp;mut str</code> into a <code>String</code>.\nConverts a clone-on-write string to an owned instance of …\nConverts a <code>&amp;str</code> into a <code>String</code>.\nConverts the given boxed <code>str</code> slice to a <code>String</code>. It is …\nAllocates an owned <code>String</code> from a single character.\nConverts a <code>&amp;String</code> into a <code>String</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nCreates a new <code>String</code> from a pointer, a length and a …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nDecode a native endian UTF-16–encoded vector <code>v</code> into a …\nDecode a native endian UTF-16–encoded slice <code>v</code> into a …\nDecode a UTF-16BE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16BE–encoded slice <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded vector <code>v</code> into a <code>String</code>, …\nDecode a UTF-16LE–encoded slice <code>v</code> into a <code>String</code>, …\nConverts a vector of bytes to a <code>String</code>.\nConverts a slice of bytes to a string, including invalid …\nConverts a <code>Vec&lt;u8&gt;</code> to a <code>String</code>, substituting invalid UTF-8 …\nConverts a vector of bytes to a <code>String</code> without checking …\nRetreive the gas limit of this call.\nRetreive the input data the precompile is called with.\nInserts a character into this <code>String</code> at a byte position.\nInserts a string slice into this <code>String</code> at a byte position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>String</code> into a Box&lt;str&gt;.\nConverts a <code>String</code> into a byte vector.\nConverts a <code>String</code> into an iterator over the <code>char</code>s of the …\nDecomposes a <code>String</code> into its raw components: …\nReturns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…\nIs the precompile call is done statically.\nConsumes and leaks the <code>String</code>, returning a mutable …\nReturns the length of this <code>String</code>, in bytes, not <code>char</code>s or …\nRecord a log.\nCreates a new empty <code>String</code>.\nRemoves the last character from the string buffer and …\nAppends the given <code>char</code> to the end of this <code>String</code>.\nAppends a given string slice onto the end of this <code>String</code>.\nRecord cost to the Runtime gasometer.\nRecord Substrate specific cost.\nRefund Substrate specific cost.\nRetreive the remaining gas.\nRemoves a <code>char</code> from this <code>String</code> at a byte position and …\nRemove all matches of pattern <code>pat</code> in the <code>String</code>.\nRemoves the specified range in the string, and replaces it …\nReserves capacity for at least <code>additional</code> bytes more than …\nReserves the minimum capacity for at least <code>additional</code> …\nRetains only the characters specified by the predicate.\nShrinks the capacity of this <code>String</code> with a lower bound.\nShrinks the capacity of this <code>String</code> to match its length.\nSplits the string into two at the given byte index.\nShortens this <code>String</code> to the specified length.\nConverts a <code>CString</code> into a <code>String</code> if it contains valid …\nTries to reserve capacity for at least <code>additional</code> bytes …\nTries to reserve the minimum capacity for at least …\nCreates a new empty <code>String</code> with at least the specified …\nCreates a new empty <code>String</code> with at least the specified …\nSolidity encoding following the Contract ABI Specification\nProvide checks related to function modifiers …\nUtilities to work with revert messages with support for …\nData that can be encoded/encoded followiong the Solidity …\nAdapter to parse data as a first type then convert it to …\nWrapper around an EVM input slice.\nA UTF-8–encoded, growable string.\nHelp build an EVM input/output data.\nDecode the value from its Solidity ABI format. If <code>T</code> is a …\nEncode the value into its Solidity ABI format. If <code>T</code> is a …\nEncode the value as the arguments of a Solidity function …\nCheck the input has at least the correct amount of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a Reader.\nCreates a new empty output builder (without selector).\nCreate a Reader while skipping an initial selector.\nCreates a new empty output builder with provided selector. …\nRead data from the input.\nReads a pointer, returning a reader targetting the pointed …\nRead raw bytes from the input. Doesn’t handle any …\nRead remaining bytes\nExtracts the selector from the start of the input, or …\nWrite data of requested type.\nWrites a pointer to given data. The data will be appended …\nThe <code>bytes/string</code> type of Solidity. It is different from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>address</code> type of Solidity. H160 could represent 2 types …\nWrapper around a Vec that provides a max length bound on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents modifiers a Solidity function can be annotated …\nFunction that modifies the state but refuse receiving …\nFunction that modifies the state and accept funds.\nFunction that doesn’t modify the state.\nCheck that a function call is compatible with the context …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nBacktrace of an revert. Built depth-first. Implement …\nAdditional function for everything having a Backtrace.\nThe reading cursor overflowed. This should realistically …\nA custom revert reason if other variants are not …\nGeneric error to build abi-encoded revert output. See: …\nContains the error value\nUsed by a check that the input contains at least N static …\nAllows to inject backtrace data.\nRepresent the result of a computation that can revert.\nContains the success value\nOutput type of the injection. Should be a type that can …\nA pointer (used for structs and arrays) points out of …\nTried to read data out of bounds.\nAn revert returned by various functions in …\nAdditional functions for Revert and MayRevert.\nPossible revert reasons.\nAn unknown selector has been provided.\nA value is too large to fit in the wanted type. For …\nFor all <code>RevertReason</code> variants that have a <code>what</code> field, …\nCreate a <code>RevertReason::Custom</code> from anything that can be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nOccurs in an array at provided index.\nOccurs in a field.\nOccurs in a tuple.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the backtrace is empty.\nMap last tuple entry into a field. Does nothing if last …\nMap the reason while keeping the same backtrace.\nCreate a new empty backtrace.\nCreate a new <code>Revert</code> with a <code>RevertReason</code> and an empty …\nCreate a <code>RevertReason::ReadOutOfBounds</code> from anything that …\nGenerate an encoded revert from a simple String. Returns a …\nGenerate an encoded revert from a simple String. Returns a …\nTransforms the revert into its bytes representation (from …\nCreate a <code>RevertReason::ValueIsTooLarge</code> from anything that …\nWhat was being read?\nWhat was being read?\nHelper functions requiring a Substrate runtime. This …\nCost of a Substrate DB read in gas.\nCost of a Substrate DB write in gas.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to dispatch a Substrate call. Return an error if there …")