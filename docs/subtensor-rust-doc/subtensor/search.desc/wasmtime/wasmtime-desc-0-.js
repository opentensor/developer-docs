searchState.loadedDescShard("wasmtime", 0, "Wasmtime’s embedding API\nWhen the <code>component-model</code> feature is enabled this trap …\nA trait used to get shared access to a <code>Store</code> in Wasmtime.\nA trait used to get exclusive mutable access to a <code>Store</code> in …\nUsed to indicate that a trap was raised by atomic wait …\nAn indicator that the compilation strategy should be …\nFailed float-to-int conversion.\nSignature mismatch on indirect call.\nImplementation of an incremental compilation’s key/value …\nPassed to the argument of <code>Store::call_hook</code> to indicate a …\nA structure representing the caller’s context when …\nIndicates the VM is calling a host function, from …\nIndicates the VM is calling a WebAssembly function, from …\nGlobal configuration options used to create an <code>Engine</code> and …\nThe global is constant and its value does not change\nCurrently the default backend, Cranelift aims to be a …\nUse a custom version string. Must be at most 255 bytes.\nValue returned by <code>ResourceLimiter::instances</code> default method\nValue returned by <code>ResourceLimiter::memories</code> default method\nValue returned by <code>ResourceLimiter::tables</code> default method\nThe host information associated with the <code>Store</code>, aka the <code>T</code> …\nSupport is disabled, and wasmtime will not parse debug …\nSupport is unconditionally enabled and wasmtime will parse …\nAn <code>Engine</code> which is a global context for compilation and …\nSupport for backtrace details is conditional on the …\nContains the error value\nA convenience wrapper for <code>Result&lt;T, anyhow::Error&gt;</code>.\nAn exported WebAssembly value.\nA descriptor for an exported WebAssembly value.\nAn external item to a WebAssembly module, or a list of …\nRepresents an opaque reference to any data within …\nA reference to opaque data in the Wasm instance.\nAn <code>externref</code> value which can hold opaque data to the Wasm …\nA list of all possible types which can be externally …\nFloating point 32 bit integer.\nA 32-bit float.\nFloating point 64 bit integer.\nA 64-bit float.\nDescription of a frame in a backtrace for a <code>WasmBacktrace</code>.\nDebug information for a symbol that is attached to a …\nA WebAssembly function which can be called.\nA WebAssembly <code>func</code> which can be called.\nThis external type is the type of a WebAssembly function.\nA reference to a Wasm function.\nA first-class reference to a WebAssembly function.\nA descriptor for a function in a WebAssembly module.\nA WebAssembly <code>global</code> value which can be read and written …\nA WebAssembly <code>global</code> which acts like a <code>Cell&lt;T&gt;</code> of sorts, …\nThis external type is the type of a WebAssembly global.\nA WebAssembly global descriptor.\nA wasm atomic operation was presented with a …\nSigned 32 bit integer.\nA 32-bit integer\nSigned 64 bit integer.\nA 64-bit integer\nA descriptor for an imported value into a wasm module.\nIndirect call to a null table entry.\nAn instantiated WebAssembly module.\nRepresents the module instance allocation strategy to use.\nAn instance, pre-instantiation, that is ready to be …\nAn integer division by zero.\nAn integer arithmetic operation caused an overflow.\nExecution has potentially run too long and may be …\nInternal trait implemented for all arguments that can be …\nCollect profiling info for “jitdump” file format, used …\nA linear memory. This trait provides an interface for raw …\nStructure used to link wasm modules/instances together.\nA WebAssembly linear memory.\nA WebAssembly linear memory.\nThis external type is the type of a WebAssembly memory.\nError for out of bounds <code>Memory</code> access.\nA memory creator. Can be used to provide a memory creator …\nAn out-of-bounds memory access.\nA descriptor for a WebAssembly memory type.\nIndicates that <code>wait</code> did not complete and instead returned …\nA compiled WebAssembly module, ready to be instantiated.\nConfigure the strategy used for versioning in serializing …\nIndicator of whether a global is mutable or not\nEmit no version string in serialization, and accept all …\nNo optimizations performed, minimizes compilation time by …\nNo profiler support.\nContains the success value\nIndicates that a <code>wait</code> completed by being awoken by a …\nThe on-demand instance allocation strategy.\nPossible optimization levels for the Cranelift codegen …\nWhen wasm code is configured to consume fuel and it runs …\nCollect function name information as the “perf map” …\nThe pooling instance allocation strategy.\nConfiguration options used with …\nSelect which profiling technique to support.\nUsed by hosts to limit resource consumption of instances.\nA convenience wrapper for <code>Result&lt;T, anyhow::Error&gt;</code>.\nIndicates the VM is returning from a host function, to …\nIndicates the VM is returning from a WebAssembly function, …\nA constructor for externally-created shared memory.\nA WebAssembly shared memory; these are handled separately …\nGenerates the fastest possible code, but may take longer.\nSimilar to <code>speed</code>, but also performs transformations aimed …\nThe current stack space was exhausted.\nA <code>Store</code> is a collection of WebAssembly instances and …\nA temporary handle to a <code>&amp;Store&lt;T&gt;</code>.\nA temporary handle to a <code>&amp;mut Store&lt;T&gt;</code>.\nProvides limits for a <code>Store</code>.\nUsed to build <code>StoreLimits</code>.\nPossible Compilation strategies for a wasm module.\nA WebAssembly <code>table</code>, or an array of values.\nA WebAssembly <code>table</code> which is an array of <code>Val</code> reference …\nThis external type is the type of a WebAssembly table.\nAn out-of-bounds access to a table.\nA descriptor for a table in a WebAssembly module.\nIndicates that <code>wait</code> completed with a timeout, meaning that …\nRepresentation of a WebAssembly trap and what caused it to …\nA statically typed WebAssembly function.\nError for an unresolvable import.\nCode that was supposed to have been unreachable was …\nA 128 bit number.\nA 128-bit number\nCollect profiling info using the “ittapi”, used with …\nPossible runtime values that a WebAssembly module can …\nA “raw” and unsafe representation of a WebAssembly …\nA list of all possible value types in WebAssembly.\nThe value of the global can change over time\nResult of <code>Memory::atomic_wait32</code> and <code>Memory::atomic_wait64</code>\nRepresentation of a backtrace of function frames in a …\nSelect how wasm backtrace detailed information is handled.\nA trait used for <code>Func::typed</code> and with <code>TypedFunc</code> to …\nA trait used for <code>Func::typed</code> and with <code>TypedFunc</code> to …\nA trait implemented for types which can be returned from …\nA trait implemented for types which can be arguments and …\nUse the wasmtime crate’s Cargo package version.\nInject more fuel into this store to be consumed when …\nInject more fuel into this store to be consumed when …\nAdds fuel to this <code>Store</code> for wasm to consume while …\nGet the map from <code>.text</code> section offsets to Wasm binary …\nAliases one item’s name as another.\nAliases one module’s name as another.\nSets the instance allocation strategy to use.\nConfigures whether this <code>Linker</code> will shadow previous …\nConfigures whether this <code>Linker</code> will allow unknown exports …\nReturns the store context that this type provides access …\nReturns the store context that this type provides access …\nReturn the allocated memory as a mutable pointer to u8.\nEquivalent of the WebAssembly <code>memory.atomic.notify</code> …\nEquivalent of the WebAssembly <code>memory.atomic.wait32</code> …\nEquivalent of the WebAssembly <code>memory.atomic.wait64</code> …\nGet the backtrace for this Error.\nConsumes this builder and returns the <code>StoreLimits</code>.\nReturns the number of allocated bytes which are accessible …\nLoads cache configuration specified at <code>path</code>.\nLoads cache configuration from the system default path.\nInvokes this WebAssembly function with the specified …\nInvokes this function with the <code>params</code> given and writes …\nConfigure a function that runs on calls and returns …\nInvokes this function in an “unchecked” fashion, …\nCaptures a trace of the WebAssembly frames on the stack …\nAn iterator of the chain of source errors contained by …\nReturns the 1-indexed source code column number this …\nReturns the configuration settings that this engine is …\nSynthetically consumes fuel from the store.\nSynthetically consume fuel from this store.\nSynthetically consumes fuel from this <code>Store</code>.\nConfigures whether execution of WebAssembly will “…\nReturns the value type of this global descriptor.\nWrap the error value with additional context.\nCopy <code>len</code> elements from <code>src_table[src_index..]</code> into …\nConfigures whether the debug verifier of Cranelift is …\nAllows setting a Cranelift boolean flag or preset. This …\nAllows settings another Cranelift flag defined by a flag …\nConfigures whether Cranelift should perform a …\nConfigures the Cranelift code generator optimization level.\nConfigures the Cranelift code generator to use its “…\nAccess the underlying data owned by this <code>Store</code>.\nAccess the underlying data owned by this <code>Store</code>.\nAccess the underlying data owned by this <code>Store</code>.\nAccess the underlying data owned by this <code>Store</code>.\nReturns this memory as a native Rust slice.\nReturn access to the available portion of the shared …\nGet the underlying data for this <code>ExternRef</code>.\nSame as <code>Memory::data_mut</code>, but also returns the <code>T</code> from the …\nAccess the underlying data owned by this <code>Store</code>.\nAccess the underlying data owned by this <code>Store</code>.\nAccess the underlying data owned by this <code>Store</code>.\nReturns this memory as a native Rust mutable slice.\nReturns the base pointer, in the host’s address space, …\nReturns the byte length of this memory.\nReturns the byte length of this memory.\nConfigures whether DWARF debug information will be emitted …\nDefines a new item in this <code>Linker</code>.\nSame as <code>Linker::define</code>, except only the name of the import …\nImplement any function imports of the <code>Module</code> with a …\nImplement any imports of the given <code>Module</code> with a function …\nDeserializes an in-memory compiled module previously …\nSame as <code>deserialize</code>, except that the contents of <code>path</code> are …\nDisable caching.\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nConfigures the size, in bytes, of the guard region used at …\nConfigures the size, in bytes, of the extra virtual memory …\nReturns the element value type of this table.\nReturns the underlying <code>Engine</code> this store is connected to.\nReturns the <code>Engine</code> this is connected to.\nReturns the underlying <code>Engine</code> this store is connected to.\nReturns the underlying <code>Engine</code> this store is connected to.\nReturns the <code>Engine</code> that this store is associated with.\nReturns the <code>Engine</code> that this <code>Module</code> was compiled by.\nIndicates the VM is entering host code (exiting …\nConfigures epoch-deadline expiration to invoke a custom …\nConfigures epoch-deadline expiration to trap.\nConfigures epoch-deadline expiration to trap.\nEnables epoch-based interruption.\nIndicates the VM is exiting host code (entering …\nReturns the list of exported items from this <code>Instance</code>.\nReturns the list of exports that this <code>Module</code> has and will …\nCreates a WebAssembly <code>externref</code> value\nAttempt to access the underlying <code>externref</code> value of this …\nCreates a WebAssembly <code>f32</code> value\nAttempt to access the underlying value of this <code>Val</code>, …\nCreates a WebAssembly <code>f64</code> value\nAttempt to access the underlying value of this <code>Val</code>, …\nReturns the source code filename this symbol was defined …\nFill <code>table[dst..(dst + len)]</code> with the given value.\nUnconditionally captures a trace of the WebAssembly frames …\nA configuration option to force the usage of <code>memfd_create</code> …\nReturns a list of function frames in WebAssembly this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new WebAssembly <code>Module</code> from the given in-memory …\nCreates a new WebAssembly <code>Module</code> from the contents of the …\nConverts the raw representation of a <code>funcref</code> into an …\nCreates a new strongly-owned <code>ExternRef</code> from the raw value …\nConvenience method to convert a <code>ValRaw</code> into a <code>Val</code>.\nCreates a new WebAssembly <code>Module</code> from the contents of the …\nReturns the fuel consumed by this store.\nReturns the fuel consumed by this store.\nReturns the fuel consumed by this store.\nReturns the amount of fuel consumed by this store’s …\nReturns the underlying <code>Func</code> that this is wrapping, losing …\nAttempt to return the underlying type of this external …\nReturns the WebAssembly function index for this frame.\nReturns a descriptive name of the function for this frame, …\nCreates a <code>Func::new</code>-style function named in this linker.\nCreates a <code>Func::new_unchecked</code>-style function named in this …\nReturns the offset from the original wasm module’s …\nDefine a host function within this linker.\nCreates a WebAssembly <code>funcref</code> value\nAttempt to access the underlying value of this <code>Val</code>, …\nGet the locations of functions in this module’s <code>.text</code> …\nPerform garbage collection of <code>ExternRef</code>s.\nPerform garbage collection of <code>ExternRef</code>s.\nPerform garbage collection of <code>ExternRef</code>s.\nConfigures whether compiled artifacts will contain …\nTry to retrieve an arbitrary cache key entry, and returns …\nLooks up a previously defined value in this <code>Linker</code>, …\nReturns the current <code>Val</code> of this global.\nReturns the table element value at <code>index</code>.\nLooks up a value in this <code>Linker</code> which matches the <code>import</code> …\nReturns the “default export” of a module.\nLooks up an export from the caller’s module by the <code>name</code> …\nLooks up an exported <code>Extern</code> value by name.\nLooks up an export in this <code>Module</code> by name.\nGets the WebAssembly <code>externref</code> value\nGets the WebAssembly <code>f32</code> value\nGets the WebAssembly <code>f64</code> value\nLooks up an exported <code>Func</code> value by name.\nGets the WebAssembly <code>funcref</code> value\nLooks up an exported <code>Global</code> value by name.\nGets the WebAssembly <code>i32</code> value\nGets the WebAssembly <code>i64</code> value\nLooks up an exported <code>Memory</code> value by name.\nLooks up an exported <code>SharedMemory</code> value by name.\nLooks up an exported <code>Table</code> value by name.\nLooks up an exported <code>Func</code> value by name and with its type.\nGets the WebAssembly <code>i32</code> value\nGets the WebAssembly <code>i64</code> value\nGets the WebAssembly <code>v128</code> value\nAttempt to return the underlying type of this external …\nGrows the size of this table by <code>delta</code> more elements, …\nGrows this WebAssembly memory by <code>delta</code> pages.\nGrows this WebAssembly memory by <code>delta</code> pages.\nGrows this memory to have the <code>new_size</code>, in bytes, …\nIndicates whether a guard region is present before …\nCreates a WebAssembly <code>i32</code> value\nAttempt to access the underlying value of this <code>Val</code>, …\nCreates a WebAssembly <code>i64</code> value\nAttempt to access the underlying value of this <code>Val</code>, …\nReturns the range of bytes in memory where this module’s …\nReturns the list of imports that this <code>Module</code> has and must …\nIncrements the epoch.\nForce initialization of copy-on-write images to happen …\nGiven an arbitrary key and bytes, stores them in the cache.\nConvenience wrapper to define an entire <code>Instance</code> in this …\nThe maximum number of concurrent instances supported …\nThe maximum number of defined linear memories for a module …\nThe maximum number of pages for any linear memory defined …\nThe maximum size, in bytes, allocated for an instance and …\nThe maximum table elements for any table defined in a …\nThe maximum number of defined tables for a module (default …\nThe maximum number of instances that can be created for a …\nThe maximum number of instances that can be created for a …\nThe maximum number of instances that can be created for a …\nInstantiates this instance, creating a new instance within …\nAttempts to instantiate the <code>module</code> provided.\nPerforms all checks necessary for instantiating <code>module</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>Store</code>, destroying it, and returns the …\nConsume this <code>Export</code> and return the contained <code>Extern</code>.\nReturns the underlying <code>Func</code>, if this external is a …\nConsume this <code>Export</code> and return the contained <code>Func</code>, if it’…\nReturns the underlying <code>Global</code>, if this external is a …\nConsume this <code>Export</code> and return the contained <code>Global</code>, if it…\nReturns the underlying <code>Memory</code>, if this external is a …\nConsume this <code>Export</code> and return the contained <code>Memory</code>, if it…\nReturns the underlying <code>SharedMemory</code>, if this external is a …\nReturns the underlying <code>Table</code>, if this external is a table.\nConsume this <code>Export</code> and return the contained <code>Table</code>, if it…\nReturns true if <code>E</code> is the type held by this error object.\nReturns whether this is a 64-bit memory or not.\nReturns true if <code>ValType</code> matches any of the numeric types. …\nReturns true if <code>ValType</code> matches either of the reference …\nReturns whether this is a shared memory or not.\nReturns an iterator over all items defined in this <code>Linker</code>, …\nConfigures the <code>ResourceLimiter</code> used to limit resource …\nReturns the 1-indexed source code line number this symbol …\nHow much memory, in bytes, to keep resident for each …\nConfigures the maximum number of “unused warm slots” …\nConfigures the maximum amount of stack space available for …\nReturns the optionally-specified maximum number of …\nReturns the optionally-specified maximum number of pages …\nReturns the maximum number of bytes the memory can grow to.\nThe maximum number of linear memories that can be created …\nThe maximum number of linear memories that can be created …\nThe maximum number of linear memories that can be created …\nAttempt to return the underlying type of this external …\nNotifies the resource limiter that growing a linear …\nNotifies the resource limiter that growing a linear …\nNotifies the resource limiter that an instance’s linear …\nConfigures the “guaranteed dense image size” for …\nConfigures whether copy-on-write memory-mapped data is …\nThe maximum number of bytes a linear memory can grow to.\nReturns minimum number of elements this table must have\nReturns minimum number of WebAssembly pages this memory …\nReturns a reference to the module that this <code>InstancePre</code> …\nDefine automatic instantiations of a <code>Module</code> in this linker.\nReturns the module name that the unknown import was …\nReturns the module name that this import is expected to …\nReturns the identifer of the module that this frame is for.\nReturns the offset within the original wasm module this …\nConfigure the version information used in serialized and …\nCreate a new error object from a printable error message.\nReturns whether or not this global is mutable.\nReturns the name by which this export is known.\nReturns the field name of the module that the unknown …\nReturns identifier/name that this <code>Module</code> has. This name is …\nReturns the function name associated with this symbol.\nReturns the field name of the module that this import is …\nReturns the name by which this export is known.\nConfigures whether to generate native unwind information …\nCreate a new error object from any error type.\nCreates a new <code>StoreLimitsBuilder</code>.\nCreates a new <code>Linker</code>.\nCreates a new <code>Store</code> to be associated with the given <code>Engine</code> …\nCreates a new <code>Func</code> with the given arguments, typically to …\nCreates a new configuration object with the default …\nCreates a new <code>Engine</code> with the specified compilation and …\nCreates a new WebAssembly <code>global</code> value with the provide …\nCreates a new <code>Table</code> with the given parameters.\nCreates a new <code>Instance</code> from the previously compiled <code>Module</code> …\nCreates a new WebAssembly memory given the configuration …\nConstruct a <code>SharedMemory</code> by providing both the <code>minimum</code> and …\nCreates a new WebAssembly <code>Module</code> from the given in-memory …\nCreates a new instance of <code>ExternRef</code> wrapping the given …\nCreates a new function descriptor from the given …\nCreates a new global descriptor of the specified <code>content</code> …\nCreates a new table descriptor which will contain the …\nCreates a new descriptor for a 32-bit WebAssembly memory …\nCreates a new descriptor for a 64-bit WebAssembly memory …\nCreate a new <code>LinearMemory</code> object from the specified …\nAn unchecked version of <code>Func::typed</code> which does not perform …\nCreates a new <code>Func</code> with the given arguments, although has …\nReturns a null <code>externref</code> value.\nConfigures this <code>Store</code> to yield while executing futures …\nConfigures this <code>Store</code> to yield while executing futures …\nConfigures a <code>Store</code> to yield execution of async WebAssembly …\nConfigures this <code>Store</code> to trap whenever fuel runs out.\nConfigures this <code>Store</code> to trap whenever fuel runs out.\nConfigures a <code>Store</code> to generate a <code>Trap</code> whenever it runs out …\nConfigure wether wasmtime should compile a module using …\nReturns the list of parameter types for this function.\nThe default pooling instance allocation strategy.\nAhead-of-time (AOT) compiles a WebAssembly module.\nCreates a default profiler based on the profiling strategy …\nDoes this <code>ExternRef</code> point to the same inner value as <code>other</code>?\nSafely reads memory contents at the given offset into a …\nThis option can be used to control the behavior of the …\nReturns the list of result types for this function.\nThe lowest level cause of this error — this error’s …\nReturns whether the engine <code>a</code> and <code>b</code> refer to the same …\nSerializes this module to a vector of bytes.\nAttempts to set the current value of this global to <code>Val</code>.\nWrites the <code>val</code> provided into <code>index</code> within this table.\nSets the epoch deadline to a certain number of ticks in …\nSets the epoch deadline to a certain number of ticks in …\nCreates a new descriptor for shared WebAssembly memory …\nReturns the current size of this table.\nReturns the size, in WebAssembly pages, of this wasm …\nReturns the size, in WebAssembly pages, of this wasm …\nIndicates that the “static” style of memory should …\nConfigures the size, in bytes, of the guard region used at …\nConfigures the maximum size, in bytes, where a linear …\nConfigures which compilation strategy will be used for …\nGet the strong reference count for this <code>ExternRef</code>.\nReturns the debug symbols found, if any, for this function …\nAttempt to return the underlying type of this external …\nThe maximum number of elements in a table.\nNotifies the resource limiter that growing a linear …\nNotifies the resource limiter that growing a linear …\nNotifies the resource limiter that an instance’s table …\nHow much memory, in bytes, to keep resident for each table …\nThe maximum number of tables that can be created for a …\nThe maximum number of tables that can be created for a …\nThe maximum number of tables that can be created for a …\nSets the target triple for the <code>Config</code>.\nGet this module’s code object’s <code>.text</code> section, …\nEagerly initialize thread-local functionality shared by …\nExtracts the raw value of this <code>Func</code>, which is owned by …\nConverts this <code>ExternRef</code> to a raw value suitable to store …\nConvenience method to convert this <code>Val</code> into a <code>ValRaw</code>.\nReturns the underlying wasm type that this <code>Func</code> has.\nReturns the type associated with this <code>Extern</code>.\nReturns the underlying type of this <code>global</code>.\nReturns the underlying type of this table, including its …\nReturn the <code>ExternType</code> of this export.\nReturns the type of the unknown import.\nReturns the underlying type of this memory.\nReturn the type of the shared memory.\nReturns the expected type of this import.\nReturns the type of this export.\nReturns the corresponding <code>ValType</code> for this <code>Val</code>.\nAttempts to extract a typed object from this <code>Func</code> through …\nCreates a WebAssembly <code>i32</code> value\nCreates a WebAssembly <code>i64</code> value\nUnix-specific extension for the <code>wasmtime</code> crate.\nReturns the underlying <code>externref</code> value of this <code>Val</code>, …\nReturns the underlying value of this <code>Val</code>, panicking if it…\nReturns the underlying value of this <code>Val</code>, panicking if it…\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying value of this <code>Val</code>, panicking if it…\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying value of this <code>Val</code>, panicking if it…\nReturns the underlying value of this <code>Val</code>, panicking if it…\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying descriptor of this <code>ExternType</code>, …\nReturns the underlying value of this <code>Val</code>, panicking if it…\nCreates a WebAssembly <code>v128</code> value\nAttempt to access the underlying value of this <code>Val</code>, …\nValidates <code>binary</code> input data as a WebAssembly binary given …\nReturns the range of native addresses that WebAssembly can …\nConfigures whether <code>WasmBacktrace</code> will be present in the …\nConfigures whether backtraces in <code>Trap</code> will parse debug …\nConfigures whether the WebAssembly bulk memory operations …\nConfigures whether the WebAssembly memory64 proposal will …\nConfigures whether the WebAssembly multi-memory proposal …\nConfigures whether the WebAssembly multi-value proposal …\nConfigures whether the WebAssembly reference types proposal\nConfigures whether the WebAssembly Relaxed SIMD proposal …\nConfigures whether the WebAssembly SIMD proposal will be …\nConfigures whether the WebAssembly threads proposal will …\nSets a custom memory creator.\nCreates a new <code>Func</code> from the given Rust closure.\nSafely writes contents of a buffer to this memory at the …\nExtensions for the <code>Store</code> type only available on Unix.\nThe signal handler must be async-signal-safe.")