searchState.loadedDescShard("jsonrpsee_server", 0, "jsonrpsee-server\nMethod was already registered.\nError when the server has already been stopped.\nFuture of a value\nAsynchronous method handler.\nSimilar to <code>SyncMethod</code>, but represents an asynchronous …\nConfiguration for batch request handling.\nSerialized batch response.\nBuilder to build a <code>BatchResponse</code>.\nThis wraps <code>tokio::sync::Semaphore</code> and is used to limit the …\nBounded writer that allows writing at most <code>max_len</code> bytes.\nTreat it as ordinary call.\nThis represent a response to a RPC call and <code>Subscribe</code> …\nThe connection channel is closed.\nThe connection channel is closed.\nThe connection was closed.\nComplete JSON message.\nLimits the number of connections.\nConnection ID.\nConnection permit.\nConnection related state that is needed to execute …\nBatch requests are disabled.\nError that may occur during <code>crate::server::MethodSink::send</code>…\nThe response was the wrong kind such an error response when\nA type map of protocol extensions.\nThe connection channel is full.\nDefault HTTP body used by jsonrpsee.\nHTTP request type.\nHTTP response type.\nTrait to generate subscription IDs.\nSomething that can be converted into a JSON-RPC method …\nConvert something into a subscription close notification …\nInvalid subscription ID.\nRepresents a subscription until it is unsubscribed.\nSpecific JSON-RPC error.\nThe response was a JSON-RPC error.\nEach batch request is limited to <code>len</code> and any batch request …\nMax response size.\nMethod call.\nCallback wrapper that can be either sync or async.\nThe kind of the JSON-RPC method call, it can be a …\nMethod with that name has not yet been registered.\nRepresents a response to a method call.\nMethod response error.\nFuture that resolves when the method response has been …\nSends a message once the method response has been …\nResult of a method, either direct value or a future of one.\nSink that is used to send back the result to the server …\nReference-counted, clone-on-write collection of …\nThe error that can occur when <code>Methods::call</code> or …\nNeed subscription ID and method name.\nNo further message will be sent.\nNo-op implementation to be used for servers that don’t …\nThe method was not found.\nSend a subscription notification.\nSend a subscription error notification\nA message that that tells whether notification was …\nThe response was succesfully processed.\nOutput.\nFailed to parse the call as valid JSON-RPC.\nThe error returned while accepting a subscription.\nRepresents a single subscription that is waiting to be …\nConfiguration for WebSocket ping/pong mechanism and it may …\nGenerates random integers as subscription ID.\nGenerates random strings of length <code>len</code> as subscription ID.\nRaw response from an RPC A tuple containing:\nThe error returned when registering a method or …\nSimilar to <code>jsonrpsee_types::ResponsePayload</code> but possible …\nSets of JSON-RPC methods can be organized into “module“…\nError that may occur during …\nJSON RPC server.\nBuilder to configure and create a JSON-RPC server\nStatic server configuration which is shared per connection.\nServer handle.\nRepresent a stop handle which is a wrapper over a …\nType-alias for subscribers.\nWrapper struct that maintains a subscription “mainly” …\nSubscription method handler.\nSubscription Call.\nThe subscription callback itself sends back the result so …\nRepresents what action that will sent when a subscription …\nRepresent a unique subscription entry based on …\nSubscription message.\nA complete subscription message or partial subscription …\nMethod callback for subscriptions.\nSubscribe and unsubscribe method names are the same.\nSubscription permit.\nRepresents a single subscription that hasn’t been …\nHelper struct to manage subscriptions.\nResult by value\nSynchronous method handler.\nA <code>MethodCallback</code> is an RPC endpoint, callable with a …\nThe data could not be sent because the timeout elapsed …\njsonrpsee tower service\nBuilder for <code>TowerService</code>.\nError that may occur during …\nThe batch request is unlimited.\nUnsubscription method handler.\nUnsubscription Call.\nAttempt to accept the subscription and respond the …\nAttempts to acquire a subscription slot.\nAppend a result from an individual method to the batch …\nGet the error code\nExtract the JSON-RPC response.\nGet a reference to the serialized response.\nGet the number of available connection slots.\nCreate a JSON-RPC error response.\nBuild a tower service.\nFinalize the configuration of the server. Consumes the …\nFinalizes the configuration of the server with customized …\nCreate a builder for the server.\nCreate a new builder for the <code>ServerConfig</code>.\nHelper to call a method on the <code>RPC module</code> without having …\nGet the capacity of the channel.\nGet the capacity of the channel.\nGet the capacity of the subscription.\nClear the <code>Extensions</code> of all inserted extensions.\nClose the subscription channel.\nSame as <code>tokio::sync::mpsc::Sender::closed</code>.\nCompletes when the subscription has been closed.\nConnection ID\nConfigure the connection id.\nReturns connection identifier, which was used to perform …\nGet the connection ID.\nConfigure a custom <code>tokio::runtime::Handle</code> to run the …\nDisable WebSocket ping/pong on the server.\nCreate an empty body.\nEnable WebSocket ping/pong on the server.\nCreate a <code>MethodResponse</code> from a JSON-RPC error.\nCreate an error response payload.\nCreate a borrowd error response payload.\nExtends <code>self</code> with another <code>Extensions</code>.\nReturns a reference to the associated extensions.\nSimilar to <code>Methods::extensions_mut</code> but it’s immutable.\nReturns a reference to the associated extensions.\nGet a mutable reference to the extensions to add or remove …\nFinish the batch response\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new module from an already shared <code>Context</code>.\nCreate a method response from <code>BatchResponse</code>.\nCreate a new subscription message from JSON.\nGet a reference to a type previously inserted on this …\nGet a mutable reference to a type previously inserted on …\nGet a mutable reference to a type, inserting <code>value</code> if not …\nGet a mutable reference to a type, inserting the type’s …\nGet a mutable reference to a type, inserting the value …\nWaits for there to be space on the return channel.\nHelpers.\nHTTP related server functionality.\nConfigure the server to only serve JSON-RPC HTTP requests.\nID provider.\nConfigure how long to wait for the WebSocket pong. When …\nInsert a type into this <code>Extensions</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the writer and extract the written bytes.\nConvert the response payload into owned.\nConsume the method response and extract the parts.\nConvert something into a subscription response\nSomething that can be converted into a JSON-RPC method …\nExtract the JSON-RPC response.\nConsume the method response and extract the serialized …\nReturns whether the response is a batch response.\nReturns whether this channel is closed without needing a …\nReturns whether the subscription is closed.\nCheck if the batch is empty.\nCheck whether the extension set is empty or not.\nReturns whether the call failed.\nReturns whether the response is a method response.\nCheck if the server has been stopped.\nReturns whether the response is a subscription response.\nReturns whether the call was successful.\nReturns true if the unsubscribe method has been invoked or …\nGet the numer of extensions available.\nReturns socket address to which the server is bound.\nGet the maximum number of permitted subscriptions.\nGet the max capacity of the channel.\nGet the max capacity of the channel.\nGet the max capacity of the subscription.\nGet the maximum number of connections.\nConfigure the max allowed connections on the server.\nSet the maximum number of connections allowed. Default is …\nConfigure how many times the remote peer is allowed be …\nSet the maximum size of a request body in bytes. Default …\nSet the maximum size of a response body in bytes. Default …\nGet the max response size.\nSet the maximum number of connections allowed. Default is …\nMerge two <code>Methods</code>’s by adding all <code>MethodCallback</code>s from …\nReturns the method callback.\nGet the method name.\nGet the method name.\nReturns an <code>Iterator</code> with all the method names registered …\nReturns the method callback along with its name. The …\njsonrpsee-server middleware\nCreate a new body.\nCreate a new connection guard.\nCreate a new random string provider.\nCreate a new bounded writer.\nCreate a new connection state.\nCreate a new <code>MethodSink</code> with unlimited response size.\nCreate a new PingConfig.\nCreate a default server builder.\nCreate a subscription message this is more efficient than …\nCreate a new bounded subscription.\nCreate a new module with a given shared <code>Context</code>.\nCreates a new empty <code>Methods</code>.\nCreate an empty <code>Extensions</code>.\nCreate a new <code>MethodSink</code> with a limited response size.\nCreate a new batch response builder with limit.\nReceives the next value on the subscription if the value …\nReturns the next ID for the subscription.\nSend a notify message.\nConsumes the <code>ResponsePayload</code> and produces new …\nA future that returns when the connection has been closed.\nConfigure the interval when the WebSocket pings are sent …\nFigure out if this is a sufficiently complete request that …\nMake a request (JSON-RPC method call or subscription) by …\nRegister an alias for an existing_method. Alias uniqueness …\nRegister a new asynchronous RPC method, which computes the …\nRegister a new <strong>blocking</strong> synchronous RPC method, which …\nRegister a new synchronous RPC method, which computes the …\nRegister a new publish/subscribe interface using JSON-RPC …\nSimilar to <code>RpcModule::register_subscription</code> but a little …\nReject the subscription by responding to the subscription …\nRemove a type from this <code>Extensions</code>.\nTransform a module into an <code>RpcModule&lt;()&gt;</code> (unit context).\nRemoves the method if it exists.\nCreate a new method response.\nAsync send which will wait until there is space in channel …\nSend out a response on the subscription and wait until …\nSend a JSON-RPC error to the client\nSimilar to <code>MethodSink::send</code> but only waits for a limited …\nSimilar to <code>SubscriptionSink::send</code> but only waits for a …\nServe a service over a TCP connection without graceful …\nServe a service over a TCP connection with graceful …\nConfigure how batch requests shall be handled by the …\nConfigure http middleware.\nConfigure a custom <code>tower::ServiceBuilder</code> middleware for …\nConfigure custom <code>subscription ID</code> provider for the server …\nThe server enforces backpressure which means that <code>n</code> …\nConfigure rpc middleware.\nEnable middleware that is invoked on every JSON-RPC call.\nConfigure <code>TCP_NODELAY</code> on the socket to the supplied value …\nA future that resolves when server has been stopped it …\nStart responding to connections requests.\nTell the server to stop without waiting for the server to …\nCreate channel to determine whether the server shall …\nWait for the server to stop.\nSimilar to <code>Methods::subscribe_unbounded</code> but it’s using a …\nHelper to create a subscription on the <code>RPC module</code> without …\nThis is similar to <code>MethodResponse::error</code> but sets a flag …\nGet the subscription ID.\nGet the subscription ID\nSubscription limit\nThis is similar to <code>MethodResponse::response</code> but sets a …\nCreate a successful owned response payload.\nCreate a successful borrowed response payload.\nExtract the serialized response as a String.\nConvert the server builder to a <code>TowerServiceBuilder</code>.\nAcquire a connection permit.\nAttempts to send out the message immediately and fails if …\nAttempts to immediately send out the message as JSON …\nWrapper over <code>tokio::sync::mpsc::Sender::closed</code>\nInserts the method callback for a given name, or returns …\nVerifies that the method name is not already taken, and …\nConsumes the method response and returns a new one with …\nWebSocket related server functionality.\nConfigure the server to only serve JSON-RPC WebSocket …\nBounded writer that allows writing at most <code>max_len</code> bytes.\nSink that is used to send back the result to the server …\nFigure out if this is a sufficiently complete request that …\nMake JSON-RPC HTTP call with a service <code>RpcServiceT</code>\nMake JSON-RPC HTTP call with a <code>RpcServiceBuilder</code>\nChecks that content type of received request is valid for …\nReturns true if the <code>content_type</code> header indicates a valid …\nHTTP response helpers.\nCreate a response for when the server denied the request.\nCreate a text/plain response for not allowed hosts.\nCreate a response for json internal error.\nCreate a json response for empty or malformed requests …\nCreate a text/plain response for disallowed method used.\nCreate a valid JSON response.\nCreate a json response for oversized requests (413)\nCreate a response for when the server is busy and can’t …\nCreate a response for unsupported content type.\nHTTP related middleware. Various middleware …\nJSON-RPC specific middleware. Various middleware …\nPort specified as a wildcard pattern (*).\nRepresent the http URI scheme that is returned by the HTTP …\nError that can happen when parsing an URI authority fails.\nNo port specified (default port)\nFixed numeric port\nMiddleware to enable host filtering.\nMiddleware to enable host filtering.\nError that occur if the specified path doesn’t start …\nInvalid port.\nInvalid URI.\nThe host was not found.\nPort pattern\nProxy <code>GET /path</code> requests to the specified RPC method calls.\nLayer that applies <code>ProxyGetRequest</code> which proxies the …\nRepresent the URL patterns that is whitelisted.\nConvenience method to disable host filtering but less …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to parse the authority from a HTTP request.\nThe host.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnables host filtering and allow only the specified hosts.\nCreates a new <code>ProxyGetRequestLayer</code>.\nCreates a new <code>ProxyGetRequest</code>.\nThe port.\nThe future response value.\nSimilar to <code>tower::ServiceBuilder</code> but doesn’t support any …\nSimilar to the <code>tower::Service</code> but specific for jsonrpsee …\nProcess a single JSON-RPC call it may be a subscription or …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpecific middleware layer implementation provided by …\nAdd a new layer <code>T</code> to the <code>RpcServiceBuilder</code>.\nAdd a <code>tower::Layer</code> built from a function that accepts a …\nCreate a new <code>RpcServiceBuilder</code>.\nOptionally add a new layer <code>T</code> to the <code>RpcServiceBuilder</code>.\nAdd a logging layer to <code>RpcServiceBuilder</code>\nResponse which may be ready or a future.\n<code>tower::util::Either</code> but adjusted to satisfy the trait …\nReturns the argument unchanged.\nReturns a future that resolves to a response.\nCalls <code>U::from(self)</code>.\nRPC Logger layer.\nReturn a response which is already computed.\nJSON-RPC service middleware.\n<code>tower::util::Either</code> but adjusted to satisfy the trait …\nOne type of backing <code>RpcServiceT</code>.\nThe other type of backing <code>RpcServiceT</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResponse future to log the response for a method call.\nA middleware that logs each RPC call and response.\nRPC logger layer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new logging layer.\nJSON-RPC service middleware.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLow-level API that tries to upgrade the HTTP connection to …\nCheck if an <code>http::Request</code> looks like a valid websocket …")