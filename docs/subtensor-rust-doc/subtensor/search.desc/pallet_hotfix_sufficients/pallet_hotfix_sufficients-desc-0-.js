searchState.loadedDescShard("pallet_hotfix_sufficients", 0, "Trait to be implemented for evm address mapping.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nAutogenerated weights for pallet_hotfix_sufficients\nMapping from address to account id.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nMaximum address count exceeded\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nWeight information for extrinsics in this pallet.\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nIncrement <code>sufficients</code> for existing accounts having a …\nIncrement <code>sufficients</code> for existing accounts having a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant …\nAuto-generated docs-only module listing all (public and …\nIncrement <code>sufficients</code> for existing accounts having a …\nWeights for pallet_hotfix_sufficients using the Substrate …\nWeight functions needed for pallet_hotfix_sufficients.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStorage: System Account (r:1000 w:1000) Proof: System …\nCalls <code>U::from(self)</code>.")