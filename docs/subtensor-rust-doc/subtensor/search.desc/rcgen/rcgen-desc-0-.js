searchState.loadedDescShard("rcgen", 0, "Rust X.509 certificate generation utility\nanyExtendedKeyUsage\nThe path length constraint (only relevant for CA …\nA string encoded using UCS-2\nThe certificate may be used to sign other certificates\nA self signed certificate together with signing keys\nThe provided certificate’s signature algorithm is …\nParameters used for certificate generation\nData for a certificate signing request\nCIDR subnet, as per RFC 4632\nid-kp-clientAuth\nid-kp-codeSigning\nX520CommonName\nConstrain to the contained number of intermediate …\ncontentCommitment / nonRepudiation\nThe given certificate couldn’t be parsed\nThe given certificate signing request couldn’t be parsed\nThe given key pair couldn’t be parsed\nX520countryName\ncRLSign\nCustom distinguished name type\nA custom extension of a certificate, as specified in RFC …\ndataEncipherment\ndecipherOnly\ndigitalSignature\nDistinguished name used e.g. for the issuer and subject …\nIterator over <code>DistinguishedName</code> entries\nThe attribute type of a distinguished name entry\nA distinguished name entry\nid-kp-emailProtection\nencipherOnly\nThe certificate can only sign itself, adding the extension …\nOne of the purposes contained in the extended key usage …\nGeneral Subtree type.\nWhether the certificate is allowed to sign other …\nkeyAgreement\nkeyCertSign\nkeyEncipherment\nThere is no support for generating keys for the given …\nMethod to generate key identifiers from public keys.\nA key pair used to sign certificates and CSRs\nOne of the purposes contained in the key usage extension\nX520LocalityName\nThe NameConstraints extension (only relevant for CA …\nThe certificate can only sign itself\nid-kp-OCSPSigning\nX520OrganizationName\nX520OrganizationalUnitName\nECDSA signing using the P-256 curves and SHA-256 hashing …\nECDSA signing using the P-384 curves and SHA-384 hashing …\nED25519 curve signing as per RFC 8410\nRSA signing with PKCS#1 1.5 padding and SHA-256 hashing as …\nRSA signing with PKCS#1 1.5 padding and SHA-256 hashing as …\nRSA signing with PKCS#1 1.5 padding and SHA-512 hashing as …\nError from the pem crate\nAn ASCII string containing only A-Z, a-z, 0-9, ’…\nA public key, extracted from a CSR\nThe error type of the rcgen crate\nError generated by a remote key operation\nA private key that is not directly accessible, but can be …\nAlso known as E-Mail address\nAlso known as E-Mail address\nThe <code>ring</code> library rejected the key upon loading\nUnspecified <code>ring</code> error\nThe type of subject alt name\nid-kp-serverAuth\nRFC 7093 method 1\nRFC 7093 method 2\nRFC 7093 method 3\nSignature algorithm type\nX520StateOrProvinceName\nA string of characters from the T.61 character set\nTime conversion related errors\nid-kp-timeStamping\nNo constraint\nA string encoded using UTF-32\nThe requested signature algorithm is not supported\nA string encoded using UTF-8\nReveals which algorithm will be used when you call <code>sign()</code>\nReturns (possibly multiple) compatible <code>SignatureAlgorithm</code>…\nObtains the content of the extension.\nObtains the criticality flag of the extension.\nHelper to obtain an <code>OffsetDateTime</code> from year, month, day …\nA list of excluded subtrees.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nObtains the CidrSubnet from an ip address as well as the …\nParses the key pair from the DER format\nObtains the key pair from a DER formatted key using the …\nRetrieve the SignatureAlgorithm for the provided OID\nGenerate a DnType for the provided OID\nCreate a new custom extension with the specified content\nGenerates a new certificate from the given parameters\nParses the key pair from the ASCII PEM format\nObtains the key pair from a DER formatted key using the …\nObtains the key pair from a raw public key and a remote …\nObtains the CidrSubnet from the well-known addr/prefix …\nObtains the CidrSubnet from an IPv4 address in network …\nObtains the CidrSubnet from an IPv6 address in network …\nGenerate a new random key pair for the specified signature …\nKISS function to generate a self signed certificate\nObtains the attribute value for the given attribute type\nCalculates a subject key identifier for the certificate …\nReturn the certificate’s key pair\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this key pair can be used with the given …\nIterate over the entries\nMethod to generate key identifiers from public keys\nThe certificate’s key pair, a new random key pair will …\nGenerate certificate parameters with reasonable defaults\nCreates a new, empty distinguished name\nCreates a new acmeIdentifier extension for ACME TLS-ALPN-01\nObtains the OID components of the extensions, as u64 pieces\nIf non-empty, a whitelist of subtrees that the domain has …\nReturns the public key of this key pair in the binary …\nReturn the key pair’s public key in DER format\nReturn the key pair’s public key in PEM format\nGet the raw public key of this key pair\nInserts or updates an attribute that consists of type and …\nRemoves the attribute with the specified DnType\nSerializes the certificate to the binary DER format\nSerializes the key pair (including the private key) in …\nSerializes the certificate, signed with another certificate…\nSerializes the requested certificate, signed with another …\nSerializes the certificate to the ASCII PEM format\nSerializes the key pair (including the private key) in …\nSerializes the certificate, signed with another certificate…\nSerializes the requested certificate, signed with another …\nSerializes the private key in PKCS#8 format\nSerializes the private key in PEM format\nSerializes a certificate signing request in binary DER …\nSerializes the certificate signing request to the ASCII …\nReturns a reference to the serialized key pair (including …\nSets the criticality flag of the extension.\nSigns <code>msg</code> using the selected algorithm\nIf <code>true</code> (and not self-signed), the ‘Authority Key …")