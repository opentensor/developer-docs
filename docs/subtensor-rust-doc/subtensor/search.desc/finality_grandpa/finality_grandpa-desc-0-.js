searchState.loadedDescShard("finality_grandpa", 0, "Finality gadget for blockchains.\nArithmetic necessary for a block number.\nA catch-up message, which is an aggregate of prevotes and …\nChain context necessary for implementation of the finality …\nA commit message which is an aggregate of precommits.\nStruct returned from <code>validate_commit</code> function with …\nA commit message with compact representation of …\nAn equivocation (double-vote) in a given round.\nTop-level error type used by this crate.\nHistorical votes seen in a round.\nA protocol message or vote.\nAuthentication data for a set of many messages, currently …\nThe block is not a descendent of the given base block.\nA precommit for a block and its ancestors.\nA precommit message.\nA prevote for a block and its ancestors.\nA prevote message.\nA primary proposed block, this is a broadcast of the last …\nA primary proposal message.\nA signed message.\nA signed precommit message.\nA signed prevote message.\nGet the ancestry of a block up to but not including the …\nAuthentication data for the commit.\nThe base hash. See struct docs.\nThe base number. See struct docs.\nThe first vote in the equivocation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe Id of the signer\nThe Id of the signer.\nThe Id of the signer.\nThe identity of the equivocator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>block</code> is a descendent of or equal to the …\nReturns <code>true</code> if the commit is valid, which implies that …\nThe internal message which has been signed.\nCreate a new prevote for the given block (hash and number).\nCreate a new precommit for the given block (hash and …\nCreate a new primary proposal for the given block (hash …\nCreate a new HistoricalVotes.\nCreate a new HistoricalVotes initialized from the …\nReturns the number of duplicate precommits in the commit.\nReturns the number of equivocated precommits in the commit.\nReturns the number of invalid voters in the commit, i.e. …\nReturns the number of precommits in the commit.\nThe precommit message which has been signed.\nReturn the number of messages seen before precommiting. …\nPrecommits for target block or any block after it that …\nPrecommits for target block or any block after it that …\nPrecommits for target block or any block after it that …\nThe prevote message which has been signed.\nReturn the number of messages seen before prevoting. None …\nPrevotes for target block or any block after it that …\nRuns the callback with the appropriate …\nPush a vote into the list. The value of <code>self</code> before this …\nLogic for a single round of GRANDPA.\nThe round number equivocated in.\nRound number.\nThe second vote in the equivocation.\nReturn the messages seen so far.\nSet the number of messages seen before precommiting.\nSet the number of messages seen before prevoting.\nThe signature on the message.\nThe signature on the message.\nThe signature on the message.\nGet the target block of the vote.\nGet the target block of the vote.\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s hash.\nThe target block’s number.\nThe target block’s number\nThe target block’s number\nThe target block’s number.\nThe target block’s number.\nValidates a GRANDPA commit message.\nMaintains the vote-graph of the blockchain.\nA voter in GRANDPA. This transitions between rounds and …\nImplementation of a <code>VoterSet</code>, representing the complete set\nThe (voting) phases of a round, each corresponding to the …\nThe precommit phase in which <code>Precommit</code>s are cast.\nThe prevote phase in which <code>Prevote</code>s are cast.\nStores data for a round.\nParameters for starting a round.\nState of the round.\nReturn the round base.\nThe base block to build on.\nReturns <code>true</code> when the round is completable.\nWhether the round is completable.\nFetch the “round-estimate”: the best block which might …\nThe new round-estimate.\nFetch the most recently finalized block.\nThe finalized block.\nReturns an iterator of all precommits targeting the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenesis state.\nReturn all votes for the round (prevotes and precommits), …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new round accumulator for given round number and …\nReturn the round number.\nCompute and cache the precommit-GHOST.\nGet the current weight and number of voters who have …\nReturn all imported precommits.\nGet the number of prevotes and precommits received at the …\nThe prevote-GHOST block.\nGet the current weight and number of voters who have …\nGet the number of prevotes and precommits received at the …\nReturn all imported prevotes.\nReturn the primary voter of the round.\nThe round number for votes.\nSet the number of prevotes and precommits received at the …\nSet the number of prevotes and precommits received at the …\nReturn the current state.\nThreshold weight for supermajority.\nReturn the round voters and weights.\nActors and weights in the round.\nMaintains a DAG of blocks in the chain which have votes …\nAdjust the base of the graph. The new base must be an …\nGet the base block.\nFind the total vote on a given block.\nFind the block with the highest block number in the chain …\nFind the best GHOST descendent of the given block. Pass a …\nReturns the argument unchanged.\nInsert a vote with given value into the graph at given …\nCalls <code>U::from(self)</code>.\nCreate a new <code>VoteGraph</code> with base node as given.\nIt wasn’t beneficial to process this commit. We wasted …\nIt wasn’t beneficial to process this catch up, it is …\nThe result of processing for a bad catch up.\nThe result of processing for a bad commit\nAssociated future type for the environment used when …\nDefault value.\nCallback used to pass information about the outcome of …\nA catch up message.\nThe outcome of processing a catch up.\nA commit message.\nA commit message.\nThe outcome of processing a commit.\nCommunication between nodes that is not round-localized.\nCommunication between nodes that is not round-localized.\nNecessary environment for a voter.\nThe associated Error type.\nIt was beneficial to process this commit.\nIt was beneficial to process this catch up.\nThe result of processing for a good catch up.\nThe result of processing for a good commit.\nThe associated Id for the Environment.\nThe input stream used to communicate with the outside …\nThe output stream used to communicate with the outside …\nData necessary to participate in a round.\nThe associated Signature type for the Environment.\nAssociated timer type for the environment. See also …\nThe catch up wasn’t processed because it is useless, …\nA future that maintains and multiplexes between different …\nTrait for querying the state of the voter. Used by <code>Voter</code> …\nCallback to execute given a processing outcome.\nReturn a future that will resolve to the hash of the best …\nNote that a round is completed. This is called when a …\nNote that a round has concluded. This is called when a …\nCalled when a block should be finalized.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a plain data type, <code>report::VoterState</code>, describing …\nIncoming messages.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new <code>Voter</code> tracker with given round number and base …\nGet the number of duplicated precommits\nGet the number of equivocations in the precommits\nGet the number of invalid voters in the precommits\nGet the number of precommits\nOutgoing messages.\nNote that an equivocation in precommits has occurred.\nTimer before precommits can be cast. This should be Start …\nNote that we have precommitted in the given round.\nNote that an equivocation in prevotes has occurred.\nTimer before prevotes can be cast. This should be Start + …\nNote that we have prevoted in the given round.\nNote that we’ve done a primary proposal in the given …\nContains a number of data transfer objects for reporting …\nReturn a timer that will be used to delay the broadcast of …\nProduce data necessary to start a round of voting. This …\nDo the work associated with the callback, if any.\nLocal voter id (if any.)\nReturns an object allowing to query the voter state.\nBasic data struct for the state of a round.\nBasic data struct for the current state of the voter in a …\nVoting rounds running in the background.\nThe current best voting round.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCurrent weight of the precommits.\nThe identities of nodes that have cast precommits so far.\nCurrent weight of the prevotes.\nThe identities of nodes that have cast prevotes so far.\nThe threshold voter weight.\nTotal weight of all votes.\nInformation about a voter in a <code>VoterSet</code>.\nA (non-empty) set of voters and associated weights.\nWhether the set contains a voter with the given ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the voter info for the voter with the given ID, if any.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an iterator over the voters in the set, as given by …\nGet the size of the set.\nCreate a voter set from a weight distribution produced by …\nGet the nth voter in the set, if any.\nGet the nth voter in the set, modulo the size of the set, …\nGet the position of the voter in the total order associated\nGet the threshold vote weight required for supermajority …\nGet the total weight of all voters.\nGet the weight of the voter.")