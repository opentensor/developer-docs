searchState.loadedDescShard("str0m", 0, "ICE candidates are network addresses used to connect to a …\nType of candidate.\n<code>SdpApi</code> was not done in a correct order.\nA data channel has been closed.\nIncoming data channel data from the remote peer.\nA data channel has opened.\nThe ICE agent is checking pairs of local and remote …\nThe ICE agent has finished gathering candidates, has …\nA usable pairing of local and remote candidates has been …\nEmitted when we got ICE connection and established DTLS.\nConnection failed. This is a less stringent test than …\nDTLS errors\nA new estimate from the bandwidth estimation subsystem.\nEvents produced by <code>Rtc::poll_output()</code>.\nSome event such as media data arriving from the remote …\nThe keyframe request failed because the kind of request is …\nHost (local network interface)\nICE agent errors.\nStates the ICE connection can be in.\nICE connection state changes tells us whether the <code>Rtc</code> …\nCredentials for STUN packages.\nInput as expected by <code>Rtc::handle_input()</code>. Either network …\nOther IO errors.\nIncoming keyframe request for media that we are sending to …\nUpon adding new media to the session. The lines are …\nChanges to the media may be emitted.\nIncoming media data sent by the remote peer.\nAggregated statistics for each media (mid, rid) in the …\nAggregated statistics for each media (mid, rid) in the …\nParser errors from network packet parsing.\nThe ICE agent is gathering addresses.\nIf MediaWriter.request_keyframe fails because we can’t …\nIf MediaWriter.write fails because we can’t find an SSRC …\nDirection does not allow receiving media data.\nDirection does not allow sending of Media data.\nOutput produced by <code>Rtc::poll_output()</code>\nRTP packetization error\nPrflx (Peer reflexive)\nStatistics event for the Rtc instance\nDebug output of incoming and outgoing RTCP/RTP packets.\nNetwork input.\nRelay (TURN)\nSome problem with the remote SDP.\nUsing <code>write_rtp</code> for a stream with RTX without providing a …\nInstance that does WebRTC. Main struct of the entire …\nCustomized config for creating an <code>Rtc</code> instance.\nErrors for the whole Rtc engine.\nRTP errors.\nIncoming RTP data.\nSCTP (data channel engine) errors.\nSDP errors.\nSrflx (STUN)\nWhether an incoming encoded stream is paused.\nWhen the <code>Rtc</code> instance expects an <code>Input::Timeout</code>.\nA timeout without any network input.\nNetwork data that is to be sent.\nThe PT attempted to write to is not known.\nThe Rid attempted to write is not known.\nThe <code>Writer</code> was used twice without doing <code>Rtc::poll_output</code> …\nCheck if this <code>Rtc</code> instance accepts the given input. This …\nAdd a local ICE candidate. Local candidates are socket …\nAdd a remote ICE candidate. Remote candidates are …\nReturns the address for the specified ICE candidate.\nReference to the <code>RawPacket</code> if this is indeed an …\nCreate a <code>Rtc</code> from the configuration.\nCreates a config builder that configures an <code>Rtc</code> instance.\nBandwidth estimation.\nConfigure the Bandwidth Estimate (BWE) subsystem.\nThe initial bitrate as set by <code>Self::enable_bwe()</code>.\nWays to change the <code>Rtc</code> session. SDP or Direct.\nData channel related types.\nObtain handle for writing to a data channel.\nClear all configured codecs.\nClear out the standard extension mappings.\nThe codec configs for sending/receiving data.\nLower level access to precise configuration of codecs …\nMakes direct changes to the Rtc session.\nForce disconnects the instance making <code>Rtc::is_alive()</code> …\nGet the configured DTLS certificate, if set.\nEnables estimation of available bandwidth (BWE).\nEnable H264 video codec.\nEnable opus audio codec.\nEnable the <code>Event::RawPacket</code> event.\nEnable VP8 video codec.\nEnable VP9 video codec.\nVarious error types.\nConfigure the RTP extension mappings.\nGet fingerprint verification mode.\nMedia formats and parameters\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new ICE candidate from a string.\nProvide input to this <code>Rtc</code> instance. Input is either a …\nCreates a host ICE candidate.\nTells whether ice lite is enabled.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTests if this instance is still working.\nChecks if we are connected.\nTells if this state is a connected state.\nTells if this state is a disconnected state.\nReturns the kind of this candidate.\nGet the local ICE credentials, if set.\nMedia (audio/video) related content.\nCurrently configured media.\nNetwork related types to get socket data in/out of <code>Rtc</code>.\nCreates a new instance with default settings.\nCreates a new instance of <code>IceCreds</code> with random values for …\nCreates a new default config.\nFrom a=ice-pwd\nPoll the <code>Rtc</code> instance for output. Output can be three …\nReturns the priority value for the specified ICE candidate.\nReturns a reference to the String containing the transport …\nCreates a relayed ICE candidate.\nReturns the setting for audio reordering size.\nReturns the setting for video reordering size.\nLow level RTP access.\nChecks if RTP mode is set.\nMake changes to the Rtc session via SDP.\nReturns the setting for audio resend size.\nReturns the setting for video resend size.\nCreates a server reflexive ICE candidate.\nSet the DTLS certificate for secure communication.\nSet an extension mapping on session level.\nSet the extension map replacing the existing.\nToggle certificate fingerprint verification.\nToggle ice lite. Ice lite is a mode for WebRTC servers …\nExplicitly sets local ICE credentials.\nSets the number of packets held back for reordering audio …\nSets the number of packets held back for reordering video …\nMake the entire Rtc be in RTP mode.\nSets the buffer size for outgoing audio packets.\nSets the buffer size for outgoing video packets and …\nSet the interval between statistics events.\nStatistics events.\nThe configured statistics interval.\nGenerates a candidate attribute string.\nFrom a=ice-ufrag\nSend outgoing media data (samples) or request keyframes.\nA data rate expressed as bits per second(bps).\nAccess to the Bandwidth Estimate subsystem.\nBandwidth estimation kind.\nREMB (Receiver Estimated Maximum Bitrate)\nTransport wide congestion control.\nA bitrate of zero bit/s.\nThe number of bits per second as f64.\nThe number of bits per second rounded upwards as u64.\nCreate a bitrate of some bit per second(bps).\nClamp the value between a min and a max.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a bitrate of some <strong>Gigabits</strong> per second(gbps).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a bitrate of some <strong>Kilobits</strong> per second(kbps).\nReturn the maximum bitrate between <code>self</code> and <code>other</code>.\nCreate a bitrate of some <strong>Megabits</strong> per second(mbps).\nReturn the minimum bitrate between <code>self</code> and <code>other</code>.\nConfigure the current bitrate.\nConfigure the desired bitrate.\nDirect change strategy.\nCertificate used for DTLS.\nCertificate fingerprint.\nSDP answer. Answers can be serialized via serde.\nChanges to the Rtc via SDP Offer/Answer dance.\nSDP offer. Offers can be serialized via serde.\nPending offer from a previous <code>Rtc::sdp_api()</code> call.\nAccept an answer to a previously created <code>SdpOffer</code>.\nAccept an <code>SdpOffer</code> from the remote peer. If this call …\nAdd a new data channel and get the <code>id</code> that will be used.\nAdd audio or video media and get the <code>mid</code> that will be used.\nAttempt to apply the changes made.\nDigest of the certificate by the algorithm in <code>hash_func</code>.\nGet the str0m <code>ChannelId</code> by an <code>sctp_stream_id</code>.\nClose a data channel.\nCreate a new data channel.\nCreate a new <code>Media</code>.\nDeclare the intention to send data using the given SSRC.\nEnable twcc feedback.\nAllow incoming traffic from remote peer for the given SSRC.\nCreates a fingerprint for this certificate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes the SDP string without any JSON wrapping and makes …\nTakes the SDP string without any JSON wrapping and makes …\nTest if any changes have been made.\nHash function used to produce the <code>bytes</code>.\nPerform an ICE restart.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a reference to the local DTLS fingerprint used by …\nReturns a reference to the local ICE credentials used by …\nCombines the modifications made in <code>SdpApi</code> with those in …\nCreates a new instance of the <code>DirectApi</code> struct with the …\nCreate a new OpenSSL variant of the certificate.\nGenerate a ssrc that is not already used in session\nReturns a reference to the remote DTLS fingerprint used by …\nRemove <code>Media</code>.\nRemove the receive stream for the given SSRC.\nRemove the transmit stream for the given SSRC.\nGet the <code>sctp_stream_id</code> from a str0m <code>ChannelId</code>.\nChange the direction of an already existing media.\nSets the ICE controlling flag for this peer connection.\nSet whether to enable ice-lite.\nSets the local ICE credentials.\nSets the remote DTLS fingerprint.\nSets the remote ICE credentials.\nStart the DTLS subsystem.\nStart the SCTP over DTLS.\nObtain a receive stream.\nObtain a recv stream by looking it up via mid/rid.\nObtain a send stream to write RTP data directly.\nObtain a send stream by looking it up via mid/rid.\nTurns this offer into an SDP string, without any JSON …\nTurns this answer into an SDP string, without any JSON …\nChannel for sending data to the remote peer.\n(Low level) configuration for a data channel.\nData channel data from remote peer.\nIdentifier of a data channel.\nPackets delivered out of order with a max lifetime.\nPackets delivered out of order with a max number of …\nReliability setting of a data channel.\nPackets are delivered in order, with retransmits.\nTells whether the sender sent this data as binary or text.\nThe actual data sent. If <code>binary</code> is false, this can be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIdentifier of the channel this data was sent on.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe label to use for the user to identify the channel.\nWhether channel is negotiated in-band (DCEP) or …\nWhether channel is guaranteed ordered delivery of messages.\nProtocol name.\nThe reliability setting, which can allow to drop messages.\nWrite data to the remote peer and indicate whether it’s …\nThe lifetime of a packet in milliseconds.\nNumber of retransmits before giving up.\nThe initial DCEP cant be read as utf-8.\nThe initial DCEP is not the correct message type.\nThe initial DCEP is not valid.\nErrors that can arise in DTLS.\nErrors from the ICE agent.\nOther IO errors.\nA wrapped IO error.\nOther IO errors.\nErrors from parsing network data.\nSome error from OpenSSL layer (used for DTLS).\nSome error from OpenSSL layer (used for SRTP).\nErrors arising in packet- and depacketization.\nFailed to parse RTP header.\nSome protocol error as wrapped from the sctp_proto crate.\nErrors triggered during SCTP association operation\nErrors that can arise in RTP.\nErrors from the SCTP subsystem.\nErrors from parsing and serializing SDP.\nSome STUN protocol error.\nStream was not ready and we tried to write.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKnown codecs.\nSession config for all codecs.\nCodec specific information\nCodec specification\nCodec specific format parameters.\nCodec extra parameters for H264.\nH264 information describing the depacketized / packetized …\nNo extra information available\nGroup of parameters for a payload type (PT).\nCodec extra parameters for VP8.\nVp8 information describing the depacketized / packetized …\nCodec extra parameters for VP9.\nVp9 information describing the depacketized/packetized …\nManually configure a payload type.\nConvenience for adding a h264 payload type.\nNumber of audio channels (if any).\nClear all configured configs.\nClock rate of the codec.\nThe codec identifier.\nTrue if the frame can be discarded safely, without causing …\nCreates a new empty config.\nAdd a default H264 payload type.\nAdd a default OPUS payload type.\nAdd a default VP8 payload type.\nAdd a default VP9 payload type.\nWhether the payload uses the FIR (Full Intra Request) …\nWhether the payload uses NACK to request resends.\nWhether the payload uses the PLI (Picture Loss Indication) …\nWhether the payload uses the REMB (Receiver Estimated …\nWhether the payload use the TWCC feedback mechanic.\nFind a payload parameter using a finder function.\nCodec specific format parameters. This might carry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTells if codec is audio.\nFlag which indicates that within <code>MediaData</code>, there is an …\nFlag which indicates that within <code>MediaData</code>, there is an …\nFlag which indicates that within <code>MediaData</code>, there is an …\nTells if codec is video.\nAudio/Video.\nIndex of the vp8 temporal layer.\nMap of the SVC layers heights.\nMap of the SVC layers.\nMap of the SVC layers widths.\nWhether h264 sending media encoded at a different level in …\nMatch the given parameters to the configured parameters.\nOpus specific parameter.\nCreates new payload params.\nCreates a new config from payload params\nCreates a new config with all default configurations …\nWhat h264 packetization mode is used.\nReturns a reference to the payload parameters.\nParse an fmtp line to create a FormatParams.\nExtended picture id, if present\nPicture ID.\nVP9 profile id.\nH264 profile level.\nThe payload type that groups these parameters.\nWhether these parameters are repairing some other set of …\nSet whether the payload uses the FIR (Full Intra Request) …\nSets whether the payload uses NACK to request resends.\nSet whether the payload uses the PLI (Picture Loss …\nSet whether the payload uses the REMB (Receiver Estimated …\nSets whether the payload use the TWCC feedback mechanic.\nThe codec with settings for this group of parameters.\nTrue if this frame and subsequent ones on this layer …\nTemporal layer id.\nExtended picture id of layer 0 frames, if present\nExtended picture id of layer 0 frames, if present\nOpus specific parameter.\nOpus specific parameter.\nAny Rid is allowed.\nAudio media.\nMedia direction.\nValues in an RTP header extension.\n1 / 2 ^ 18 seconds in a second.\nCycles in a second of a 48 kHz signal.\nFull Intra Request (FIR) is a more severe keyframe request …\nMedia timeline frequency as represented by a non-zero …\nHundredths in a second.\nDisabled direction.\nDetails for an incoming a keyframe request (PLI or FIR).\nType of keyframe request.\nMicroseconds in a second.\nMilliseconds in a second.\nInformation about some configured media.\nA new media appeared in an Rtc session.\nA change happening during an SDP re-negotiation.\nVideo or audio data from the remote peer.\nTypes of media.\nMedia timeline offset represented by a count (numerator) / …\nMedia identifier.\nCycles in a second of a 90 kHz signal.\nPicture Loss Indication (PLI) is a less severe keyframe …\nPaylad type.\nReceive only direction.\nIdentifier of a simulcast layer for an encoded stream.\nConfig value for <code>Media::rids_rx()</code>\nSeconds in a second.\nSend only direction.\nBi-directional.\nSimplified information about the simulcast config from SDP.\nThese specific <code>Rid</code> are allowed.\nVideo media.\nWriter of sample level data.\nThe additive identity: 0/1.\nThe absolute value of the offset time.\nA microsecond representation.\nA floating point fraction second representation.\nAdd on audio level and voice activity. These values are …\nAudio level is measured in negative decibel. 0 is max and …\nCanonical name.\nAdditional codec specific information\nWhether the data is contiguous from the one just …\nThe actual packet data a.k.a Sample.\nThe denominator of the offset time.\nCurrent direction. This can be changed using …\nCurrent direction.\nCurrent direction.\nAdd rid as one we are expecting to receive for this mid.\nRTP header extensions for this media data. This is taken …\nThe <code>Frequency</code> of the offset time.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience constructor for numbers of 90kHz units …\nConverts an array of bytes to an id.\nConverts an array of bytes to an id.\nConvenience constructor for numbers of 24-bit 6.18 fixed …\nConvenience constructor for numbers of hundredths of …\nConvenience constructor for numbers of microseconds …\nConvenience constructor for numbers of milliseconds …\nAny non-zero u32 is a valid media timeline frequency.\nConvenience constructor for floating point fractions of …\nConvenience constructor for numbers of seconds (v/1).\nThe frequency as a u32.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChange the direction to the opposite.\nTests if this is <code>MediaKind::Audio</code>\nWhether this direction is a receiving direction.\nTest if the kind of keyframe request is possible.\nWhether this direction is a sending direction.\nTests if this is <code>MediaKind::Video</code>\nPredicate for checking that the numerator is 0.\nWhether this media is audio or video.\nThe kind of media carried.\nThe kind of keyframe request (PLI or FIR).\nSender information from the most recent Sender Report(SR).\nMatch the given parameters to the configured parameters …\nIdentifier of the media.\nIdentifier of the new media.\nIdentifier of the media.\nIdentifier of the media in the session this media belongs …\nThe media identifier this keyframe request is for.\nThe time of the <code>Input::Receive</code> of the first packet that …\nCreates a new random id.\nCreates a new random id.\nCreates a new random id.\nEvery u32 is a valid media timeline frequency except zero.\nConstruct a <code>MediaTime</code> from a guaranteed non-zero <code>Frequency</code>.\nCreate a PT with a specific value.\nThe frequency as a <code>std::num::NonZeroU32</code> i.e. including a …\nThe numerator of the offset time.\nParameters for the codec. This is used to match incoming …\nGet the configured payload parameters for the <code>mid</code> this …\nPayload type (PT) tells which negotiated codec is being …\nConvert this offset time to have a different denominator …\nThe RID used for receiving simulcast.\nThe remote, agreed on, extension map, configured for this …\nThe remote PT (payload types) configured for this Media.\nRequest a keyframe from a remote peer sending media data.\nAdd on an Rtp Stream Id. This is typically used to …\nRtp Stream Id (RID) identifies an RTP stream without …\nRid the keyframe request is for. Relevant when doing …\nRids we are expecting to see on incoming RTP packets that …\nThe RID used for sending simulcast.\nThe (RTP) sequence numbers that made up this data.\nIf simulcast is configured, this holds the Rids.\nThe RTP media time of this packet. Media time is described …\nSet a user extension value.\nUser values for <code>ExtensionSerializer</code> to parse into and …\nAdd video orientation. This can be used by a player on the …\nTell a receiver what rotation a video need to replay …\nIndication that there is sound from a voice.\nWrite media.\nWrapper for a parsed payload to be received.\nA wrapper for some payload that is to be sent.\nType of protocol used in <code>Transmit</code> and <code>Receive</code>.\nReceived incoming data.\nTCP with fixed SSL Hello Exchange See AsyncSSLServerSocket …\nTCP (See RFC 4571 for framing)\nTLS (only used via relay)\nAn instruction to send an outgoing packet.\nUDP\nContents of the datagram.\nParsed contents of the datagram.\nThe destination address this datagram should be sent to.\nThe destination ip of the datagram.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance by trying to parse the contents of …\nProtocol the transmission should use.\nThe protocol the socket this received data originated from …\nThe source IP this packet should be sent from.\nThe socket this received data originated from.\nhttp://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\nurn:ietf:params:rtp-hdrext:ssrc-audio-level\nhttp://www.webrtc.org/experiments/rtp-hdrext/color-space\nNot rotated.\nUpside down.\n90 degrees counter clockwise.\n90 degress clockwise.\nRTP header extensions.\nMapping between RTP extension id to what extension that is.\nTrait for parsing/writing user RTP header extensions.\nValues in an RTP header extension.\n…\nhttp://www.webrtc.org/experiments/rtp-hdrext/playout-delay\nDebug output of the unencrypted RTP and RTCP packets.\nurn:ietf:params:rtp-hdrext:sdes:rtp-stream-id\nIncoming RTCP.\nSent RTCP.\nParsed header from an RTP packet.\nurn:ietf:params:rtp-hdrext:sdes:mid\nPacket of RTP data.\nIncoming RTP.\nurn:ietf:params:rtp-hdrext:sdes:rtp-stream-id\nSent RTP.\nSequence number of an RTP packet.\nSynchronization source.\nEvent when an encoded stream is considered paused/unpaused.\nIncoming encoded stream.\nOutgoing encoded stream.\nurn:ietf:params:rtp-hdrext:toffset\n…\nSpace for storing user extension values via …\n…\nHow the video is rotated.\nurn:3gpp:video-orientation\nhttp://www.webrtc.org/experiments/rtp-hdrext/video-timing\nThe RTP header value (discarding the ROC).\nRepresents the extension as an URI.\nAudio level is measured in negative decibel. 0 is max and …\nCNAME as sent by remote peer in a Sdes.\nWrite a packet consisting entirely of padding and write.\nCreate an empty map.\nThe extension values parsed using the mapping via SDP.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a user extension value (by type).\nLike .get(), but clones and returns the Arc, which can be …\nRTP packet has “RTP header extensions”.\nWhether the RTP packet has padding to be an equal of 4 …\nParsed RTP header.\nLength of header.\nFinds the id for an extension (if mapped).\nIncrease (mutate) this sequence number and return the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTell if this extension should be used for audio media.\nCheck if the <code>other</code> sequence number is directly following …\nTell if this extension should be used for video media.\nReturns an iterator over the elements of the extension map\nReturns an iterator over the audio elements of the …\nReturns an iterator over the audio or video elements of …\nReturns an iterator over the video elements of the …\nSender information from the most recent Sender Report(SR).\nLook up the extension for the id.\nA marker indicates the end of a series of packets …\nMid for this stream.\nMid for this stream.\nThe mid the encoded stream belongs to.\nCreates a new random id.\nCreates a new random id.\nParse a value and put it in the …\nWhether the stream is paused or not.\nRTP payload. This contains no header.\nType of payload being carried. What this correlates to is …\nFor RTX the original sequence number is inserted before …\nRequest a keyframe for an incoming encoded stream.\nRequest max recv bitrate for an incoming encoded stream.\nWhen calling write_to, if the size of the written value …\nWhen calling write_to, if the size of the written value …\nReset the current rollover counter (ROC).\nRid for this stream.\nRid for this stream.\nThe rid, if the encoded stream has a rid.\nGet the rollover counter (ROC) value.\nFeedback for RTP.\nThe resend (RTX) SSRC of this encoded stream.\nThe resend (RTX) SSRC of this encoded stream.\nExtended sequence number to avoid having to deal with ROC.\nSequencer number of this RTP header given the previous …\nSequence number increasing by 1 for each RTP packet.\nSet a mapping for an extension.\nSet a user extension value.\nLike .set(), but takes an Arc, which can be nice to avoid …\nSet threshold duration for emitting the paused event.\nConfigure the RTX (resend) cache.\nSet whether this stream is unpaced or not.\nThe (primary) SSRC of this encoded stream.\nThe (primary) SSRC of this encoded stream.\nSender source identifier.\nThe main SSRC of the encoded stream that paused.\nCreates a map with the “standard” mappings.\nSuppress NACK sending.\nExtended RTP time in the clock frequency of the codec. To …\nTimestamp in media time for the RTP packet. What the media …\nstr0m server timestamp.\nUser values for <code>ExtensionSerializer</code> to parse into and …\nAlways 2\nTell a receiver what rotation a video need to replay …\nVideo Layers Allocation RTP Header Extension\nIndication that there is sound from a voice.\nExtension for a uri not handled by str0m itself.\nFor RTX the original sequence number is inserted before …\nWrite RTP packet to a send stream.\nWrite the extension to the buffer of bytes. Must return …\nCanonical name.\nMultiple source descriptions (SDES).\nDLRR Report Block\nUser’s electronic mail address\nEnd of SDES list\nExtended receiver report (XR).\nExtended  receiver report. Sometimes called XR.\nFull Intra Request (FIR).\nFull Intra Request. Complete restart of a video decoder.\nEntry reported needing a codec restart.\nRTCP packet BY\nBYE. When a stream is over.\nGeographic user location\nUser name\nNotice about the source\nA NACK entry indiciating packets missing.\nReports missing packets.\nA range of sequence numbers missing.\nUser’s phone number\nPrivate extensions\nPicture loss indicator.\nPicture Loss Indiciation. When decoding a picture is not …\nA receiver report.\nReceiver report. Also known as RR.\nAn individual report of reception.\nReceiver Estimated Maximum Bitrate. Feedback to the sender …\nRepaired rtp stream ID.\nParts of an extended report XR.\nList containing max 31 items.\nReceiver Reference Time Report Block.\nRTCP reports handled by str0m.\nRtp stream ID.\nA single source description (SDES).\nTypes of SDES values.\nInformation about a stream being sent.\nA report of packets sent.\nSender report. Also known as SR.\nDescription of Synchronization Sources (senders).\nName of application or tool\nTransport Wide Congestion Control.\nTransport Wide Congestion Control. Feedback for every …\nWho knows\nStart sequence number.\nThe blocks reported.\nRanges received.\nDelta times for the ranges received.\nIncreasing counter for each TWCC. For deduping.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet element at position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterator over sequence numbers missing.\nIterate over the reported sequences.\nTells if the list contains zero elements.\nIterator over the elements in the list.\nNumber of elements in the list.\nThe 64 bit NTP timestamp converted to an <code>Instant</code>.\nClock time this report was produced. Used for RTT …\nA sender report is implicitly also a receiver report. This …\nThe individual reports for received SSRC.\nThe descriptions.\nThe SSRC that are no longer in use.\nThe missing nack. This can be multiple segments.\nThe SSRC needing a full codec restart.\nThe RTP timestamp that corresponds to the same point in …\nInformation about the sender of this report.\nThe total number of octets the sender had sent when this …\nThe total number of packets the sender had sent when this …\nSender of this feedback. Mostly irrelevant, but part of …\nSender of this feedback. Mostly irrelevant, but part of …\nSender of this feedback. Mostly irrelevant, but part of …\nSender of this feedback. Mostly irrelevant, but part of …\nSender of this feedback. Mostly irrelevant, but part of …\nCounter keeping track of which restart request this is.\nThe SSRC of the SR originator.\nThe SSRC this report is for.\nThe SSRC this nack reports missing packets for.\nThe SSRC this picture loss indication is for.\nThe SSRC needing a full codec restart.\nThe SSRC this report is for.\nNumber of reported statuses.\nA resolution and a frame rate, tied together because that…\nSerializer of the Video Layers Allocation Header Extension\nAn allocation for a simulcast stream, which may contain up …\nAn allocation for a spatial layer, which may contain up to …\nAn allocation for a temporal layer.  There may be up to 5 …\nURI for the Video Layers Allocation RTP Header Extension\nTop-level “allocation” for the Video Layers Allocation …\nCumulative bitrate for this temporal layer and all below …\nThe index of the current simulcast stream. AKA RTP stream …\nFramerate in frames per second\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeight in number of pixels\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains an optional resolution and framerate\nAKA RTP streams Max size of this Vec: 5\nMay contains many spatial layers, or none. Max size of …\nContains many temporal layers, or none. If empty, the …\nWidth in number of pixels\nOutgoing media statistics in <code>Event::MediaEgressStats</code>.\nIncoming media statistics in <code>Event::MediaIngressStats</code>.\nPeer statistics in <code>Event::PeerStats</code>.\nStats as reported by the remote side (via RTCP …\nStats as reported by the remote side (via RTCP …\nThe last egress bandwidth estimate from the BWE subsystem, …\nTotal bytes sent, including retransmissions.\nTotal bytes received, including retransmissions.\nTotal bytes transmitted, only counting media traffic (rtp …\nTotal bytes received.\nTotal bytes received, only counting media traffic (rtp …\nTotal bytes transmitted.\nThe egress loss over the last second.\nNumber of firs received.\nNumber of firs sent.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ingress loss since the last stats event.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFraction of packets lost averaged from the RTCP receiver …\nFraction of packets lost extracted from the last RTCP …\nThe identifier of the media these stats are for.\nThe identifier of the media these stats are for.\nNumber of nacks received.\nNumber of nacks sent.\nTotal number of rtp packets sent, including retransmissions\nTotal number of rtp packets received, including …\nTotal bytes transmitted.\nTotal bytes received.\nNumber of plis received.\nNumber of plis sent.\nThe Rid identifier in case of simulcast.\nThe Rid identifier in case of simulcast.\nRound-trip-time (ms) extracted from the last RTCP receiver …\nRound-trip-time (ms) extracted from the last RTCP XR DLRR …\nTimestamp when this event was generated.\nTimestamp when this event was generated\nTimestamp when this event was generated.")