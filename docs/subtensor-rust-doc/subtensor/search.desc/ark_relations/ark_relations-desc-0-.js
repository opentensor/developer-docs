searchState.loadedDescShard("ark_relations", 0, "Core interface for working with various relations that are …\nGenerate a <code>LinearCombination</code> from arithmetic expressions …\nGenerate a <code>Namespace</code> with name <code>name</code> from <code>ConstraintSystem</code> …\nCore interface for working with Rank-1 Constraint Systems …\nInstructs <code>ConstraintLayer</code> to not filter out any spans.\nDuring synthesis, we lacked knowledge of a variable …\nRepresents the case where we <em>do</em> allocate variables or …\nA subscriber <code>Layer</code> that enables capturing a trace of R1CS …\nThe A, B and C matrices of a Rank-One <code>ConstraintSystem</code>. …\nComputations are expressed in terms of rank-1 constraint …\nAn Rank-One <code>ConstraintSystem</code>. Enforces constraints of the …\nA shared reference to a constraint system that can be …\nA captured trace of <code>tracing</code> spans that have <code>target = &quot;r1cs&quot;</code>…\nMinimize the number of constraints.\nDuring synthesis, we divided by zero.\nContains the error value\nThe interface for a generic field. Types implementing <code>Field</code>…\nRepresents a public instance variable.\nAn opaque counter for symbolic linear combinations.\nA linear combination of variables according to associated …\nDuring verification, our verifying key was malformed.\nA sparse representation of constraint matrices.\nDuring synthesis, we tried to allocate a variable when …\nA namespaced <code>ConstraintSystemRef</code>.\nInstructs <code>ConstraintLayer</code> to filter out any spans that <em>do</em> …\nMake no attempt to optimize.\nRepresents the case where we <em>don’t</em> need to allocate …\nThe multiplicative identity of the field.\nContains the success value\nRepresents of the “one” constant.\nInstructs <code>ConstraintLayer</code> to filter out any spans that <em>do </em>…\nDefines the parameter to optimize for a <code>ConstraintSystem</code>.\nDuring synthesis, our polynomials ended up being too high …\nIndicate to the <code>ConstraintSystem</code> that it populate the …\nA result type specialized to <code>SynthesisError</code>.\nDetermines the algorithm for computing square roots.\nIndicate to the <code>ConstraintSystem</code> that it should only …\nRepresents of a linear combination.\nThis is an error that could occur during circuit synthesis …\nDefines the mode of operation of a <code>ConstraintSystem</code>.\nTypes that can be converted to a vector of <code>F</code> elements. …\nA step in the trace of a constraint generation step.\nInstructs <code>ConstraintLayer</code> to conditionally filter out …\nDuring CRS generation, we observed an unconstrained …\nDuring proof generation, we encountered an identity in the …\nDuring synthesis, we constructed an unsatisfiable …\nRepresents the different kinds of variables present in a …\nMinimize the total weight of the constraints (the number …\nRepresents a private witness variable.\nThe additive identity of the field.\nRepresents the “zero” constant.\nThe A constraint matrix. This is empty when …\nThe number of non_zero entries in the A matrix.\nObtain the assignment corresponding to the <code>Variable</code> <code>v</code>.\nObtain the assignment corresponding to the <code>Variable</code> <code>v</code>.\nThe B constraint matrix. This is empty when …\nThe number of non_zero entries in the B matrix.\nObtain an immutable reference to the underlying …\nObtain a mutable reference to the underlying …\nThe C constraint matrix. This is empty when …\nThe number of non_zero entries in the C matrix.\nMap for gadgets to cache computation results.\nCapture the current span trace.\nReturns the characteristic of the field, in little-endian …\nDeduplicate entries in <code>self</code>.\nGet trace information about all constraints in the system\nObtain the inner <code>ConstraintSystemRef&lt;F&gt;</code>.\nReturns <code>self + self</code>.\nDoubles <code>self</code> in place.\nEnforce a R1CS constraint with the name <code>name</code>.\nEnforce a R1CS constraint with the name <code>name</code>.\nReturns the extension degree of this field with respect to …\nName of the file containing the constraint generating span.\nFinalize the constraint system (either by outlining or …\nFinalize the constraint system (either by outlining or …\nReturns <code>self^s</code>, where …\nSets <code>self</code> to <code>self^s</code>, where …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a field element from a single base prime field …\nConvert a slice of base prime field elements into a field …\nAttempt to deserialize a field element. Returns <code>None</code> if the\nAttempt to deserialize a field element, splitting the …\nDrives generation of new constraints inside <code>cs</code>.\nReturns <code>Some(usize)</code> if <code>!self.is_lc()</code>, and <code>None</code> otherwise.\nGet the <code>LcIndex</code> in <code>self</code> if <code>self.is_lc()</code>.\nGet the location of a variable in <code>self</code>.\nConstructs a span at the info level.\nNaively inlines symbolic linear combinations into the …\nNaively inlines symbolic linear combinations into the …\nAssignments to the public input variables. This is empty …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self to return the inner <code>ConstraintSystem&lt;F&gt;</code>. …\nComputes the multiplicative inverse of <code>self</code> if <code>self</code> is …\nIf <code>self.inverse().is_none()</code>, this just returns <code>None</code>. …\nCheck whether <code>self.mode == SynthesisMode::Setup</code>.\nCheck whether <code>self.mode == SynthesisMode::Setup</code>.\nIs <code>self</code> an instance variable?\nIs <code>self</code> a linear combination?\nReturns <code>true</code> is <code>self == ConstraintSystemRef::None</code>.\nIs <code>self</code> the one variable?\nIf <code>self</code> is satisfied, outputs <code>Ok(true)</code>. If <code>self</code> is …\nIf <code>self</code> is satisfied, outputs <code>Ok(true)</code>. If <code>self</code> is …\nIs <code>self</code> a witness variable?\nIs <code>self</code> the zero variable?\nManually leave the namespace.\nReturns a <code>LegendreSymbol</code>, which indicates whether this …\nLine number of the constraint generating span.\nMode of filtering.\nThe mode in which the constraint system is operating. <code>self</code> …\nName of the module containing the constraint generating …\nName of the constraint generating span.\nNegates <code>self</code> in place.\nNegate the coefficients of all variables in <code>self</code>.\nReturns a new <code>ConstraintLayer</code>.\nConstruct an empty <code>ConstraintSystem</code>.\nConstruct a <code>ConstraintSystemRef</code> from a <code>ConstraintSystem</code>.\nConstruct a new <code>Namespace</code>.\nCreate a new empty linear combination.\nObtain a variable representing a new public instance input.\nObtain a variable representing a new public instance input.\nObtain a variable representing a linear combination.\nObtain a variable representing a linear combination.\nCreate a new <code>ConstraintSystemRef&lt;F&gt;</code>.\nNotifies this layer that a new span was constructed with …\nObtain a variable representing a new private witness input.\nObtain a variable representing a new private witness input.\nReturns the number of constraints.\nThe number of constraints in the constraint system.\nThe number of constraints in the constraint system.\nReturns the number of instance variables.\nThe number of variables that are “public inputs” to …\nThe number of variables that are “public instances” to …\nThe number of linear combinations\nReturns the number of witness variables.\nThe number of variables that are “private inputs” to …\nThe number of variables that are “private witnesses” …\nReturn a variable representing the constant “one” …\nCheck whether this constraint system aims to optimize …\nCheck whether this constraint system aims to optimize …\nThe parameter we aim to minimize in this constraint system …\nReturns <code>self</code> if <code>!self.is_none()</code>, otherwise returns <code>other</code>.\nCompute a <code>Vec</code> of <code>TraceStep</code>s, one for each <code>Span</code> on the path …\nReturns <code>self^exp</code>, where <code>exp</code> is an integer represented with …\nExponentiates a field element <code>f</code> by a number represented …\nSet <code>self.mode</code> to <code>mode</code>.\nSet <code>self.mode</code> to <code>mode</code>.\nSpecify whether this constraint system should aim to …\nSpecify whether this constraint system should aim to …\nCheck whether or not <code>self</code> will construct matrices.\nCheck whether or not <code>self</code> will construct matrices.\nReturns the square root of self, if it exists.\nSets <code>self</code> to be the square root of <code>self</code>, if it exists.\nReturns <code>self * self</code>.\nSquares <code>self</code> in place.\nReturns <code>sum([a_i * b_i])</code>.\nThis step must be called after constraint generation has …\nThis step must be called after constraint generation has …\nTransform the map of linear combinations. Specifically, …\nIf <code>self</code> is satisfied, outputs <code>Ok(None)</code>. If <code>self</code> is …\nIf <code>self</code> is satisfied, outputs <code>Ok(None)</code>. If <code>self</code> is …\nAssignments to the private input variables. This is empty …\nReturn a variable representing the constant “zero” …\nCreate a new empty linear combination.\nIf <code>construct_matrices == true</code>, then generate the matrices …")