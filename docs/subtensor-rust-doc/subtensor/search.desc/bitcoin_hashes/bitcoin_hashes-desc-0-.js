searchState.loadedDescShard("bitcoin_hashes", 0, "Rust hashes library.\nLength of the hash’s internal block size, in bytes.\nThe byte array that represents the hash internally.\nFlag indicating whether user-visible serializations of …\nA hashing engine which bytes can be serialized into. It is …\nAttempted to create a hash from an invalid length slice.\nTrait which applies to hashes of all types.\nA hashing engine which bytes can be serialized into.\nLength of the hash, in bytes.\nByte array representing the internal state of the hash …\nReturns an all zero hash.\nReturns a reference to the underlying byte array.\nAdds slicing traits implementations to a given type <code>$ty</code>\nUseful comparison functions.\nConstructs a new engine.\nReturns the argument unchanged.\nConstructs a hash from the underlying byte array.\nProduces a hash from the current state of a given engine.\nCopies a byte slice into a hash object.\nHashes some bytes.\nHASH160 (SHA256 then RIPEMD160) implementation.\nCreates a new newtype around a <code>Hash</code> type.\nRe-export the <code>hex-conservative</code> crate.\nAdds hexadecimal formatting implementation of a trait <code>$imp</code> …\nHash-based Message Authentication Code (HMAC).\nAdd data to the hash engine.\nCalls <code>U::from(self)</code>.\nOutputs the midstate of the hash engine. This function …\nReturn the number of bytes already …\nRIPEMD160 implementation.\nDoes an “empty” serde implementation for the …\nMacros for serde trait implementations, and supporting …\nSHA1 implementation.\nSHA256 implementation.\nSHA256d implementation (double SHA256).\nSHA256t implementation (tagged SHA256).\nMacro used to define a newtype tagged hash.\nSHA512 implementation.\nSHA512_256 implementation.\nSipHash 2-4 implementation.\nReturns the underlying byte array.\nCompare two slices for equality in fixed time. Panics if …\nOutput of the Bitcoin HASH160 hash function. …\nDisplays hex backwards, regardless of how this type would …\nDisplays hex forwards, regardless of how this type would …\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nA hash computed from a RFC 2104 HMAC. Parameterized by the …\nPair of underyling hash engines, used for the inner and …\nPair of underlying hash midstates which represent the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA special constructor giving direct access to the …\nMidstate of the inner hash engine\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new keyed HMAC from <code>key</code>.\nMidstate of the outer hash engine\nOutput of the RIPEMD160 hash function.\nEngine to compute RIPEMD160 hash function.\nDisplays hex backwards, regardless of how this type would …\nDisplays hex forwards, regardless of how this type would …\nReturns the argument unchanged.\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOutput of the SHA1 hash function.\nEngine to compute SHA1 hash function.\nDisplays hex backwards, regardless of how this type would …\nDisplays hex forwards, regardless of how this type would …\nReturns the argument unchanged.\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOutput of the SHA256 hash function.\nEngine to compute SHA256 hash function.\nOutput of the SHA256 hash function.\nDisplays hex backwards, regardless of how this type would …\nComputes hash from <code>bytes</code> in <code>const</code> context.\nDisplays hex forwards, regardless of how this type would …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a new <code>Midstate</code> from the inner value.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCreate a new <code>HashEngine</code> from a <code>Midstate</code>.\nCopies a byte slice into the <code>Midstate</code> object.\nIterate the sha256 algorithm to turn a sha256 hash into a …\nCreates midstate for tagged hashes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the <code>Midstate</code> and returns the underlying byte array.\nOutput of the SHA256d hash function.\nDisplays hex backwards, regardless of how this type would …\nDisplays hex forwards, regardless of how this type would …\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nOutput of the SHA256t hash function.\nTrait representing a tag that can be used as a context for …\nDisplays hex backwards, regardless of how this type would …\nReturns a hash engine that is pre-tagged and is ready to …\nDisplays hex forwards, regardless of how this type would …\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nOutput of the SHA512 hash function.\nEngine to compute SHA512 hash function.\nDisplays hex backwards, regardless of how this type would …\nDisplays hex forwards, regardless of how this type would …\nReturns the argument unchanged.\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOutput of the SHA512/256 hash function.\nEngine to compute SHA512/256 hash function.\nDisplays hex backwards, regardless of how this type would …\nDisplays hex forwards, regardless of how this type would …\nReturns the argument unchanged.\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOutput of the SipHash24 hash function.\nEngine to compute the SipHash24 hash function.\nInternal state of the <code>HashEngine</code>.\nReturns the (little endian) 64-bit integer representation …\nDisplays hex backwards, regardless of how this type would …\nDisplays hex forwards, regardless of how this type would …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nZero cost conversion between a fixed length byte array …\nZero cost conversion between a fixed length byte array …\nProduces a hash as <code>u64</code> from the current state of a given …\nCreates a hash from its (little endian) 64-bit integer …\nHashes the given data directly to u64 with an engine with …\nHashes the given data with an engine with the provided …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves the keys of this engine.\nCreates a new SipHash24 engine.\nCreates a new SipHash24 engine with keys.")