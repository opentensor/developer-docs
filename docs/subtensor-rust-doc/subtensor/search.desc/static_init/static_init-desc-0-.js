searchState.loadedDescShard("static_init", 0, "Safe non const initialized statics and safe mutable …\nLazy access error\nTrait that must be implemented by #[dynamic(finalize)] …\nGenerates a value of type <code>T</code>\nA type that initialize itself only once on the first access\nHelper trait to ease access static lazy associated …\nA mutable locked lazy that initialize its content on the …\nThe lifetime phase of an object, this indicate weither the …\nTrait for objects that know in which phase they are.\nA version of Lazy whose reference can not be passed to …\nA RefCell that initializes its content on the first access\nTrait that must be implemented by #[dynamic(prime)] …\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nAttribute for functions run at program initialization …\nAttribute for functions run at program termination (after …\nDeclare statics that can be initialized with non const …\nThis method is called when program or thread exit and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize if necessary then return a reference to the …\nInitialize the static if there were no previous attempt to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides various implementation of lazily initialized types\nReturns the complement of this set of flags.\nphases and bits to manipulate them;\nreturn the current phase\nThe current phase of the static\nProvides types for statics that are meant to run code …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturn a reference to the target if initialized otherwise …\nThis method is called when program or thread exit and the …\nA type that initialize itself only once on the first access\nHelper trait to ease access static lazy associated …\nThe actual type of statics attributed with #[…\nThe actual type of statics attributed with #[dynamic]. The …\nThe actual type of statics attributed with #[…\nThe actual type of mutable statics attributed with #[…\nThe actual type of mutable statics attributed with #[…\nThe actual type of mutable statics attributed with #[…\nA mutable locked lazy that initialize its content on the …\nThe actual type of statics attributed with #[…\nThe actual type of mutable statics attributed with #[…\nThe actual type of mutable statics attributed with #[…\nThe actual type of mutable statics attributed with #[…\nThe actual type of mutable statics attributed with #[…\nThe actual type of mutable statics attributed with #[…\nA version of Lazy whose reference can not be passed to …\nA RefCell that initializes its content on the first access\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new static object\nBuild a new static object\nBuild a new static object\nBuild a new static object\nBuild a new static object\nBuild a new static object with debug information\nBuild a new static object with debug information\nBuild a new static object with debug information\nBuild a new static object with debug information\nBuild a new static object with debug information\nInitialize if necessary then return a reference to the …\nInitialize if necessary then return a reference to the …\nInitialize if necessary then return a reference to the …\nInitialize if necessary then return a reference to the …\nInitialize if necessary then return a reference to the …\nInitialize if necessary then return a reference to the …\nInitialize and return a mutable reference to the target\nInitialize and return a mutable reference to the target\nInitialize the static if there were no previous attempt to …\nInitialize the lazy if not yet initialized\nInitialize the lazy if not yet initialized\nInitialize the lazy if not yet initialized\nInitialize the lazy if not yet initialized\nInitialize the lazy if not yet initialized\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current phase of the static\nReturn the phase\nReturn the phase\nReturn the phase\nReturn the phase\nReturn the phase\nReturn a reference to the target if initialized otherwise …\nReturn a reference to the target if initialized otherwise …\nReturn a reference to the target if initialized otherwise …\nReturn a reference to the target if initialized otherwise …\nReturn a reference to the target if initialized otherwise …\nReturn a reference to the target if initialized otherwise …\nReturn a mutable reference to the target if initialized …\nReturn a mutable reference to the target if initialized …\nThe actual type of mutable statics attributed with #[…\nInitialize if necessary and returns some read lock if the …\nif the lazy is not already write locked: get a read lock …\nif the lazy is not already read or write locked: get a …\nInitialize if necessary and returns some write lock if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new static object.\nBuild a new static object with debug informations.\nInitialize the lazy if no previous attempt to initialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current phase and synchronize with the end of …\nInitialize if possible and either return a read lock to …\nReturn a read lock to the initialized value or an error …\nInitialize if possible and either return a write lock that …\nReturn a write lock that refers to the initialized value …\nInitialize if necessary and returns a read lock\nGet a read lock if the lazy is initialized or an …\nGet a read lock if the lazy is initialized or an …\nInitialize if necessary and returns a write lock\nThe actual type of mutable statics attributed with #[…\nInitialize if necessary and returns some read lock if the …\nif the lazy is not already write locked: get a read lock …\nif the lazy is not already read or write locked: get a …\nInitialize if necessary and returns some write lock if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new static object.\nBuild a new static object with debug informations.\nInitialize the lazy if no previous attempt to initialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current phase and synchronize with the end of …\nInitialize if necessary and returns a read lock\nGet a read lock if the lazy is initialized or an …\nGet a read lock if the lazy is initialized or an …\nInitialize if necessary and returns a write lock\nThe actual type of mutable statics attributed with #[…\nInitialize if necessary and returns some read lock if the …\nif the lazy is not already write locked: get a read lock …\nif the lazy is not already read or write locked: get a …\nInitialize if necessary and returns some write lock if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new static object.\nBuild a new static object with debug informations.\nInitialize the lazy if no previous attempt to initialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current phase and synchronize with the end of …\nInitialize if necessary and returns a read lock\nGet a read lock if the lazy is initialized or an …\nGet a read lock if the lazy is initialized or an …\nInitialize if necessary and returns a write lock\nThe actual type of mutable statics attributed with #[…\nInitialize if necessary and returns some read lock if the …\nif the lazy is not already write locked: get a read lock …\nif the lazy is not already read or write locked: get a …\nInitialize if necessary and returns some write lock if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new static object.\nBuild a new static object with debug informations.\nInitialize the lazy if no previous attempt to initialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current phase and synchronize with the end of …\nInitialize if necessary and returns a read lock\nGet a read lock if the lazy is initialized or an …\nGet a read lock if the lazy is initialized or an …\nInitialize if necessary and returns a write lock\nA mutable locked lazy that initialize its content on the …\nInitialize if necessary and returns some read lock if the …\nif the lazy is not already write locked: get a read lock …\nif the lazy is not already read or write locked: get a …\nInitialize if necessary and returns some write lock if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new static object.\nBuild a new static object with debug informations.\nInitialize and return a mutable reference to the target\nInitialize the lazy if no previous attempt to initialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current phase and synchronize with the end of …\nInitialize if necessary and returns a read lock\nReturn a mutable reference to the target if initialized …\nGet a read lock if the lazy is initialized or an …\nGet a read lock if the lazy is initialized or an …\nInitialize if necessary and returns a write lock\nThe actual type of statics attributed with #[…\nInitialize if necessary and returns some read lock if the …\nif the lazy is not already write locked: get a read lock …\nif the lazy is not already read or write locked: get a …\nInitialize if necessary and returns some write lock if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new static object.\nBuild a new static object with debug informations.\nInitialize the lazy if no previous attempt to initialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current phase and synchronize with the end of …\nInitialize if necessary and returns a read lock\nGet a read lock if the lazy is initialized or an …\nGet a read lock if the lazy is initialized or an …\nInitialize if necessary and returns a write lock\nThe actual type of mutable statics attributed with #[…\nInitialize if necessary and returns some read lock if the …\nif the lazy is not already write locked: get a read lock …\nif the lazy is not already read or write locked: get a …\nInitialize if necessary and returns some write lock if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new static object.\nBuild a new static object with debug informations.\nInitialize the lazy if no previous attempt to initialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current phase and synchronize with the end of …\nInitialize if necessary and returns a read lock\nGet a read lock if the lazy is initialized or an …\nGet a read lock if the lazy is initialized or an …\nInitialize if necessary and returns a write lock\nThe actual type of mutable statics attributed with #[…\nInitialize if necessary and returns some read lock if the …\nif the lazy is not already write locked: get a read lock …\nif the lazy is not already read or write locked: get a …\nInitialize if necessary and returns some write lock if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new static object.\nBuild a new static object with debug informations.\nInitialize the lazy if no previous attempt to initialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current phase and synchronize with the end of …\nInitialize if possible and either return a read lock to …\nReturn a read lock to the initialized value or an error …\nInitialize if possible and either return a write lock that …\nReturn a write lock that refers to the initialized value …\nInitialize if necessary and returns a read lock\nGet a read lock if the lazy is initialized or an …\nGet a read lock if the lazy is initialized or an …\nInitialize if necessary and returns a write lock\nThe actual type of mutable statics attributed with #[…\nInitialize if necessary and returns some read lock if the …\nif the lazy is not already write locked: get a read lock …\nif the lazy is not already read or write locked: get a …\nInitialize if necessary and returns some write lock if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new static object.\nBuild a new static object with debug informations.\nInitialize the lazy if no previous attempt to initialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current phase and synchronize with the end of …\nInitialize if possible and either return a read lock to …\nReturn a read lock to the initialized value or an error …\nInitialize if possible and either return a write lock that …\nReturn a write lock that refers to the initialized value …\nInitialize if necessary and returns a read lock\nGet a read lock if the lazy is initialized or an …\nGet a read lock if the lazy is initialized or an …\nInitialize if necessary and returns a write lock\nThe actual type of mutable statics attributed with #[…\nInitialize if necessary and returns some read lock if the …\nif the lazy is not already write locked: get a read lock …\nif the lazy is not already read or write locked: get a …\nInitialize if necessary and returns some write lock if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new static object.\nBuild a new static object with debug informations.\nInitialize the lazy if no previous attempt to initialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current phase and synchronize with the end of …\nInitialize if possible and either return a read lock to …\nReturn a read lock to the initialized value or an error …\nInitialize if possible and either return a write lock that …\nReturn a write lock that refers to the initialized value …\nInitialize if necessary and returns a read lock\nGet a read lock if the lazy is initialized or an …\nGet a read lock if the lazy is initialized or an …\nInitialize if necessary and returns a write lock\nA RefCell that initializes its content on the first access\nInitialize if necessary and returns some read lock if the …\nif the lazy is not already write locked: get a read lock …\nif the lazy is not already read or write locked: get a …\nInitialize if necessary and returns some write lock if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new static object.\nBuild a new static object with debug informations.\nInitialize and return a mutable reference to the target\nInitialize the lazy if no previous attempt to initialized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current phase and synchronize with the end of …\nInitialize if necessary and returns a read lock\nReturn a mutable reference to the target if initialized …\nGet a read lock if the lazy is initialized or an …\nGet a read lock if the lazy is initialized or an …\nInitialize if necessary and returns a write lock\nThe lifetime phase of an object, this indicate weither the …\nReturns the set containing all flags.\nReturns the raw value of the flags currently stored.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nThe actual type of non mutable <em>dynamic statics</em>.\nThe actual type of mutable <em>dynamic statics</em>.\nDrop the inner object\nSafety\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild a new static.\nBuild a new ConstStatic")