searchState.loadedDescShard("jsonrpsee", 0, "jsonrpsee wrapper crate.\nFuture of a value\nAsynchronous method handler.\nSimilar to <code>SyncMethod</code>, but represents an asynchronous …\nSerialized batch response.\nBuilder to build a <code>BatchResponse</code>.\nThis wraps <code>tokio::sync::Semaphore</code> and is used to limit the …\nBounded writer that allows writing at most <code>max_len</code> bytes.\nTreat it as ordinary call.\nThis represent a response to a RPC call and <code>Subscribe</code> …\nThe connection channel is closed.\nThe connection channel is closed.\nThe connection was closed.\nComplete JSON message.\nConnection ID.\nError that may occur during <code>crate::server::MethodSink::send</code>…\nThe response was the wrong kind such an error response when\nA type map of protocol extensions.\nThe connection channel is full.\nSomething that can be converted into a JSON-RPC method …\nConvert something into a subscription close notification …\nInvalid subscription ID.\nRepresents a subscription until it is unsubscribed.\nSpecific JSON-RPC error.\nThe response was a JSON-RPC error.\nMax response size.\nMethod call.\nCallback wrapper that can be either sync or async.\nThe kind of the JSON-RPC method call, it can be a …\nRepresents a response to a method call.\nMethod response error.\nFuture that resolves when the method response has been …\nSends a message once the method response has been …\nResult of a method, either direct value or a future of one.\nSink that is used to send back the result to the server …\nReference-counted, clone-on-write collection of …\nThe error that can occur when <code>Methods::call</code> or …\nNeed subscription ID and method name.\nNo further message will be sent.\nThe method was not found.\nSend a subscription notification.\nSend a subscription error notification\nA message that that tells whether notification was …\nThe response was succesfully processed.\nOutput.\nFailed to parse the call as valid JSON-RPC.\nThe error returned while accepting a subscription.\nRepresents a single subscription that is waiting to be …\nRaw response from an RPC A tuple containing:\nSimilar to <code>jsonrpsee_types::ResponsePayload</code> but possible …\nSets of JSON-RPC methods can be organized into “module“…\nError that may occur during …\nType-alias for subscribers.\nWrapper struct that maintains a subscription “mainly” …\nSubscription method handler.\nSubscription Call.\nThe subscription callback itself sends back the result so …\nRepresents what action that will sent when a subscription …\nRepresent a unique subscription entry based on …\nSubscription message.\nA complete subscription message or partial subscription …\nMethod callback for subscriptions.\nSubscription permit.\nRepresents a single subscription that hasn’t been …\nHelper struct to manage subscriptions.\nResult by value\nSynchronous method handler.\nA <code>MethodCallback</code> is an RPC endpoint, callable with a …\nThe data could not be sent because the timeout elapsed …\nError that may occur during …\nUnsubscription method handler.\nUnsubscription Call.\nAttempt to accept the subscription and respond the …\nAttempts to acquire a subscription slot.\nAppend a result from an individual method to the batch …\nGet the error code\nExtract the JSON-RPC response.\nGet a reference to the serialized response.\nCreate a JSON-RPC error response.\nHelper to call a method on the <code>RPC module</code> without having …\nGet the capacity of the channel.\nGet the capacity of the channel.\nGet the capacity of the subscription.\nClear the <code>Extensions</code> of all inserted extensions.\nClose the subscription channel.\nSame as <code>tokio::sync::mpsc::Sender::closed</code>.\nCompletes when the subscription has been closed.\nConnection ID\nReturns connection identifier, which was used to perform …\nGet the connection ID.\nCreate a <code>MethodResponse</code> from a JSON-RPC error.\nCreate an error response payload.\nCreate a borrowd error response payload.\nExtends <code>self</code> with another <code>Extensions</code>.\nReturns a reference to the associated extensions.\nSimilar to <code>Methods::extensions_mut</code> but it’s immutable.\nReturns a reference to the associated extensions.\nGet a mutable reference to the extensions to add or remove …\nFinish the batch response\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new module from an already shared <code>Context</code>.\nCreate a method response from <code>BatchResponse</code>.\nCreate a new subscription message from JSON.\nGet a reference to a type previously inserted on this …\nGet a mutable reference to a type previously inserted on …\nGet a mutable reference to a type, inserting <code>value</code> if not …\nGet a mutable reference to a type, inserting the type’s …\nGet a mutable reference to a type, inserting the value …\nWaits for there to be space on the return channel.\nHelpers.\nID provider.\nInsert a type into this <code>Extensions</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the writer and extract the written bytes.\nConvert the response payload into owned.\nConsume the method response and extract the parts.\nConvert something into a subscription response\nSomething that can be converted into a JSON-RPC method …\nExtract the JSON-RPC response.\nConsume the method response and extract the serialized …\nReturns whether the response is a batch response.\nReturns whether this channel is closed without needing a …\nReturns whether the subscription is closed.\nCheck if the batch is empty.\nCheck whether the extension set is empty or not.\nReturns whether the call failed.\nReturns whether the response is a method response.\nReturns whether the response is a subscription response.\nReturns whether the call was successful.\nReturns true if the unsubscribe method has been invoked or …\nGet the numer of extensions available.\nGet the maximum number of permitted subscriptions.\nGet the max capacity of the channel.\nGet the max capacity of the channel.\nGet the max capacity of the subscription.\nGet the max response size.\nMerge two <code>Methods</code>’s by adding all <code>MethodCallback</code>s from …\nReturns the method callback.\nGet the method name.\nGet the method name.\nReturns an <code>Iterator</code> with all the method names registered …\nReturns the method callback along with its name. The …\nCreate a new bounded writer.\nCreate a new <code>MethodSink</code> with unlimited response size.\nCreate a subscription message this is more efficient than …\nCreate a new bounded subscription.\nCreate a new module with a given shared <code>Context</code>.\nCreates a new empty <code>Methods</code>.\nCreate an empty <code>Extensions</code>.\nCreate a new <code>MethodSink</code> with a limited response size.\nCreate a new batch response builder with limit.\nReceives the next value on the subscription if the value …\nSend a notify message.\nConsumes the <code>ResponsePayload</code> and produces new …\nFigure out if this is a sufficiently complete request that …\nMake a request (JSON-RPC method call or subscription) by …\nRegister an alias for an existing_method. Alias uniqueness …\nRegister a new asynchronous RPC method, which computes the …\nRegister a new <strong>blocking</strong> synchronous RPC method, which …\nRegister a new synchronous RPC method, which computes the …\nRegister a new publish/subscribe interface using JSON-RPC …\nSimilar to <code>RpcModule::register_subscription</code> but a little …\nReject the subscription by responding to the subscription …\nRemove a type from this <code>Extensions</code>.\nTransform a module into an <code>RpcModule&lt;()&gt;</code> (unit context).\nRemoves the method if it exists.\nCreate a new method response.\nConvert the given values to a <code>crate::params::ArrayParams</code> …\nAsync send which will wait until there is space in channel …\nSend out a response on the subscription and wait until …\nSend a JSON-RPC error to the client\nSimilar to <code>MethodSink::send</code> but only waits for a limited …\nSimilar to <code>SubscriptionSink::send</code> but only waits for a …\nSimilar to <code>Methods::subscribe_unbounded</code> but it’s using a …\nHelper to create a subscription on the <code>RPC module</code> without …\nThis is similar to <code>MethodResponse::error</code> but sets a flag …\nGet the subscription ID.\nGet the subscription ID\nSubscription limit\nThis is similar to <code>MethodResponse::response</code> but sets a …\nCreate a successful owned response payload.\nCreate a successful borrowed response payload.\nExtract the serialized response as a String.\nAttempts to send out the message immediately and fails if …\nAttempts to immediately send out the message as JSON …\nWrapper over <code>tokio::sync::mpsc::Sender::closed</code>\nInserts the method callback for a given name, or returns …\nVerifies that the method name is not already taken, and …\nConsumes the method response and returns a new one with …\nBounded writer that allows writing at most <code>max_len</code> bytes.\nSink that is used to send back the result to the server …\nFigure out if this is a sufficiently complete request that …")