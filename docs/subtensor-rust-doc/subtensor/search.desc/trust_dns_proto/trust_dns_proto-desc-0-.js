searchState.loadedDescShard("trust_dns_proto", 0, "<strong>NOTICE</strong> This project has been rebranded to Hickory DNS and …\nGeneric executor.\nGeneric Time for Delay and Timeout.\nNew type which is implemented using tokio::time::{Delay, …\nSpawns a future object to run synchronously or …\nReturn a type that implements <code>Future</code> that will wait until …\nError types for the crate\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate the implementor itself.\nOperations to send with a <code>Client</code> or server, e.g. <code>Query</code>, …\nResource record related components, e.g. <code>Name</code> aka label, …\nContains serialization libraries for <code>binary</code> and text, <code>txt</code>.\nSpawn a background task, if it was present\nTCP protocol related components for DNS\nReturn a type that implement <code>Future</code> to complete before the …\nUDP protocol related components for DNS\nDNS high level transit implimentations.\nQuery count is not one\nThe underlying resource is too busy\nAn error caused by a canceled future\nCharacter data length exceeded the limit\nDNS protocol version doesn’t have the expected version 3\nThe error type for dnssec errors that get returned in the …\nThe error kind for dnssec errors that get returned in the …\nAn alias for dnssec results returned by functions of this …\nA domain name was too long\nEDNS resource record label is not the root label, although …\nContains the error value\nContains the error value\nFormat error in Message Parsing\nA trait marking a type which implements From and …\nA utf8 parsing error\nAn HMAC failed to verify\nThe length of rdata read was not as expected\nAn error got returned from IO\nLabel bytes exceeded the limit of 63\nOverlapping labels\nThe maximum buffer size was exceeded\nAn error with an arbitrary message, referenced as &amp;’…\nAn error with an arbitrary message, referenced as &amp;’…\nAn error with an arbitrary message, stored as String\nAn error with an arbitrary message, stored as String\nNo error was specified\nNot all records were able to be written\nContains the success value\nContains the success value\nAn int parsing error\nLabel bytes exceeded the limit of 63\nAny sync poised error\nAn error got returned by the trust-dns-proto crate\nThe error type for errors that get returned in the crate\nThe error kind for errors that get returned in the crate\nAn alias for results returned by functions of this crate\nA ring error\nA ring error\nA ring error\nMissing rrsigs\nAn ssl error\nAn ssl error\nA request timed out\nA request timed out\nA tokio timer error\nTsig key verification failed\nAn unknown algorithm type was found\nAn unknown dns class was found\nAn unknown dns class value was found\nAn unknown record type string was found\nAn unknown record type value was found\nUnrecognized csync flags were found\nAn unrecognized label code was found\nUnrecognized nsec3 flags were found\nAn url parsing error\nA utf8 parsing error\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a <code>ProtoErrorKind::Io</code>, …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a <code>ProtoErrorKind::Msg</code>, …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a <code>ProtoErrorKind::Ring</code>…\nReturns the inner fields if this is a …\nReturns the inner fields if this is a <code>ProtoErrorKind::SSL</code>, …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a <code>ProtoErrorKind::Utf8</code>…\nReturns true if this is a <code>ProtoErrorKind::BadQueryCount</code>, …\nReturns true if this is a <code>ProtoErrorKind::Busy</code>, otherwise …\nIf this is a ProtoErrorKind::Busy\nReturns true if this is a <code>ProtoErrorKind::Canceled</code>, …\nReturns true if this is a …\nReturns true if this is a …\nReturns true if this is a <code>ProtoErrorKind::DomainNameTooLong</code>…\nReturns true if this is a <code>ProtoErrorKind::EdnsNameNotRoot</code>, …\nReturns true if this is a <code>ProtoErrorKind::FormError</code>, …\nReturns true if this is a <code>ProtoErrorKind::FromUtf8</code>, …\nReturns true if this is a <code>ProtoErrorKind::HmacInvalid</code>, …\nReturns true if this is a …\nReturns true if this is a <code>ProtoErrorKind::Io</code>, otherwise …\nReturns true if this is a <code>ProtoErrorKind::LabelBytesTooLong</code>…\nReturns true if this is a …\nReturns true if this is a …\nReturns true if this is a <code>ProtoErrorKind::Message</code>, …\nReturns true if this is a <code>ProtoErrorKind::Msg</code>, otherwise …\nReturns true if this is a <code>ProtoErrorKind::NoError</code>, …\nReturns true if this is a …\nReturns true if this is a <code>ProtoErrorKind::ParseInt</code>, …\nReturns true if this is a …\nReturns true if this is a <code>ProtoErrorKind::Poisoned</code>, …\nReturns true if this is a <code>ProtoErrorKind::Ring</code>, otherwise …\nReturns true if this is a <code>ProtoErrorKind::RrsigsNotPresent</code>…\nReturns true if this is a <code>ProtoErrorKind::SSL</code>, otherwise …\nReturns true if this is a <code>ProtoErrorKind::Timeout</code>, …\nReturns true if this is a <code>ProtoErrorKind::Timer</code>, otherwise …\nReturns true if this is a <code>ProtoErrorKind::TsigWrongKey</code>, …\nReturns true if this is a …\nReturns true if this is a …\nReturns true if this is a …\nReturns true if this is a …\nReturns true if this is a …\nReturns true if this is a …\nReturns true if this is a …\nReturns true if this is a …\nReturns true if this is a <code>ProtoErrorKind::UrlParsing</code>, …\nReturns true if this is a <code>ProtoErrorKind::Utf8</code>, otherwise …\nGet the kind of the error\nGet the kind of the error\nKind of error that ocurred\nNumber of records that were written before the error\nError that occured while parsing the Message\nHeader of the bad Message\nindex of the label containing this pointer\nStart of the label that is overlaps\nActual length\nThe expected length of the data\nSpecified maximum\nThe record set name\nStart of the other label\nlocation to which the pointer is directing\nThe amount of read data\nThe record type\nEdns implements the higher level concepts for working with …\nIdentical to crate::op::Query, except that the Name is …\nSpecifies that DNSSEC is supported for this Client or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nMessage metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum supported size of the DNS payload\nBasic protocol message for DNS\nCreates a new extended DNS object.\nOperation code for queries, updates, and responses\nReturns the Option associated with the code\nReturns the options portion of EDNS\nReturns a mutable options portion of EDNS\nReturns the original with the <code>Name</code>s case preserved\nQuery struct for looking up resource records\nCreate a new query from name and type, class defaults to IN\nThe high order bytes for the response code in the DNS …\nAll defined response codes in DNS\nSet to true if DNSSEC is supported\nSet the maximum payload which can be supported From RFC …\nSet the specified EDNS option\nSet the high order bits for the result code.\nSet the EDNS version\nUpdate related operations for Messages\nReturns the EDNS version\nAll the flags of the request/response header\nMetadata for the <code>Message</code> struct.\nMessage types are either Query (also Update) or Response\nQueries are Client requests, these are either Queries or …\nResponse message from the Server or upstream Resolver\nRFC 4035, DNSSEC Resource Records, March 2005\nsee <code>is_authentic_data()</code>\nA method to get all header flags (useful for Display …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLength of the header, always 12 bytes\nfor queries this is the nameservers which are authorities …\nA default Header, not very useful.\nConstruct a new header based off the request header. This …\nNumber of additional records in the message\nNumber of answer records in the message\nSpecifies that the data is authentic, i.e. the resolver …\nFrom the server is specifies that it is an authoritative …\nUsed during recursive resolution to specified if a …\nSets the id of the message, for queries this should be …\nSets the message type, Queries and Updates both use Query.\nNumber of name server records in the message\nSet the operation code for the message\nNumber or query records in the message\nSpecifies that recursion is available from this or the …\nSpecify that the resolver should recursively request data …\nThe low response code (original response codes before EDNS …\nSpecifies that the records were too large for the payload.\nA trait that defines types which can be emitted as a set, …\nTracks the counts of the records in the Message.\nThe basic request and response data structure, used for …\nA trait for performing final amendments to a Message …\nConsumes <code>Message</code> giving public access to fields in <code>Message</code> …\nAlias for a function verifying if a message is properly …\nA MessageFinalizer which does nothing\nAdd an additional Record to the message\nAdd all the records from the iterator to the additionals …\nAdd an answer to the Message\nAdd all the records from the iterator to the answers …\nAdd a name server record to the Message\nAdd all the records in the Iterator to the name server …\nAdds an iterator over a set of Queries to be added to the …\nAdd a query to the Message, either the query response from …\nThe number of additional records in the Message\nmessage additional records\nProvides mutable access to <code>additionals</code>\nAll sections chained\nThe number of answers in the Message\nmessage answers\nProvides mutable access to <code>answers</code>\nsee <code>Header::authentic_data()</code>\nsee <code>Header::authoritative()</code>\nsee <code>Header::checking_disabled()</code>\nReturns the count written and a boolean if it was truncated\nRFC 6891, EDNS(0) Extensions, April 2013\noptional edns records\nOptionally returns mutable reference to EDNS section\nEmit self to the encoder and return the count of items\nEmits the different sections of a message properly\nReturns a Message constructed with error details to return …\nReturns reference of Edns section\nReturns mutable reference of Edns section\nFinalize the message prior to sending.\nThe message taken in should be processed and then return …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes a message from the buffer.\nGets the header of the Message\nmessage header\nsee <code>Header::id()</code>\nSets the additional to the specified set of Records.\nSets the answers to the specified set of Records.\nSets the name_servers to the specified set of Records.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>Message</code> and returns into components\nReturn value\nsee <code>Header::message_type()</code>\nmessage name_servers\nProvides mutable access to <code>name_servers</code>\nThe number of nameservers or authorities in the Message\nReturns a new “empty” Message\nAlways returns None\nsee <code>Header::op_code()</code>\nmessage queries\nProvides mutable access to <code>queries</code>\nReturns the query from this Message.\nThe number of queries in the Message\nAttempts to read the specified number of <code>Query</code>s\nAttempts to read the specified number of records\nsee <code>Header::recursion_available()</code>\nsee <code>Header::recursion_desired()</code>\nReturn value\nsee <code>Header::set_authentic_data</code>\nsee <code>Header::set_authoritative</code>\nsee <code>Header::set_checking_disabled</code>\nAdd the EDNS section to the Message\nSets the <code>Header</code> with provided\nsee <code>Header::set_id</code>\nsee <code>Header::set_message_type</code>\nsee <code>Header::set_op_code</code>\nsee <code>Header::set_recursion_available</code>\nsee <code>Header::set_recursion_desired</code>\nsee <code>Header::set_response_code</code>\nsee <code>Header::set_truncated</code>\nReturn whether the message requires further processing …\nRFC 2535, Domain Name System Security Extensions, March …\nsig0 or tsig\nRFC 2535, Domain Name System Security Extensions, March …\nRemove the additional Records from the Message\nRemoves all the answers from the Message\nRemove the name servers from the Message\nRemoves all the answers from the Message\nRemove signatures from the Message\nEncodes the Message into a buffer\nTruncates a Message, this blindly removes all response …\nsee <code>Header::truncated()</code>\nReturns a new Header with accurate counts for each Message …\nReturn value\nNotify of change RFC 1996\nOperation code for queries, updates, and responses\nQuery request RFC 1035\nStatus message RFC 1035\nUpdate message RFC 2136\nReturns the argument unchanged.\nDecodes the binary value of the OpCode\nCalls <code>U::from(self)</code>.\nQuery struct for looking up resource records, basically a …\nConsumes <code>Query</code> giving public access to fields of <code>Query</code> so …\nReturn a default query with an empty name and A, IN for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>Query</code> and returns it’s components\nQNAME\nReturn a default query with an empty name and A, IN for …\nCreate a new query from name and type, class defaults to IN\nQCLASS\nQTYPE\nreplaces name with the new name\nSpecify÷ the DNS class of the Query, almost always IN\nSpecify the RecordType being queried\nAlgorithm not supported RFC 2930\nBad/missing server cookie draft-ietf-dnsop-cookies\nKey not recognized RFC 8945\nBad TKEY Mode RFC 2930\nDuplicate key name RFC 2930\nTSIG Signature Failure RFC 8945\nSignature out of time window RFC 8945\nBad Truncation RFC 4635\nBad OPT Version RFC 6891\nFormat Error RFC 1035\nNon-Existent Domain RFC 1035\nRR Set that should exist does not RFC 2136\nNo Error RFC 1035\nServer Not Authoritative for zone RFC 2136 or Not …\nNot Implemented RFC 1035\nName not contained in zone RFC 2136\nQuery Refused RFC 1035\nThe status code of the response to a query.\nServer Failure RFC 1035\nAn unknown or unregistered response code was received.\nName Exists when it should not RFC 2136\nRR Set Exists when it should not RFC 2136\nReturns the argument unchanged.\nCombines the EDNS high and low from the Header to produce …\nDNS can not store the entire space of ResponseCodes in 4 …\nreturns the high 8 bits for the EDNS portion of the …\nCalls <code>U::from(self)</code>.\nreturns the lower 4 bits of the response code (for the …\nTransforms the response code into the human message\nMaximum payload length for EDNS update messages\nTo reduce errors in using the Message struct as an Update, …\nAdd Records to the additional Section of the UpdateMessage\nAdd the pre-requisite records\nAdd all the Records from the Iterator to the …\nAdd the Record to be updated\nAdd the Records from the Iterator to the updates section\nAdds the zone section, i.e. name.example.com would be …\nReturns the additional records\nAppends a record to an existing rrset, optionally require …\nCompares and if it matches, swaps it for the new value …\nSends a record to create on the server, this will fail if …\nDeletes all records at the specified name\nDeletes a record (by rdata) from an rrset, optionally …\nDeletes an entire rrset, optionally require the rrset to …\nsee <code>Header::id</code>\nReturns the pre-requisites\nThis is used to authenticate update messages.\nReturns the records to be updated\nDownload all records from a zone, or all records modified …\nReturns the Zones to be updated, generally should only be …\nThere are no records in the record set\nTypes which implement this can be converted into a …\nTODO: all LowerNames should be stored in a global “intern…\nRecordData that is stored in a DNS Record.\nSet of resource records associated to a name and type\nThe records associated with the record set\nAccessor key for RRSets in the Authority.\nAn iterator over the RecordSet data\ncreates a new Record as part of this RecordSet, adding the …\nTrims off the first part of the name, to help with …\nUseful for clearing all signatures when the RecordSet is …\nGiven two lower cased names, this performs a case …\nclass of DNS operations, in general always IN for internet\nReturns the <code>DNSClass</code> of the RecordSet\nDomain name associated types, such as Name and Label.\nEmits the canonical version of the name to the encoder.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts a new Resource Record into the Set.\nInserts a Signature for the Record set\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>RecordSet</code> and returns its components\nConverts this RecordData into generic RecordData\nPerforms the conversion to a RecordSet\nReplaces the first label with the wildcard character, “*…\nReturns true if the name is empty\nReturns true if there are no records in this set\nThis is a best effort emptiness check\nReturns true if the name is a fully qualified domain name.\nReturns true if there are no labels, i.e. it’s empty.\nPass through for Name::is_wildcard\nReturns an iterator over the records in the set\nreturns the length in bytes of the labels. ‘.’ counts …\nReturns the name of the key\nReturn value\nMatches the name in the Record of this key\nCreate a new domain::LowerName, i.e. label\nCreates a new key to access the Authority.\nCreates a new Resource Record Set.\ncreates a new Record as part of this RecordSet, adding the …\nReturns the number of labels in the name, discounting <code>*</code>.\nAll record data structures and related serialization …\nparses the chain of labels this has a max of 255 octets, …\nrecord data enum variants\nrecord type definitions\nGet the associated RecordType for the RecordData\nReturn value\nMatches the type of the Record of this key\nReturns a Vec of all records in the set, without any …\nRemoves the Resource Record if it exists.\nresource record implementation\nReturns a slice of all the Records signatures in the …\nReturns the serial number at which the record was updated.\nSets the DNSClass to the specified value\nSets the TTL, in seconds, to the specified value\nAttempts to borrow this RecordData from the RData type, if …\nAttempts to convert to this RecordData from the RData …\nReturns the time-to-live for the record.\ntype bit map helper definitions\nCreates a new Resource Record Set.\nreturns true if the name components of self are all …\nQCLASS * (ANY)\nChaos\nThe DNS Record class\nHesiod\nInternet\nQCLASS NONE\nSpecial class for OPT Version, it was overloaded for EDNS …\nReturn the OPT version from value\nReturns the argument unchanged.\nConvert from <code>&amp;str</code> to <code>DNSClass</code>\nConvert from <code>u16</code> to <code>DNSClass</code>\nCalls <code>U::from(self)</code>.\nConversion into a Label\nConversion into a Name\nLabels are always stored as ASCII, unicode characters must …\nAn iterator over labels in a name\nA domain name\nTypes of this trait will can be attempted for conversion …\nAppends the <code>domain</code> to <code>self</code>, making the new <code>Name</code> an FQDN\nAppends the label to the end of this name\nAppends <code>other</code> to <code>self</code>, returning a new <code>Name</code>\nReturns the raw bytes of the label, this is good for …\nTrims off the first part of the name, to help with …\nCase insensitive comparison, see <code>Name::cmp_case</code> for case …\nCase sensitive comparison\ncompares with the other label, ignoring case\nEmits the canonical version of the name to the encoder.\nWrites the labels, as lower case, to the encoder\nCompares the Names, in a case sensitive manner\nPerforms the equivalence operation disregarding case\noutputs characters in a safe string manner.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes the ascii string and returns a new label.\nWill convert the string to a name only allowing ascii as …\nCreates a new Name from the specified labels\nThese must only be ASCII, with unicode encoded to …\nUses the Name::from_utf8 conversion on this string, see …\nFirst attempts to decode via <code>from_utf8</code>, if that fails IDNA …\nTranslates this string into IDNA safe name, encoding to …\nWill convert the string to a name using IDNA, punycode, to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this into Label\nConvert this into Name\nConverts a name to a wildcard, by replacing the first …\nTrue if the label contains no characters\nReturns whether the length of the labels, in bytes is 0. …\nReturns true if the name is a fully qualified domain name.\nReturns true if the <code>Name</code> is either localhost or in the …\nReturns true if there are no labels, i.e. it’s empty.\nReturns true if this label is the wildcard, ‘*’, label\nTrue if the first label of this name is the wildcard, i.e. …\nReturns an iterator over the labels\nReturns the lenght in bytes of this label\nreturns the length in bytes of the labels. ‘.’ counts …\nCreate a new domain::Name, i.e. label\nReturns the number of labels in the name, discounting <code>*</code>.\nattempts to parse a name such as <code>&quot;example.com.&quot;</code> or …\nConverts a *.arpa Name in a PTR record back into an IpNet …\nparses the chain of labels this has a max of 255 octets, …\nReturns the root label, i.e. no labels, can probably make …\nSpecifies this name is a fully qualified domain name\nConverts this label to safe ascii, escaping characters as …\nConverts this name into an ascii safe string.\nConverts this label to lowercase\nCreates a new Name with all labels lowercased\nPerforms the conversion to utf8 from IDNA as necessary, …\nConverts the Name labels to the utf8 String form.\nTrims to the number of labels specified\nAttempts to parse self into an RData::A or RData::AAAA, …\nAlways returns none for Name, it assumes something that is …\nReserved zone names.\nReturns a new Label of the Wildcard, i.e. “*”\nWrites this label to safe ascii, escaping characters as …\nreturns true if the name components of self are all …\nsame as <code>zone_of</code> allows for case sensitive call\nApplication Software:\nAuthoritative DNS Servers:\nCaching DNS Servers:\nDefault Name usage, everything is normal…\ninvalid.\nzone for ipv4 reverse addresses\n127.in-addr.arpa. usage; 127/8 is reserved for loopback\n254.169.in-addr.arpa. usage link-local, i.e. mDNS\nzone for ipv6 reverse addresses\n…\n254.169.in-addr.arpa. usage link-local, i.e. mDNS\n254.169.in-addr.arpa. usage link-local, i.e. mDNS\n254.169.in-addr.arpa. usage link-local, i.e. mDNS\n.local.\nlocalhost.\nMulti-cast link-local usage\nLink local, generally for mDNS\nLink local, generally for mDNS\nAuthoritative DNS servers SHOULD recognize these names as …\nUsers are free to use localhost names as they would any …\nApplication software MAY recognize localhost names as …\nName resolution APIs and libraries SHOULD recognize …\nCaching DNS servers SHOULD recognize localhost names as …\nAuthoritative DNS servers SHOULD recognize localhost names …\nDNS server operators SHOULD be aware that the effective …\nCaching DNS servers SHOULD recognize these names as …\nUsers are free to use these names as they would any other …\nApplication software SHOULD NOT recognize these names as …\nName resolution APIs and libraries SHOULD NOT recognize …\nCaching DNS servers SHOULD NOT recognize example names as …\nAuthoritative DNS servers SHOULD NOT recognize example …\nDNS server operators SHOULD, if they are using private …\nStanard checks apply\nUsers are free to use “invalid” names as they would …\nApplication software MAY recognize “invalid” names as …\nName resolution APIs and libraries SHOULD recognize “…\nCaching DNS servers SHOULD recognize “invalid” names …\nAuthoritative DNS servers SHOULD recognize these names as …\nDNS server operators SHOULD be aware that the effective …\ninvalid.\nDNS Server Operators:\nDNS Registries/Registrars:\nDNS Registries/Registrars MUST NOT grant requests to …\nName Resolution APIs and Libraries:\nUsers:\nZoneUsage represents information about how a name falling …\nReturns the AppUsage of this zone\nReturns the AuthUsage of this zone\nReturns the CacheUsage of this zone\nRestrictions for the .example. zone\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRestrictions for the .invalid. zone\nRestrictions for the .local. zone\nRestrictions for the .localhost. zone\nA reference to this zone name\nConstructs a new ZoneUsage with the associated values\nReturns the OpUsage of this zone\nReturns the RegistryUsage of this zone\nReturns the ResolverUsage of this zone\nRestrictions for reverse zones\nRestrictions for the .test. zone\nReturns the UserUsage of this zone\nIPv4 address record data\nIPv6 address record data\nallows a DNS domain name holder to specify one or more …\nCSYNC record for synchronizing data from a child zone to …\nHINFO record for storing host information\nHTTPS type and related implementations\nmail exchange, email, record\nRecord type for all cname like records.\nDynamic Delegation Discovery System\nnull record type, generally not used except as an internal …\nOPENPGPKEY records for OpenPGP public keys\noption record for passing protocol options between the …\nstart of authority record defining ownership and defaults …\nservice records for identify port mapping for specific …\nSSHFP records for SSH public key fingerprints\nSVCB records, see draft-ietf-dnsop-svcb-https-03 SVCB and …\nTLSA records for storing TLS certificate validation …\ntext records for storing arbitrary data\nThe DNS A record type, an IPv4 address\nThe size of an IPv4 address in bits.\nAn IPv4 address representing the broadcast address: …\nAn IPv4 address.\nAn IPv4 address with the address pointing to localhost: …\nAn IPv4 address representing an unspecified address: …\nWrite the RData from the given Decoder\nReturns the argument unchanged.\nUses <code>Ipv4Addr::from_bits</code> to convert a host byte order <code>u32</code> …\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nReturns the argument unchanged.\nConverts a native byte order <code>u32</code> into an IPv4 address.\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this address part of the <code>198.18.0.0/15</code> …\nReturns <code>true</code> if this is a broadcast address (…\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address is link-local (<code>169.254.0.0/16</code>).\nReturns <code>true</code> if this is a loopback address (<code>127.0.0.0/8</code>).\nReturns <code>true</code> if this is a multicast address (<code>224.0.0.0/4</code>).\nReturns <code>true</code> if this is a private address.\nReturns <code>true</code> if this address is reserved by IANA for …\nReturns <code>true</code> if this address is part of the Shared Address …\nReturns <code>true</code> for the special ‘unspecified’ address (…\nConstruct a new AAAA record with the 32 bits of IPv4 …\nCreates a new IPv4 address from four eight-bit octets.\nReturns the four eight-bit integers that make up this …\nParse an IPv4 address from a slice of bytes.\nRead the RData from the given Decoder\nConverts an IPv4 address into a <code>u32</code> representation using …\nConverts this address to an IPv4-compatible <code>IPv6</code> address.\nConverts this address to an IPv4-mapped <code>IPv6</code> address.\nThe DNS AAAA record type, an IPv6 address\nThe size of an IPv6 address in bits.\nAn IPv6 address.\nAn IPv6 address representing localhost: <code>::1</code>.\nAn IPv6 address representing the unspecified address: <code>::</code>.\nWrite the RData from the given Decoder\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\nUses <code>Ipv6Addr::from_bits</code> to convert a host byte order <code>u128</code> …\nConverts a native byte order <code>u128</code> into an IPv6 address.\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address is an IPv4-mapped address (…\nReturns <code>true</code> if this is the loopback address (<code>::1</code>), as …\nReturns <code>true</code> if this is a multicast address (<code>ff00::/8</code>).\nReturns <code>true</code> if this is a unicast address, as defined by …\nReturns <code>true</code> if the address is a globally routable unicast …\nReturns <code>true</code> if the address is a unicast address with …\nReturns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).\nReturns <code>true</code> for the special ‘unspecified’ address (<code>::</code>…\nReturns the address’s multicast scope if the address is …\nConstruct a new AAAA record with the 128 bits of IPv6 …\nCreates a new IPv6 address from eight 16-bit segments.\nReturns the sixteen eight-bit integers the IPv6 address …\nParse an IPv6 address from a slice of bytes.\nRead the RData from the given Decoder\nReturns the eight 16-bit segments that make up this …\nConverts an IPv6 address into a <code>u128</code> representation using …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IPv4</code> address if it is either …\nConverts this address to an <code>IPv4</code> address if it’s an …\nThe CAA RR Type\nSpecifies a URL to which an issuer MAY report certificate …\nThe issue property entry authorizes the holder of the …\nThe issuewild property entry authorizes the holder of the …\nIssuer authorized to issue certs for this zone, and any …\nIssuer key and value pairs.\nSpecifies in what contexts this key may be trusted for use\nUnknown format to Trust-DNS\nUnrecognized tag and value by Trust-DNS\nUrl to which to send CA errors\nPotential values.\nConvert to string form\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntrue if the property is <code>iodef</code>\ntrue if the property is <code>issue</code>\ntrue if this is an <code>Issuer</code>\ntrue if the property is <code>issueworld</code>\ntrue if the property is not known to Trust-DNS\ntrue if this is an <code>Unknown</code>\ntrue if this is a <code>Url</code>\nIndicates that the corresponding property tag MUST be …\nGets a reference to the key of the pair.\nConstruct a new KeyValue pair\nCreates a new CAA issue record data, the tag is <code>iodef</code>\nCreates a new CAA issue record data, the tag is <code>issue</code>\nCreates a new CAA issue record data, the tag is <code>issuewild</code>\nIncident Object Description Exchange Format\nReads the issuer field according to the spec\nThe property tag, see struct documentation\na potentially associated value with the property tag, see …\nGets a reference to the value of the pair.\nRFC 7477, Child-to-Parent Synchronization in DNS, March …\nRFC 7477, Child-to-Parent Synchronization in DNS, March …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new CSYNC record data.\nRFC 7477, Child-to-Parent Synchronization in DNS, March …\nRFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, …\nA  which specifies the CPU type.\nReturns the argument unchanged.\nCreates a new HINFO record data from bytes. Allows …\nCalls <code>U::from(self)</code>.\nCreates a new HINFO record data.\nA  which specifies the operating system type.\nHTTPS is really a derivation of the original SVCB record …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, …\nRFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new MX RData\nRFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, …\nnew type for the RecordData of ANAME\nnew type for the RecordData of CNAME\nnew type for the RecordData of NS\nnew type for the RecordData of PTR\nRFC 4034, DNSSEC Resource Records, March 2005\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead the RData from the given Decoder\nRFC 3403 DDDS DNS Database, October 2002\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new NAPTR record\nverifies that the flags are valid\nRFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, …\nReturns the buffer stored in the NULL\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct a new NULL RData\nConstructs a new NULL RData with the associated data\nRFC 7929\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new OPENPGPKEY record data.\nThe public key. This should be an OpenPGP Transferable …\nRFC 7901, CHAIN Query Requests in DNS, Optional\nRFC 7871, Client Subnet, Optional\nRFC 7873, DNS Cookies\nRFC 6975, DNSSEC Algorithm Understood\nRFC 6975, DS Hash Understood\nThe code of the EDNS data option\noptions used to pass information about capabilities …\nRFC 7314, EDNS EXPIRE, Optional\nRFC 7828, edns-tcp-keepalive\nRFC 8764l, Apple’s Long-Lived Queries, Optional\nRFC 6975, NSEC3 Hash Understood\nRFC 5001, NSID\nThe OPT record type is used for ExtendedDNS records.\nRFC 7830, The EDNS(0) Padding\nRFC 7871, Client Subnet, Optional\nRFC 7871, Client Subnet, Optional\nUL On-hold\nUnknown, used to deal with unknown or unsupported codes\nUnknown, used to deal with unknown or unsupported codes\nRFC 6891, Reserved\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a single option based on the code\nInsert a new option, the key is derived from the <code>EdnsOption</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the length in bytes of the EdnsOption is 0\nReturns <code>true</code> if the length in bytes of the EcsOption is 0\nReturns the length in bytes of the EdnsOption\nReturns the length in bytes of the EdnsOption\nCreates a new OPT record data.\nConstruct a new EcsOption with the address, source_prefix …\nThe entire map of options\nRemove an option, the key is derived from the <code>EdnsOption</code>\nRFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, …\nRFC 4034, DNSSEC Resource Records, March 2005\nReturns the argument unchanged.\nIncrements the serial number by one\nCalls <code>U::from(self)</code>.\nCreates a new SOA record data.\nRFC 2782, DNS SRV RR, February 2000\nRFC 4034, DNSSEC Resource Records, March 2005\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new SRV record data.\nDSS/DSA\nECDSA\nEd25519\nEd448\nHEX formatting specific to TLSA and SSHFP encodings\nRSA\nReserved value\nReserved value\nSHA-1\nSHA-256\nRFC 4255\nUnassigned value\nUnassigned value\nThe SSH public key algorithm.\nThe fingerprint of the public key.\nThe fingerprint type to use.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new SSHFP record data.\ndraft-ietf-dnsop-svcb-https-03 SVCB and HTTPS RRs for DNS, …\nAdditional supported protocols\nThe “alpn” and “no-default-alpn” SvcParamKeys …\nEncrypted ClientHello info\nIPv4 address hints\nThe “ipv4hint” and “ipv6hint” keys convey IP …\nIPv6 address hints\nSee <code>IpHint</code>\nPrivate Use\nReserved (“Invalid key”)\nMandatory keys in this RR\nIn a ServiceMode RR, a SvcParamKey is considered “…\nNo support for default protocol\nFor “no-default-alpn”, the presentation and wire …\nPort for alternative endpoint\ndraft-ietf-dnsop-svcb-https-03 SVCB and HTTPS RRs for DNS, …\nWarning, it is currently up to users of this type to …\ndraft-ietf-dnsop-svcb-https-03 SVCB and HTTPS RRs for DNS, …\nUnknown\nUnparsed network data. Refer to documents on the …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nThis expects the decoder to be limited to only this field, …\nThe wire format value for “alpn” consists of at least …\nIn wire format, the value of the parameter is an …\nThe wire format for each parameter is a sequence of IP …\nThe presentation “value” SHALL be a comma-separated …\nThe presentation “value” SHALL be a comma-separated …\nAs the documentation states, the presentation format (what …\nThe debug format for EchConfig will output the value in …\nThe presentation “value” SHALL be a comma-separated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner fields if this is a <code>SvcParamValue::Alpn</code>, …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a …\nReturns the inner fields if this is a <code>SvcParamValue::Port</code>, …\nReturns the inner fields if this is a …\nReturns true if this is a <code>SvcParamValue::Alpn</code>, otherwise …\nReturns true if this is a <code>SvcParamValue::EchConfig</code>, …\nReturns true if this is a <code>SvcParamValue::Ipv4Hint</code>, …\nReturns true if this is a <code>SvcParamValue::Ipv6Hint</code>, …\nReturns true if this is a <code>SvcParamValue::Mandatory</code>, …\nReturns true if this is a <code>SvcParamValue::NoDefaultAlpn</code>, …\nReturns true if this is a <code>SvcParamValue::Port</code>, otherwise …\nReturns true if this is a <code>SvcParamValue::Unknown</code>, …\nCreate a new SVCB record from parts\nThis expects the decoder to be limited to only this field, …\nThis expects the decoder to be limited to only this field, …\nIn wire format, the value of the parameter is an …\nThe wire format for each parameter is a sequence of IP …\nSee <code>SvcParamKey</code> for details on each parameter\ndraft-ietf-dnsop-svcb-https-03 SVCB and HTTPS RRs for DNS, …\ndraft-ietf-dnsop-svcb-https-03 SVCB and HTTPS RRs for DNS, …\nRFC 6698, DNS-Based Authentication for TLS\nFull certificate: the Certificate binary structure as …\nRFC 6698, DNS-Based Authentication for TLS\nPrivate usage\nPrivate usage\nPrivate usage\nExact match on selected content\nRFC 6698, DNS-Based Authentication for TLS\nSHA-256 hash of selected content RFC6234\nSHA-512 hash of selected content RFC6234\nSubjectPublicKeyInfo: DER-encoded binary structure as …\nRFC 6698, DNS-Based Authentication for TLS\nUnassigned at the time of this implementation\nUnassigned at the time of this writing\nUnassigned at the time of this writing\nBinary data for validating the cert, see other members to …\nSpecifies the provided association that will be used to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecifies how the certificate association is presented\nConstructs a new TLSA\nSpecifies which part of the TLS certificate presented by …\nRFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, …\nFormat a TXT with lossy conversion of invalid utf8.\nReturns the argument unchanged.\nCreates a new TXT record data from bytes. Allows creating …\nCalls <code>U::from(self)</code>.\nReturns an iterator over the arrays in the txt data\nCreates a new TXT record data.\nRFC draft-ietf-dnsop-svcb-https-03, DNS SVCB and HTTPS RRs\nRFC 3403 DDDS DNS Database, October 2002\nRFC 7929\nRecord data enum variants for all valid DNS data types.\nRFC 4255\nRFC draft-ietf-dnsop-svcb-https-03, DNS SVCB and HTTPS RRs\nRFC 6698, DNS-Based Authentication for TLS\nUnknown RecordData is for record types not supported by …\nThis corresponds to a record type of 0, unspecified\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nRFC 4034, DNSSEC Resource Records, March 2005\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the inner fields if this is a <code>RData::A</code>, otherwise …\nReturns the inner fields if this is a <code>RData::AAAA</code>, …\nReturns the inner fields if this is a <code>RData::ANAME</code>, …\nReturns the inner fields if this is a <code>RData::CAA</code>, …\nReturns the inner fields if this is a <code>RData::CNAME</code>, …\nReturns the inner fields if this is a <code>RData::CSYNC</code>, …\nReturns the inner fields if this is a <code>RData::HINFO</code>, …\nReturns the inner fields if this is a <code>RData::HTTPS</code>, …\nReturns the inner fields if this is a <code>RData::MX</code>, otherwise …\nReturns the inner fields if this is a <code>RData::NAPTR</code>, …\nReturns the inner fields if this is a <code>RData::NS</code>, otherwise …\nReturns the inner fields if this is a <code>RData::NULL</code>, …\nReturns the inner fields if this is a <code>RData::OPENPGPKEY</code>, …\nReturns the inner fields if this is a <code>RData::OPT</code>, …\nReturns the inner fields if this is a <code>RData::PTR</code>, …\nReturns the inner fields if this is a <code>RData::SOA</code>, …\nReturns the inner fields if this is a <code>RData::SRV</code>, …\nReturns the inner fields if this is a <code>RData::SSHFP</code>, …\nReturns the inner fields if this is a <code>RData::SVCB</code>, …\nReturns the inner fields if this is a <code>RData::TLSA</code>, …\nReturns the inner fields if this is a <code>RData::TXT</code>, …\nReturns the inner fields if this is a <code>RData::Unknown</code>, …\nIf this is an A or AAAA record type, then an IpAddr will …\nReturns true if this is a <code>RData::A</code>, otherwise false\nReturns true if this is a <code>RData::AAAA</code>, otherwise false\nReturns true if this is a <code>RData::ANAME</code>, otherwise false\nReturns true if this is a <code>RData::CAA</code>, otherwise false\nReturns true if this is a <code>RData::CNAME</code>, otherwise false\nReturns true if this is a <code>RData::CSYNC</code>, otherwise false\nReturns true if this is a <code>RData::HINFO</code>, otherwise false\nReturns true if this is a <code>RData::HTTPS</code>, otherwise false\nReturns true if this is a <code>RData::MX</code>, otherwise false\nReturns true if this is a <code>RData::NAPTR</code>, otherwise false\nReturns true if this is a <code>RData::NS</code>, otherwise false\nReturns true if this is a <code>RData::NULL</code>, otherwise false\nReturns true if this is a <code>RData::OPENPGPKEY</code>, otherwise …\nReturns true if this is a <code>RData::OPT</code>, otherwise false\nReturns true if this is a <code>RData::PTR</code>, otherwise false\nReturns true if this is a <code>RData::SOA</code>, otherwise false\nReturns true if this is a <code>RData::SRV</code>, otherwise false\nReturns true if this is a <code>RData::SSHFP</code>, otherwise false\nReturns true if this is a <code>RData::SVCB</code>, otherwise false\nReturns true if this is a <code>RData::TLSA</code>, otherwise false\nReturns true if this is a <code>RData::TXT</code>, otherwise false\nReturns true if this is a <code>RData::Unknown</code>, otherwise false\nReturns true if this is a <code>RData::ZERO</code>, otherwise false\nRead data from the decoder\nConverts this to a Recordtype\nRecordType code\nRData associated to the record\nRFC 1035 IPv4 Address record\nRFC 3596 IPv6 address record\nANAME draft-ietf-dnsop-aname\nRFC 1035 All cached records, aka ANY\nRFC 1035 Authoritative Zone Transfer\nRFC 6844 Certification Authority Authorization\nRFC 7344 Child DNSKEY\nRFC 7344 Child DS\nRFC 1035 Canonical name record\nRFC 7477 Child-to-parent synchronization record\nRFC 4034 DNS Key record: RSASHA256 and RSASHA512, RFC5702\nRFC 4034 Delegation signer: RSASHA256 and RSASHA512, …\nRFC 1035 host information\nRFC draft-ietf-dnsop-svcb-https-03 DNS SVCB and HTTPS RRs\nRFC 1996 Incremental Zone Transfer\nRFC 2535 and RFC 2930 Key record\nRFC 1035 Mail exchange record\nRFC 3403 Naming Authority Pointer\nRFC 1035 Name server record\nRFC 4034 Next-Secure record\nRFC 5155 NSEC record version 3\nRFC 5155 NSEC3 parameters\nRFC 1035 Null server record, for testing\nRFC 7929 OpenPGP public key\nRFC 6891 Option\nRFC 1035 Pointer record\nRFC 4034 DNSSEC signature: RSASHA256 and RSASHA512, RFC5702\nThe type of the resource record.\nRFC 2535 (and RFC 2931) Signature, to support RFC 2137 …\nRFC 1035 and RFC 2308 Start of [a zone of] authority record\nRFC 2782 Service locator\nRFC 4255 SSH Public Key Fingerprint\nRFC draft-ietf-dnsop-svcb-https-03 DNS SVCB and HTTPS RRs\nRFC 6698 TLSA certificate association\nRFC 8945 Transaction Signature\nRFC 1035 Text record\nUnknown Record type, or unsupported\nThis corresponds to a record type of 0, unspecified\nReturns the argument unchanged.\nConvert from <code>u16</code> to <code>RecordType</code>\nConvert <code>&amp;str</code> to <code>RecordType</code>\nCalls <code>U::from(self)</code>.\nReturns true if this is an ANY\nReturns true if this is a CNAME\nReturns true if this is a DNSSEC RecordType\nReturns true if this is an A or an AAAA record\nReturns true if this is an NS\nReturns true if this is an SOA\nReturns true if this is an SRV\nReturns true if this is a Zero (unspecified) RecordType\nResource records are storage value in DNS, into which all …\nConsumes <code>Record</code> giving public access to fields of <code>Record</code> …\nA Record where the RecordData type is already known\nCanonical ordering as defined by RFC 4034, DNSSEC Resource …\nReturns the Record Data, i.e. the record information\nReturns the Record Data, i.e. the record information\nReturns a mutable reference to the Record Data\nReturns the DNSClass of the Record, generally IN fro …\nReturns the DNSClass of the Record, generally IN fro …\ndns class\nEquality or records, as defined by RFC 2136, DNS Update, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis returns a Resource Record that is formatted for …\nReturns the argument unchanged.\nCreate a record with the specified initial values.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the RData consuming the Record\nConsumes <code>Record</code> and returns its components\nConverts this Record into a generic version of RData\nReturns the name of the record\nReturns the name of the record\nlabel names\nCreates a default record, use the setters to build a more …\nCanonical ordering as defined by RFC 4034, DNSSEC Resource …\nrdata\nparse a resource record line example: WARNING: the …\nReturns the type of the RecordData in the record\nReturns the type of the RecordData in the record\nrecord type\nAllocates space for a Record with the same fields\nAttempts to convert the generic <code>RData</code> based Record into …\nReturns the time-to-live of the record, for caching …\nReturns the time-to-live of the record, for caching …\ntime to live\nCreate a record with the specified initial values.\nBinary serialization types\nArgument for the math operations\nA trait for types which are serializable to and from DNS …\nThis is non-destructive to the inner buffer, b/c for …\nA type which can be encoded into a DNS binary format\nEncode DNS messages and resource record types.\nAn error that can occur deep in a decoder This type is …\nA domain name was too long\nIn the Verify mode there maybe some things which are …\nInsufficient data in the buffer for a read operation\nslice_from was called with an invalid index\nLabel bytes exceeded the limit of 63\nOverlapping labels\nWrite records in standard format\nPointer points to an index within or after the current …\nUntrusted types will be wrapped in this type.\nCommon checked math operations for the Restrict type\nIn signing mode records are written in canonical form\nAn unrecognized label code was found\nReturn value, generally the same as Arg\nVerified data that can be operated on\nChecked addition, see <code>usize::checked_add</code>\nChecked multiplication, see <code>usize::checked_mul</code>\nChecked subtraction, see <code>usize::checked_sub</code>\nThis is a pretty efficient clone, as the buffer is never …\nWrite the type to the stream\nEmit one byte into the buffer\nEmits all the elements of an Iterator to the encoder\nEmits all the elements of an Iterator to the encoder\nwrite back to a previously captured location\nmatches description from above.\nEmit character data of unrestricted length\nWrites an i32 in network byte order to the buffer\nemits all items in the iterator, return the number emitted\nWrites a u16 in network byte order to the buffer\nWrites an u32 in network byte order to the buffer\nEmit one byte into the buffer\nWrites the byte slice to the stream\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the object in binary form\nLooks up the index of an already written label\nReturns the current index in the buffer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a reference to the internal buffer\nReturns true if then encoder is writing in canonical form\nReturns <code>true</code> if the buffer is empty\nReturns <code>true</code> if the buffer is empty\nIs this valid\nReturns the number of bytes in the buffer\nReturns the length of the buffer\ncalculates the length of data written since the place was …\nMap the internal type of the restriction\nReturns the current Encoding mode\nCreates a new BinDecoder\nCreate a new encoder with the Vec to fill\nCreate a new restricted type\nReturns the current offset into the buffer\nPeed one byte forward, without moving the current index …\ncapture a location to write back to\nPop one byte from the buffer\nRead the type from the stream\nReads a String from the buffer\nReads the next four bytes into i32.\nReads a slice out of the buffer, without allocating\nReads the next 2 bytes into u16\nReads the next four bytes into u32.\nReads a byte from the buffer, equivalent to <code>Self::pop()</code>\nReads a Vec out of the buffer\nReserve specified additional length in the internal buffer.\nIf set to true, then names will be written into the buffer …\nSets the maximum size of the buffer\nsets the current offset to the new offset\nReads a slice from a previous index to the current\nborrow a slice from the encoder\nStores a label pointer to an already written label\nPerform some operation on the data, and return a result.\nReturns the object in binary form\ntrims to the current offset\nUnwraps the value without verifying the data, akin to …\nIt is the responsibility of this function to verify the …\nIt is the responsibility of this function to verify the …\nEmit all names in canonical form, useful for …\nSpecify the mode for encoding\nBegins the encoder at the given offset\nindex of the label containing this pointer\nStart of the label that is overlaps\nStart of the other label\nlocation to which the pointer is directing\nTrait for TCP connection\nTrait for TCP connection\nA future that resolves to an TcpClientStream\nTcp client stream\nA Stream used for sending data to and from a remote DNS …\nTimer type to use with this TCP stream type\nconnect to tcp\nconnect to tcp\nconnect to tcp with address to connect from\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWraps the TcpStream in TcpClientStream\nInitializes a TcpStream.\nWraps a stream where a sender and receiver have already …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new TcpStream for a client to the specified …\nCreates a new future of the eventually establish a IO …\nReturns the address of the peer connection.\nConstructs a new TcpStream for a client to the specified …\nCreates a new future of the eventually establish a IO …\nConstructs a new TcpStream for a client to the specified …\nCreates a new future of the eventually establish a IO …\nConstructs a new TcpStream for a client to the specified …\nCreates a new future of the eventually establish a IO …\nTrait for DnsUdpSocket\nMax size for the UDP receive buffer as recommended by …\nTo implement quinn::AsyncUdpSocket, we need our custom …\nTime implementation used for this type\nA future that resolves to an UdpClientStream\nA UDP client stream of DNS binary packets\nTrait for UdpSocket\nA UDP stream of DNS binary packets\na “server” UDP socket, that bind to the local …\nsetups up a “client” udp connection that will only …\nsame as connect, but binds to the specified local address …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet local address\nit is expected that the resolver wrapper will be …\nThis method is intended for client connections, see …\nPoll once Receive data from the socket and returns the …\nPoll once to send data to the given address.\nReceive data from the socket and returns the number of …\nReceive data from the socket and returns the number of …\nSend data to the given address.\nSend data to the given address.\nConstructs a new UdpStream for a client to the specified …\nInitialize the Stream with an already bound socket. …\nConstructs a new UdpStream for a client to the specified …\nConstructs a new UdpStream for a client to the specified …\nConstructs a new UdpStream for a client to the specified …\nConstructs a new UdpStream for a client to the specified …\nUsed for associating a name_server to a …\nA buffering stream bound to a <code>SocketAddr</code>\nA non-multiplexed stream of Serialized DNS messages\nThis is a generic Exchange implemented over multiplexed …\nThis background future is responsible for driving all …\nA wrapper for a future DnsExchange connection.\nA Stream that will resolve to Responses after sending the …\nTypes that implement this are capable of sending a …\nA Stream that wraps a oneshot::Receiver and resolves to …\nError during the send operation\nHelper trait to convert a Stream of dns response into a …\nSee FirstAnswer::first_answer\nA OneshotDnsRequest creates a channel for a response to …\nThe stream once received\nThe receiver\nA DNS message in serialized form, with either the target …\nReceiver handle for peekable fused SerialMessage channel\nTime implementation for this impl\nGet the source or destination address (context dependent)\nGet a reference to the bytes\nReturns a future, which itself wraps a future which is …\n<code>DnsHandle</code> types perform conversions of the raw DNS …\n<code>DnsMultiplexer</code> and associated types implement the state …\n<code>DnsRequest</code> wraps a <code>Message</code> and associates a set of …\n<code>DnsResponse</code> wraps a <code>Message</code> and any associated connection …\nConvert a Stream of dns response into a Future yielding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a <code>SerialMessage</code> from some bytes and an address\nInitializes a TcpStream with an existing tcp::TcpStream.\nWraps a stream where a sender and receiver have already …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap the Bytes and address\nReturns true if the stream has been shutdown with <code>shutdown</code>\nThe remote name server address\nConstruct a new SerialMessage and the source or …\nConstructs a new Buffered Stream Handle, used for sending …\n<code>RetryDnsHandle</code> allows for DnsQueries to be reattempted on …\nSend a message, and return a stream of response\nAllows the upstream user to inform the underling stream …\nDeserializes the inner data into a Message\nAssociates a different remote address for any responses.\nA trait for implementing high level functions of DNS.\nImplementations of Sinks for sending DNS messages\nError of the response, generally this will be <code>ProtoError</code>\nThe associated response from the response stream, this …\nAllow for disabling EDNS\nOnly returns true if and only if this DNS handle is …\nA <em>classic</em> DNS query\nSends a message to the Handle for delivery to the server.\nSend a message via the channel in the client\nA DNS Client implemented over futures-rs.\nA wrapper for a future DnsExchange connection\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpawns a new DnsMultiplexer Stream. This uses a default …\nSpawns a new DnsMultiplexer Stream.\nA DNS request object\nA set of options for expressing options to how requests …\nWhen true, the underlying DNS protocols will not return on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the raw message\nSpecifies maximum request depth for DNSSEC validation.\nReturns a new DnsRequest object\nGet the set of request options associated with this request\nset recursion desired (or not) for any requests\nWhen true, will add EDNS options to the request.\nA DNS response object\nA stream returning DNS responses\nBorrow the inner buffer from the response\nDoes the response contain any records matching the query …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new DnsResponse with a buffer synthesized …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake the inner buffer from the response\nTake the inner Message from the response\nTake the inner Message and buffer from the response\nThe response contains an SOA record\nLooks in the authority section for an SOA record from the …\nRetrieve the type of the negative response. The Various …\nConstructs a new DnsResponse\nRetrieves the SOA from the response. This will only exist …\nCan be used to reattempt queries if they fail\nWhat errors should be retried\nWhether this error should count as an attempt\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new Client handler for reattempting requests on …\nWhether the query should be retried after this error")