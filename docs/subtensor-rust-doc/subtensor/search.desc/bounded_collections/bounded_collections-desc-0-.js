searchState.loadedDescShard("bounded_collections", 0, "Collection types that have an upper limit on how many …\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nConst getter for a basic type.\nThe error type that gets returned when a collection can’…\nA trait for querying a single value from a type.\nImplement Get by returning Default for any type that …\nTry and collect into a collection <code>C</code>.\nThe type which is returned.\nA trait for querying a single value from a type defined in …\nTraits, types and structs to support a bounded BTreeMap.\nBuild a bounded btree-map from the given literals.\nTraits, types and structs to support a bounded <code>BTreeSet</code>.\nTraits, types and structs to support putting a bounded …\nBuild a bounded vec from the given literals.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the current value.\nReturn the current value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new implementations of the <code>Get</code> trait.\nConsume self and try to collect the results into <code>C</code>.\nTraits, types and structs to support putting a bounded …\nA bounded map based on a B-Tree.\nGet the bound of the type in <code>usize</code>.\nClears the map, removing all elements.\nReturns the argument unchanged.\nReturn a mutable reference to the value corresponding to …\nCalls <code>U::from(self)</code>.\nConsume self, and return the inner <code>BTreeMap</code>.\nGets a mutable iterator over the entries of the map, …\nConsume the map, applying <code>f</code> to each of it’s values and …\nCreate a new <code>BoundedBTreeMap</code>.\nRemove a key from the map, returning the value at the key …\nRemove a key from the map, returning the value at the key …\nExactly the same semantics as <code>BTreeMap::retain</code>.\nExactly the same semantics as <code>BTreeMap::insert</code>, but …\nConsume the map, applying <code>f</code> to each of it’s values as …\nConsumes self and mutates self via the given <code>mutate</code> …\nA bounded set based on a B-Tree.\nGet the bound of the type in <code>usize</code>.\nClears the set, removing all elements.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsume self, and return the inner <code>BTreeSet</code>.\nCreate a new <code>BoundedBTreeSet</code>.\nRemove an item from the set, returning whether it was …\nRemoves and returns the value in the set, if any, that is …\nExactly the same semantics as <code>BTreeSet::insert</code>, but …\nConsumes self and mutates self via the given <code>mutate</code> …\nA bounded slice.\nA bounded vector.\nCreate an object through truncation.\nReturn a <code>BoundedSlice</code> with the content and bound of <code>Self</code>.\nGet the bound of the type in <code>usize</code>.\nSame as <code>Vec::resize</code>, but if <code>size</code> is more than <code>Self::bound</code>, …\nExactly the same semantics as <code>Vec::clear</code>.\nExact same semantics as <code>Vec::drain</code>.\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>s</code> into <code>self</code> truncating first if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nExactly the same semantics as <code>slice::get_mut</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume self, and return the inner <code>Vec</code>. Henceforth, the …\nReturns true of this collection is full.\nExactly the same semantics as <code>slice::iter_mut</code>.\nExactly the same semantics as <code>slice::last_mut</code>.\nCreate <code>Self</code> with no items.\nExactly the same semantics as <code>Vec::pop</code>.\nExactly the same semantics as <code>Vec::remove</code>.\nExactly the same semantics as <code>Vec::retain</code>.\nMove the position of an item from one location to another …\nExactly the same semantics as <code>slice::sort</code>.\nExactly the same semantics as <code>slice::sort_by</code>.\nExactly the same semantics as <code>slice::sort_by_key</code>.\nExactly the same semantics as <code>slice::swap_remove</code>.\nExactly the same semantics as <code>Vec::truncate</code>.\nCreate an object through truncation.\nConsume and truncate the vector <code>v</code> in order to create a new …\nCreate an instance from the first elements of the given …\nExactly the same semantics as <code>Vec::append</code>, but returns an …\nExactly the same semantics as <code>Vec::extend</code>, but returns an …\nExactly the same semantics as <code>Vec::insert</code>, but returns an …\nConsumes self and mutates self via the given <code>mutate</code> …\nExactly the same semantics as <code>Vec::push</code>, but returns an <code>Err</code>…\nExactly the same semantics as [<code>Vec::rotate_left</code>], but …\nExactly the same semantics as [<code>Vec::rotate_right</code>], but …\nPre-allocate <code>capacity</code> items in self.\nAllocate self with the maximum possible capacity.\nA weakly bounded vector.\nGet the bound of the type in <code>usize</code>.\nCreate <code>Self</code> from <code>t</code> without any checks. Logs warnings if …\nReturns the argument unchanged.\nExactly the same semantics as <code>slice::get_mut</code>.\nCalls <code>U::from(self)</code>.\nConsume self, and return the inner <code>Vec</code>. Henceforth, the …\nExactly the same semantics as <code>Vec::remove</code>.\nExactly the same semantics as <code>Vec::retain</code>.\nExactly the same semantics as <code>Vec::swap_remove</code>.\nExactly the same semantics as <code>Vec::insert</code>, but returns an …\nConsumes self and mutates self via the given <code>mutate</code> …\nExactly the same semantics as <code>Vec::push</code>, but returns an <code>Err</code>…")