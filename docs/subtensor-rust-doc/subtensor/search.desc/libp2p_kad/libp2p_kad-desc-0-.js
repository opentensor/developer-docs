searchState.loadedDescShard("libp2p_kad", 0, "Implementation of the libp2p-specific Kademlia protocol.\nThe <code>α</code> parameter of the Kademlia specification.\nA peer sent an add provider request. If filtering …\nA (repeated) query initiated by <code>Behaviour::start_providing</code>.\nThe query advertises the local node as a provider for the …\nThe context of a <code>QueryInfo::AddProvider</code> query.\nThe possible errors when publishing a provider record.\nThe successful result of publishing a provider record.\nThe phases of a <code>QueryInfo::AddProvider</code> query.\nThe result of publishing a provider record.\nA non-empty list of (unique) addresses of a peer in the …\n<code>Behaviour</code> is a <code>NetworkBehaviour</code> that implements the libp2p …\nThe result of <code>Behaviour::bootstrap</code>.\nA query initiated by <code>Behaviour::bootstrap</code>.\nThe error result of <code>Behaviour::bootstrap</code>.\nThe successful result of <code>Behaviour::bootstrap</code>.\nThe result of <code>Behaviour::bootstrap</code>.\nThe configurable strategies for the insertion of peers and …\nThe configuration for Kademlia “write-back” caching …\nSender was recently connected to peer.\nSender was recently connected to peer.\nSender tried to connect to peer but failed.\nSender tried to connect to peer but failed.\nThe configuration for the <code>Kademlia</code> behaviour.\nSender is currently connected to peer.\nThe node is considered connected.\nSender is currently connected to peer.\nStatus of our connection to a node reported by the …\nThe context is a custom store operation targeting specific …\nCaching is disabled and the peers closest to records being …\nCaching is disabled and the peers closest to records being …\nThe node is considered disconnected.\nUp to <code>max_peers</code> peers not returning a record that are …\nUp to <code>max_peers</code> peers not returning a record that are …\nA cloned, immutable view of an entry that is either …\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nThe events produced by the <code>Kademlia</code> behaviour.\nThe routing table update failed, either because the …\nWhenever a (provider) record is received, an event is …\nWhenever a (provider) record is received, an event is …\nRequest for the list of nodes whose IDs are the closest to …\nThe result of <code>Behaviour::get_closest_peers</code>.\nA (repeated) query initiated by …\nThe query is searching for the closest nodes to the record …\nThe query is searching for the closest nodes to the record …\nThe error result of <code>Behaviour::get_closest_peers</code>.\nThe successful result of <code>Behaviour::get_closest_peers</code>.\nThe result of <code>Behaviour::get_closest_peers</code>.\nSame as <code>FindNode</code>, but should also return the entries of …\nThe result of <code>Behaviour::get_providers</code>.\nA (repeated) query initiated by <code>Behaviour::get_providers</code>.\nThe error result of <code>Behaviour::get_providers</code>.\nThe successful result of <code>Behaviour::get_providers</code>.\nThe result of <code>Behaviour::get_providers</code>.\nRequest to retrieve a record.\nThe result of <code>Behaviour::get_record</code>.\nA (repeated) query initiated by <code>Behaviour::get_record</code>.\nThe error result of <code>Behaviour::get_record</code>.\nThe successful result of <code>Behaviour::get_record</code>.\nThe result of <code>Behaviour::get_record</code>.\nInformation about a received and handled inbound request.\nAn inbound request has been received and handled.\nAn inbound request has been received and handled.\nA distance between two keys in the DHT keyspace.\nA <code>Key</code> in the DHT keyspace with preserved preimage.\nA reference to a bucket.\nThe <code>k</code> parameter of the Kademlia specification.\nNew peers and addresses are only added to the routing …\nNew peers and addresses are only added to the routing …\nAn operation failed to due no known peers in the routing …\nThe status of a node in a bucket.\nSender hasn’t tried to connect to peer.\nSender hasn’t tried to connect to peer.\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nWhenever a connection to a peer is established as a result …\nWhenever a connection to a peer is established as a result …\nAn outbound query has made progress.\nAn outbound query has made progress.\nA record either received by the given peer or retrieved …\nThe peer and address is pending insertion into the routing …\nA connection to a peer has been established for whom a …\nA connection to a peer has been established for whom a …\nInformation about progress events.\nA record stored in the DHT whose value is the ID of a peer …\nThe context is a <code>Behaviour::start_providing</code> operation.\nThe context is a <code>Behaviour::put_record</code> operation.\nA peer sent a put record request. If filtering …\nThe result of <code>Behaviour::put_record</code>.\nA (repeated) query initiated by <code>Behaviour::put_record</code>.\nThe query is replicating the record to the closest nodes …\nThe context of a <code>QueryInfo::PutRecord</code> query.\nThe error result of <code>Behaviour::put_record</code>.\nThe successful result of <code>Behaviour::put_record</code>.\nThe phases of a <code>QueryInfo::PutRecord</code> query.\nThe result of <code>Behaviour::put_record</code>.\nUnique identifier for an active query.\nInformation about a running query.\nA mutable reference to a running query.\nAn immutable reference to a running query.\nThe results of Kademlia queries.\nExecution statistics of a query.\nA quorum w.r.t. the configured replication factor …\nA record stored in the DHT.\nThe (opaque) key of a record.\nThe context is periodic replication (i.e. without extending\nThe context is periodic republishing of provider …\nThe context is periodic republishing of records stored …\nThe result of a (automatic) republishing of a provider …\nThe result of a (automatic) republishing of a …\nA connection to a peer has been established for whom a …\nA connection to a peer has been established for whom a …\nThe possible outcomes of <code>Behaviour::add_address</code>.\nThe routing table has been updated with a new peer and / or\nThe routing table has been updated with a new peer and / or\nThe result of <code>Behaviour::start_providing</code>.\nThe configurable filtering strategies for the acceptance of\nThe given peer and address has been added to the routing …\nWhenever a (provider) record is received, the record is …\nWhenever a (provider) record is received, the record is …\nA peer has connected for whom no listen address is known.\nA peer has connected for whom no listen address is known.\nAdds a known listen address of a peer participating in the …\nThe known addresses that the provider may be listening on.\nBootstraps the local node to join the DHT.\nTests whether the given distance falls into this bucket.\nThe index into the event\nRequire iterative queries to use disjoint paths for …\nComputes the distance of the keys according to the XOR …\nGets the duration of the query.\nThe expiration time as measured by a local, monotonic …\nThe expiration time as measured by a local, monotonic …\nFinishes the query asap, without waiting for the regular …\nGets a reference to the first address in the list.\nReturns the uniquely determined key with the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns closest peers to the given key; takes peers from …\nInitiates an iterative query for the closest peers to the …\nPerforms a lookup for providers of a value to the given …\nPerforms a lookup for a record in the DHT.\nReturns true if the bucket has a pending node.\nReturns the integer part of the base 2 logarithm of the …\nGets information about the type and state of the query.\nGets information about the type and state of the query.\nAdds a new address to the end of the list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the key of the record for which the operation …\nExtracts the key of the record for which the operation …\nExtracts the key for which the operation failed, consuming …\nExtracts the key for which the operation failed, consuming …\nExtracts the key for which the operation failed,\nConverts the key into its preimage.\nConverts the addresses into a <code>Vec</code>.\nChecks whether the bucket is empty.\nChecks whether the record is expired w.r.t. the given …\nChecks whether the provider record is expired w.r.t. the …\nReturns an iterator over the entries in the bucket.\nReturns an iterator over the addresses.\nGets an iterator over immutable references to all running …\nGets an iterator over mutable references to all running …\nReturns the k-bucket for the distance to the given key.\nReturns an iterator over all non-empty buckets in the …\nGets the key of the record for which the operation failed.\nGets the key of the record for which the operation failed.\nGets the key for which the operation failed.\nGets the key for which the operation failed.\nGets the key for which the operation failed.\nKey of the record.\nThe key whose value is provided by the provider.\nIs this the final event?\nReturns the number of addresses in the list.\nMerges these stats with the given stats of another query, …\nCreates a new <code>Kademlia</code> network behaviour with a default …\nCreates a new key from the bytes of the input.\nCreates a new record for insertion into the DHT.\nCreates a new provider record for insertion into a …\nCreates a new list of addresses.\nConstructs a new <code>Key</code> by running the given value through a …\nThe node represented by the entry.\nReturns the number of entries in the bucket.\nGets the number of failed requests.\nGets the number of pending requests.\nGets the total number of requests initiated by the query.\nGets the number of successful requests.\nThe peer from whom the record was received. <code>None</code> if the …\nBorrows the preimage of the key.\nGet the protocol name of this kademlia instance.\nThe provider of the value for the key.\nThe (original) publisher of the record.\nStores a record in the DHT, locally as well as at the nodes\nStores a record at specific peers, without storing it …\nGets an immutable reference to a running query, if it …\nGets a mutable reference to a running query, if it exists.\nGenerates a random distance that falls into this bucket.\nReturns the minimum inclusive and maximum inclusive …\nRemoves the given address from the list.\nRemoves an address of a peer from the routing table.\nRemoves a peer from the routing table.\nRemoves the record with the given key from <em>local</em> storage, …\nReplaces an old address with a new address.\nSets the <code>Caching</code> strategy to use for successful lookups.\nSets the amount of time to keep connections alive when they…\nSets the k-bucket insertion strategy for the Kademlia …\nModifies the maximum allowed size of individual Kademlia …\nSet the <code>Mode</code> in which we should operate.\nSets the allowed level of parallelism for iterative …\nSets custom protocol names.\nSets the interval at which provider records for keys …\nSets the TTL for provider records.\nSets the (re-)publication interval of stored records.\nSets the timeout for a single query.\nSets whether or not records should be filtered before …\nSets the TTL for stored records.\nSets the replication factor to use.\nSets the (re-)replication interval for stored records.\nEstablishes the local node as a provider of a value for …\nGets execution statistics about the query.\nGets execution statistics about the query.\nThe status of the node.\nStops the local node from announcing that it is a provider …\nGets a mutable reference to the record store.\nCopies the bytes of the key into a new vector.\nValue of the record.\nCreates a new <code>Kademlia</code> network behaviour with the given …\nThe external addresses of the provider being advertised.\nQuery statistics from the finished <code>GetClosestPeers</code> phase.\nThe local peer ID that is advertised as a provider.\nThe full list of known addresses of <code>peer</code>.\nReturns the minimum inclusive and maximum inclusive …\nThe ID of the query that finished.\nWhether this is a new peer and was thus just added to the …\nThe ID of the peer that was evicted from the routing table …\nThe ID of the peer that was added or updated.\nThe intermediate result of the query.\nExecution statistics from the query.\nIndicates which event this is, if therer are multiple …\nThe new set of providers discovered.\nIf caching is enabled, these are the peers closest <em>to the </em>…\nThe full list of known addresses of <code>peer</code>.\nReturns the minimum inclusive and maximum inclusive …\nThe ID of the query that finished.\nWhether this is a new peer and was thus just added to the …\nThe ID of the peer that was evicted from the routing table …\nThe ID of the peer that was added or updated.\nThe intermediate result of the query.\nExecution statistics from the query.\nIndicates which event this is, if therer are multiple …\n<code>PeerId</code>s of the peers the record was successfully stored on.\n<code>PeerId</code>s of the peers the record was successfully stored on.\nQuery statistics from the finished <code>GetClosestPeers</code> phase.\nA list of peers the given record has been successfully …\nThe peers closest to the <code>key</code> that were queried but did not …\nThe execution context of the query.\nThe execution context of the query.\nDid we find at least one record?\nThe key being queried (the preimage).\nThe key for which to search for providers.\nThe record key.\nThe key to look for.\nThe targeted peer ID.\nThe current phase of the query.\nThe current phase of the query.\nThe number of providers found so far.\nThe expected quorum of responses w.r.t. the replication …\nThe remaining random peer IDs to query, one per bucket …\nCurrent index of events.\nCurrent index of events.\nCurrent index of events.\nThe (opaque) key of a record.\nA record stored in the DHT whose value is the ID of a peer …\nA record stored in the DHT.\nThe known addresses that the provider may be listening on.\nThe expiration time as measured by a local, monotonic …\nThe expiration time as measured by a local, monotonic …\nKey of the record.\nThe key whose value is provided by the provider.\nThe provider of the value for the key.\nThe (original) publisher of the record.\nValue of the record.\nContains the error value\nThe possible errors of a <code>RecordStore</code> operation.\nThe store is at capacity w.r.t. the total number of stored …\nThe store is at capacity w.r.t. the total number of stored …\nIn-memory implementation of a <code>RecordStore</code>.\nConfiguration for a <code>MemoryStore</code>.\nContains the success value\nTrait for types implementing a record store.\nThe result of an operation on a <code>RecordStore</code>.\nThe store cannot store this value because it is too large.\nAdds a provider record to the store.\nGets a record from the store, given its key.\nThe maximum number of provider records for which the local …\nThe maximum number of providers stored for a key.\nThe maximum number of records.\nThe maximum size of record values, in bytes.\nGets an iterator over all stored provider records for …\nGets a copy of the stored provider records for the given …\nPuts a record into the store.\nGets an iterator over all (value-) records currently …\nRemoves the record with the given key from the store.\nRemoves a provider record from the store.\nContains the error value\nThe possible errors of a <code>RecordStore</code> operation.\nThe store is at capacity w.r.t. the total number of stored …\nThe store is at capacity w.r.t. the total number of stored …\nIn-memory implementation of a <code>RecordStore</code>.\nConfiguration for a <code>MemoryStore</code>.\nContains the success value\nTrait for types implementing a record store.\nThe result of an operation on a <code>RecordStore</code>.\nThe store cannot store this value because it is too large.\nAdds a provider record to the store.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a record from the store, given its key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum number of provider records for which the local …\nThe maximum number of providers stored for a key.\nThe maximum number of records.\nThe maximum size of record values, in bytes.\nCreates a new <code>MemoryRecordStore</code> with a default …\nGets an iterator over all stored provider records for …\nGets a copy of the stored provider records for the given …\nPuts a record into the store.\nGets an iterator over all (value-) records currently …\nRemoves the record with the given key from the store.\nRemoves a provider record from the store.\nRetains the records satisfying a predicate.\nCreates a new <code>MemoryRecordStore</code> with the given …")