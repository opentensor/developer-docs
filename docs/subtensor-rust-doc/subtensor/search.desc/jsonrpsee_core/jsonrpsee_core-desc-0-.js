searchState.loadedDescShard("jsonrpsee_core", 0, "Shared utilities for <code>jsonrpsee</code>.\nRepresents a JSON array.\nRepresents a JSON boolean.\nBorrowed data.\nType erased error.\nA clone-on-write smart pointer.\nA data structure that can be deserialized without …\nEmpty server <code>RpcParams</code> type to use while registering …\nContains the error value\nContains the error value\nReference to a range of bytes encompassing a single valid …\nRepresents any valid JSON value.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nContains the success value\nContains the success value\nOwned data.\nJSON-RPC result.\nA <strong>data structure</strong> that can be serialized into any data …\nRepresents a JSON string.\nThe return type if the subscription wants to return <code>Result</code>.\nTen megabytes.\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Value</code> is an integer, represent it as u64 if …\nShared utilities for <code>jsonrpsee</code> clients.\nCreates an owned Cow&lt;’a, B&gt; with the default value for …\nError type.\nDisplay a JSON value as a string.\nCreates a clone-on-write pointer from a reference to …\nConverts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …\nReturns the argument unchanged.\nCreates a clone-on-write pointer from a reference to <code>Path</code>.\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.\nCreates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to an …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.\nConverts a <code>String</code> reference into a <code>Borrowed</code> variant. No …\nConverts a <code>String</code> into an <code>Owned</code> variant. No heap …\nConverts the string reference into a <code>Cow::Borrowed</code>.\nConverts the string reference into a <code>Cow::Borrowed</code>.\nMoves the string into a <code>Cow::Owned</code>.\nConverts a <code>CString</code> into an owned <code>Cow</code> without copying or …\nConverts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …\nConverts a string slice into a <code>Borrowed</code> variant. No heap …\nCreates a clone-on-write pointer from an owned instance of …\nReturns the argument unchanged.\nConvert map (with string keys) to <code>Value::Object</code>.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nConvert a slice to <code>Value::Array</code>.\nConvert <code>()</code> to <code>Value::Null</code>.\nConvert <code>Number</code> to <code>Value::Number</code>.\nConvert copy-on-write string to <code>Value::String</code>.\nConvert string slice to <code>Value::String</code>.\nConvert <code>String</code> to <code>Value::String</code>.\nConvert boolean to <code>Value::Bool</code>.\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nCreate a <code>Value::Object</code> by collecting an iterator of …\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nConvert an owned <code>String</code> of JSON data to an owned <code>RawValue</code>.\nAccess the JSON text underlying a raw value.\nIndex into a JSON array or map. A string index can be used …\nMutably index into a JSON array or map. A string index can …\nShared HTTP utilities.\nSubscription ID providers.\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the owned data.\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nReturns true if the data is borrowed, i.e. if <code>to_mut</code> would …\nReturns true if the <code>Value</code> is a number that can be …\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nReturns true if the data is owned, i.e. if <code>to_mut</code> would be …\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if the <code>Value</code> is an integer between zero and …\nRPC Parameters. RPC parameters.\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nConvert the given values to a <code>crate::params::ArrayParams</code> …\nSerialize this value into the given Serde serializer.\nShared modules for the JSON-RPC servers.\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …\nConvert a <code>T</code> into a boxed <code>RawValue</code>.\nConvert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …\nAcquires a mutable reference to the owned form of the data.\nShared tracing helpers to trace RPC calls.\nTraits\nRepresent a single entry in a batch response.\nBatch response.\nIncoming packet contains bytes.\nJSON-RPC client interface that can make requests and …\nThe connection was closed.\nContains the error value\nError that may occur during receiving a message.\nError that may occur during sending a message.\nJSON-RPC request object id data type.\nThe subscription could not keep up with the server.\nMarker trait to determine whether a type implements <code>Send</code> …\nGet notifications based on method name.\nNumber.\nContains the success value\nIncoming <code>Pong</code> frame as a reply to a previously submitted …\nMessage type received from the RPC server. It can either …\nKeep track of request IDs.\nString.\nRepresent a client-side subscription which is implemented …\nGet notifications based on Subscription ID.\nJSON-RPC client interface that can make requests, …\nThe reason why the subscription was closed.\nSubscription kind\nIncoming packet contains plain <code>String</code> data.\nTransport interface to receive data asynchronous.\nTransport interface to send data asynchronous.\nGet a handle to the <code>IdKind</code>.\nSend a batch request.\nThis is optional because it’s most likely relevant for …\nThe reason why the subscription was closed.\nError type for client(s).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a range of IDs to be used in a batch request.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate an <code>Id</code> from number.\nReturns <code>Ok(iterator)</code> if all responses were successful …\nIs empty.\nReturns an iterator over all responses.\nReturn the subscription type and, if applicable, ID.\nGet the length of the batch response.\nCreate a new <code>RequestIdGuard</code> with the provided concurrency …\nCreate a new <code>BatchResponse</code>.\nReturns the next notification from the stream. This may …\nAttempts to get the next request ID.\nSend a notification request\nGet the number of failed calls in the batch.\nGet the number of successful calls in the batch.\nSimilar to <code>BatchResponse::into_ok</code> but takes the responses …\nReceive.\nSend a method call request.\nSend.\nThis is optional because it’s most likely relevant for …\nInitiate a subscription by performing a JSON-RPC method …\nRegister a method subscription, this is used to filter …\nUnsubscribe and consume the subscription.\nJSON-RPC error which can occur when a JSON-RPC call fails.\nCustom error.\nEmpty batch request.\nError type.\nNot implemented for HTTP clients.\nInvalid request ID.\nInvalid subscription ID.\nFailed to parse the data.\nThe error returned when registering a method or …\nRequest timeout\nThe background task has been terminated.\nNetworking error or error on the low-level protocol layer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMethod was already registered.\nMethod with that name has not yet been registered.\nThe error returned when registering a method or …\nA type that returns the error as a <code>String</code> from …\nSubscribe and unsubscribe method names are the same.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault HTTP body used by jsonrpsee.\nRepresents error that can when reading with a HTTP body.\nMalformed request\nHTTP request type.\nHTTP response type.\nRepresents error that can happen when dealing with HTTP …\nThe HTTP message was too large.\nCreate an empty body.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new body.\nRead data from a HTTP body and return the data if it is …\nReturns a string value when there is exactly one value for …\nReturns an iterator of all values for a given a header name\nNo-op implementation to be used for servers that don’t …\nGenerates random integers as subscription ID.\nGenerates random strings of length <code>len</code> as subscription ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new random string provider.\nParameter builder that serializes plain value parameters …\nRequest builder that serializes RPC parameters to …\nError representing an empty batch request.\nParameter builder that serializes named value parameters …\nFinish the building process and return a valid batch …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a named value (key, value) pair into the builder. …\nInsert a plain value into the builder.\nInserts the RPC method with provided parameters into the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an iterator over the batch request.\nConstruct a new <code>ObjectParams</code>.\nConstruct a new <code>ArrayParams</code>.\nConstruct a new <code>BatchRequestBuilder</code>.\nFuture of a value\nAsynchronous method handler.\nSimilar to <code>SyncMethod</code>, but represents an asynchronous …\nSerialized batch response.\nBuilder to build a <code>BatchResponse</code>.\nThis wraps <code>tokio::sync::Semaphore</code> and is used to limit the …\nTreat it as ordinary call.\nThis represent a response to a RPC call and <code>Subscribe</code> …\nThe connection channel is closed.\nThe connection channel is closed.\nThe connection was closed.\nComplete JSON message.\nConnection ID.\nError that may occur during <code>crate::server::MethodSink::send</code>…\nThe response was the wrong kind such an error response when\nA type map of protocol extensions.\nThe connection channel is full.\nSomething that can be converted into a JSON-RPC method …\nConvert something into a subscription close notification …\nInvalid subscription ID.\nRepresents a subscription until it is unsubscribed.\nSpecific JSON-RPC error.\nThe response was a JSON-RPC error.\nMax response size.\nMethod call.\nCallback wrapper that can be either sync or async.\nThe kind of the JSON-RPC method call, it can be a …\nRepresents a response to a method call.\nMethod response error.\nFuture that resolves when the method response has been …\nSends a message once the method response has been …\nResult of a method, either direct value or a future of one.\nReference-counted, clone-on-write collection of …\nThe error that can occur when <code>Methods::call</code> or …\nNeed subscription ID and method name.\nNo further message will be sent.\nThe method was not found.\nSend a subscription notification.\nSend a subscription error notification\nA message that that tells whether notification was …\nThe response was succesfully processed.\nOutput.\nFailed to parse the call as valid JSON-RPC.\nThe error returned while accepting a subscription.\nRepresents a single subscription that is waiting to be …\nRaw response from an RPC A tuple containing:\nSimilar to <code>jsonrpsee_types::ResponsePayload</code> but possible …\nSets of JSON-RPC methods can be organized into “module“…\nError that may occur during …\nType-alias for subscribers.\nWrapper struct that maintains a subscription “mainly” …\nSubscription method handler.\nSubscription Call.\nThe subscription callback itself sends back the result so …\nRepresents what action that will sent when a subscription …\nRepresent a unique subscription entry based on …\nSubscription message.\nA complete subscription message or partial subscription …\nMethod callback for subscriptions.\nSubscription permit.\nRepresents a single subscription that hasn’t been …\nHelper struct to manage subscriptions.\nResult by value\nSynchronous method handler.\nA <code>MethodCallback</code> is an RPC endpoint, callable with a …\nThe data could not be sent because the timeout elapsed …\nError that may occur during …\nUnsubscription method handler.\nUnsubscription Call.\nAttempt to accept the subscription and respond the …\nAttempts to acquire a subscription slot.\nAppend a result from an individual method to the batch …\nGet the error code\nExtract the JSON-RPC response.\nGet a reference to the serialized response.\nCreate a JSON-RPC error response.\nHelper to call a method on the <code>RPC module</code> without having …\nGet the capacity of the channel.\nGet the capacity of the subscription.\nClear the <code>Extensions</code> of all inserted extensions.\nClose the subscription channel.\nCompletes when the subscription has been closed.\nConnection ID\nReturns connection identifier, which was used to perform …\nGet the connection ID.\nCreate a <code>MethodResponse</code> from a JSON-RPC error.\nCreate an error response payload.\nCreate a borrowd error response payload.\nExtends <code>self</code> with another <code>Extensions</code>.\nReturns a reference to the associated extensions.\nSimilar to <code>Methods::extensions_mut</code> but it’s immutable.\nReturns a reference to the associated extensions.\nGet a mutable reference to the extensions to add or remove …\nFinish the batch response\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new module from an already shared <code>Context</code>.\nCreate a method response from <code>BatchResponse</code>.\nCreate a new subscription message from JSON.\nGet a reference to a type previously inserted on this …\nGet a mutable reference to a type previously inserted on …\nGet a mutable reference to a type, inserting <code>value</code> if not …\nGet a mutable reference to a type, inserting the type’s …\nGet a mutable reference to a type, inserting the value …\nHelpers.\nID provider.\nInsert a type into this <code>Extensions</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the response payload into owned.\nConsume the method response and extract the parts.\nConvert something into a subscription response\nSomething that can be converted into a JSON-RPC method …\nExtract the JSON-RPC response.\nConsume the method response and extract the serialized …\nReturns whether the response is a batch response.\nReturns whether the subscription is closed.\nCheck if the batch is empty.\nCheck whether the extension set is empty or not.\nReturns whether the call failed.\nReturns whether the response is a method response.\nReturns whether the response is a subscription response.\nReturns whether the call was successful.\nReturns true if the unsubscribe method has been invoked or …\nGet the numer of extensions available.\nGet the maximum number of permitted subscriptions.\nGet the max capacity of the channel.\nGet the max capacity of the subscription.\nMerge two <code>Methods</code>’s by adding all <code>MethodCallback</code>s from …\nReturns the method callback.\nGet the method name.\nGet the method name.\nReturns an <code>Iterator</code> with all the method names registered …\nReturns the method callback along with its name. The …\nCreate a subscription message this is more efficient than …\nCreate a new bounded subscription.\nCreate a new module with a given shared <code>Context</code>.\nCreates a new empty <code>Methods</code>.\nCreate an empty <code>Extensions</code>.\nCreate a new batch response builder with limit.\nReceives the next value on the subscription if the value …\nSend a notify message.\nConsumes the <code>ResponsePayload</code> and produces new …\nMake a request (JSON-RPC method call or subscription) by …\nRegister an alias for an existing_method. Alias uniqueness …\nRegister a new asynchronous RPC method, which computes the …\nRegister a new <strong>blocking</strong> synchronous RPC method, which …\nRegister a new synchronous RPC method, which computes the …\nRegister a new publish/subscribe interface using JSON-RPC …\nSimilar to <code>RpcModule::register_subscription</code> but a little …\nReject the subscription by responding to the subscription …\nRemove a type from this <code>Extensions</code>.\nTransform a module into an <code>RpcModule&lt;()&gt;</code> (unit context).\nRemoves the method if it exists.\nCreate a new method response.\nSend out a response on the subscription and wait until …\nSimilar to <code>SubscriptionSink::send</code> but only waits for a …\nSimilar to <code>Methods::subscribe_unbounded</code> but it’s using a …\nHelper to create a subscription on the <code>RPC module</code> without …\nThis is similar to <code>MethodResponse::error</code> but sets a flag …\nGet the subscription ID.\nGet the subscription ID\nSubscription limit\nThis is similar to <code>MethodResponse::response</code> but sets a …\nCreate a successful owned response payload.\nCreate a successful borrowed response payload.\nExtract the serialized response as a String.\nAttempts to immediately send out the message as JSON …\nWrapper over <code>tokio::sync::mpsc::Sender::closed</code>\nInserts the method callback for a given name, or returns …\nVerifies that the method name is not already taken, and …\nConsumes the method response and returns a new one with …\nBounded writer that allows writing at most <code>max_len</code> bytes.\nSink that is used to send back the result to the server …\nGet the capacity of the channel.\nSame as <code>tokio::sync::mpsc::Sender::closed</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWaits for there to be space on the return channel.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the writer and extract the written bytes.\nReturns whether this channel is closed without needing a …\nGet the max capacity of the channel.\nGet the max response size.\nCreate a new bounded writer.\nCreate a new <code>MethodSink</code> with unlimited response size.\nCreate a new <code>MethodSink</code> with a limited response size.\nFigure out if this is a sufficiently complete request that …\nAsync send which will wait until there is space in channel …\nSend a JSON-RPC error to the client\nSimilar to <code>MethodSink::send</code> but only waits for a limited …\nAttempts to send out the message immediately and fails if …\nLogging with jsonrpsee client target.\nLogging with jsonrpsee server target.\nHelper for writing trace logs from bytes.\nHelper for writing trace logs from JSON.\nHelper for writing trace logs from str.\nHelper for writing trace logs from JSON.\nHelper for writing trace logs from str.\nHelper for writing trace logs from bytes.\nHelper for writing trace logs from JSON.\nHelper for writing trace logs from str.\nHelper for writing trace logs from JSON.\nHelper for writing trace logs from str.\nTrait to generate subscription IDs.\nMarker trait for types that can be serialized as JSON …\nReturns the next ID for the subscription.\nConsume and serialize the type as a JSON raw value.")