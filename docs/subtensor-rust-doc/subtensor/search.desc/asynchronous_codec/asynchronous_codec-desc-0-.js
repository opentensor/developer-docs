searchState.loadedDescShard("asynchronous_codec", 0, "Utilities for encoding and decoding frames using …\nA cheaply cloneable and sliceable chunk of contiguous …\nA simple codec that ships bytes around\nA unique reference to a contiguous slice of memory.\nDecoding of frames via buffers, for use with <code>FramedRead</code>.\nEncoding of messages as bytes, for use with <code>FramedWrite</code>.\nThe type of decoding errors.\nThe type of encoding errors.\nA unified <code>Stream</code> and <code>Sink</code> interface to an underlying I/O …\nThe parts obtained from <code>Framed::into_parts</code>.\nA <code>Stream</code> of messages decoded from an <code>AsyncRead</code>.\nThe parts obtained from (FramedRead::into_parts).\nA <code>Sink</code> of frames encoded to an <code>AsyncWrite</code>.\nThe parts obtained from <code>FramedWrite::into_parts</code>.\nThe type of items returned by <code>decode</code>\nThe type of items consumed by <code>encode</code>\nA simple <code>Codec</code> implementation sending your data by …\nA simple <code>Codec</code> implementation that splits up data into …\nThe buffer of data that has been read from <code>io</code> but not yet …\nThe framed data that has been buffered but not yet flushed …\nReturns the number of bytes the <code>BytesMut</code> can hold without …\nClears the buffer, removing all data.\nClears the buffer, removing all data. Existing capacity is …\nReturns a reference to the underlying codec wrapped by …\nThe codec used for encoding and decoding frames.\nReturns a mutable reference to the underlying codec …\nCreates <code>Bytes</code> instance from slice, by copying it.\nDecode an item from the src <code>BytesMut</code> into an item\nCalled when the input stream reaches EOF, signaling a last …\nCalled when the input stream reaches EOF, signaling a last …\nReturns a reference to the underlying decoder.\nThe frame decoder.\nReturns a mutable reference to the underlying decoder.\nEncodes an item into the <code>BytesMut</code> provided by dst.\nReturns a reference to the underlying encoder.\nThe frame encoder.\nReturns a mutable reference to the underlying encoder.\nAppends given bytes to this <code>BytesMut</code>.\nConverts <code>self</code> into an immutable <code>Bytes</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert self into <code>BytesMut</code>.\nReturns the argument unchanged.\nCreates a new <code>Framed</code> from <code>FramedParts</code>.\nCreates a new <code>FramedRead</code> from <code>FramedReadParts</code>.\nCreates a new <code>FramedWrite</code> from <code>FramedWriteParts</code>.\nCreates a new <code>Bytes</code> from a static slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Framed</code>, returning its underlying I/O stream.\nConsumes the <code>FramedRead</code>, returning its underlying I/O …\nConsumes the <code>FramedWrite</code>, returning its underlying I/O …\nConsumes the <code>Framed</code>, returning its parts, such that a new …\nConsumes the <code>FramedRead</code>, returning its parts such that a …\nConsumes the <code>FramedWrite</code>, returning its parts such that a …\nThe underlying I/O stream.\nThe underlying I/O stream.\nThe underlying I/O stream.\nReturns true if the <code>Bytes</code> has a length of 0.\nReturns true if the <code>BytesMut</code> has a length of 0.\nReturns true if this is the only reference to the data.\nReturns the number of bytes contained in this <code>Bytes</code>.\nReturns the number of bytes contained in this <code>BytesMut</code>.\nChanges the codec used in this <code>FramedParts</code>.\nChanges the decoder in <code>FramedReadParts</code>.\nChanges the encoder used in <code>FramedWriteParts</code>.\nCreates a new empty <code>Bytes</code>.\nCreates a new <code>Framed</code> transport with the given codec. A …\nCreates a new <code>FramedRead</code> transport with the given <code>Decoder</code>.\nCreates a new <code>FramedWrite</code> transport with the given <code>Encoder</code>.\nCreates a new <code>BytesMut</code> with default capacity.\nReturns a reference to the read buffer.\nReturns a reference to the read buffer.\nThe remaining read buffer, containing data that has been …\nReserves capacity for at least <code>additional</code> more bytes to be …\nResizes the buffer so that <code>len</code> is equal to <code>new_len</code>.\nHigh-water mark for writes, in bytes\nHigh-water mark for writes, in bytes\nSets the length of the buffer.\nSets high-water mark for writes, in bytes\nSets high-water mark for writes, in bytes\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nReturns the remaining spare capacity of the buffer as a …\nRemoves the bytes from the current view, returning them in …\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the buffer into two at the given index.\nShortens the buffer, keeping the first <code>len</code> bytes and …\nShortens the buffer, keeping the first <code>len</code> bytes and …\nTry to convert self into <code>BytesMut</code>.\nAttempts to cheaply reclaim already allocated capacity for …\nAbsorbs a <code>BytesMut</code> that was previously split off.\nCreates a new <code>BytesMut</code> with the specified capacity.\nThe remaining write buffer, containing framed data that …\nCreates a new <code>BytesMut</code> containing <code>len</code> zeros.")