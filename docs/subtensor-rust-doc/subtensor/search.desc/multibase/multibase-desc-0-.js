searchState.loadedDescShard("multibase", 0, "multibase\nList of types currently supported in the multibase spec.\nBase10 (alphabet: 0123456789).\nBase16 lower hexadecimal (alphabet: 0123456789abcdef).\nBase16 upper hexadecimal (alphabet: 0123456789ABCDEF).\nBase2 (alphabet: 01).\nBase32hex, rfc4648 no padding (alphabet: …\nBase32hex, rfc4648 with padding (alphabet: …\nBase32hex, rfc4648 with padding (alphabet: …\nBase32hex, rfc4648 no padding (alphabet: …\nBase32, rfc4648 no padding (alphabet: …\nBase32, rfc4648 with padding (alphabet: …\nBase32, rfc4648 with padding (alphabet: …\nBase32, rfc4648 no padding (alphabet: …\nz-base-32 (used by Tahoe-LAFS) (alphabet: …\nBase36, [0-9a-z] no padding (alphabet: …\nBase36, [0-9A-Z] no padding (alphabet: …\nBase58 bitcoin (alphabet: …\nBase58 flicker (alphabet: …\nBase64, rfc4648 no padding (alphabet: …\nBase64, rfc4648 with padding (alphabet: …\nBase64 url, rfc4648 no padding (alphabet: …\nBase64 url, rfc4648 with padding (alphabet: …\nBase8 (alphabet: 01234567).\nContains the error value\nError types\n8-bit binary (encoder and decoder keeps data unmodified).\nInvalid string.\nContains the success value\nType alias to use this library’s <code>Error</code> type in a <code>Result</code>.\nUnknown base code.\nGet the code corresponding to the base algorithm.\nDecode the base string.\nDecode the base string.\nEncode with the given byte slice to base string.\nEncode the given byte slice to base string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a number to the matching base algorithm, or <code>Error</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")