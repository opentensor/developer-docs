searchState.loadedDescShard("schnellru", 0, "A fast and flexible LRU map\nA limiter for a map which is limited by the number of …\nA limiter for a map which is limited by memory usage.\nThe default hasher used by the LRU map.\nA drain iterator for the LRU map.\nAn iterator for the LRU map.\nAn mutable iterator for the LRU map, values are mutable.\nThe type of the key to be inserted into the map.\nA trait used to customize the behavior and the limits of …\nThe type used to hold the links between the nodes inside …\nAn LRU hash map.\nThe default hash builder used by the LRU map.\nA limiter for a map which can hold an unlimited number of …\nA limiter for a map which can hold an unlimited** number …\nClears the map.\nDrains the map of all of its elements in the most recently …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value for a given key and …\nReturns a reference to the value for a given <code>hash</code> and for …\nTries to get the value for a given <code>key</code> or insert a new …\nSame as <code>Self::get_or_insert</code>, just with a fallible callback.\nReturns the current guaranteed capacity of the map.\nInserts a new element into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the map is empty or not.\nChecks whether any of the elements must be popped.\nAn iterator over all of the elements in the most recently …\nA mutable iterator over all of the elements in the most …\nReturns the number of elements in the map.\nReturns a reference to the map’s limiter.\nReturns a mutable reference to the map’s limiter.\nReturns the max length.\nReturns the max memory usage.\nReturns the current memory usage of the map, in bytes.\nReturns an estimated memory usage this map will have with …\nCreates a new length limiter with a given <code>max_length</code>.\nCreates a new memory usage limiter with a given limit in …\nCreates a new empty map with a given <code>limiter</code>.\nCalled <em>after</em> the map is cleared.\nCalled <em>before</em> the map is resized.\nCalled <em>before</em> a node is inserted into the map.\nCalled <em>after</em> an element is removed from the map.\nCalled <em>before</em> a value is replaced inside of the map.\nReturns a reference to the value for a given key. Does not …\nReturns a reference to the value for a given <code>hash</code> and for …\nReturns a mutable reference to the value for a given <code>hash</code> …\nReturns a mutable reference to the value for a given key. …\nReturns the most recently used (inserted or accessed) …\nReturns the least recently used (inserted or accessed) …\nRemoves the most recently accessed element and returns it.\nRemoves the least recently accessed element and returns it.\nRemoves an element from the map.\nEnsures that at least <code>additional</code> items can be inserted …\nCreates a new map with a given <code>limiter</code> and <code>hasher</code>.\nCreates a new empty map with a given <code>memory_budget</code>.\nCreates a new empty map with a given <code>memory_budget</code> and …\nCreates a new empty map with a given <code>limiter</code> and a …")