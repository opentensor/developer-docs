searchState.loadedDescShard("mockall", 0, "A powerful mock object library for Rust.\nTrait for generically evaluating a type against a …\n<code>Predicate</code> extension that adds boolean logic.\n<code>Predicate</code> extension for boxing a <code>Predicate</code>.\n<code>Predicate</code> extension adapting a <code>slice</code> Predicate.\n<code>Predicate</code> extension adapting a <code>str</code> Predicate.\nUsed to enforce that mock calls must happen in the …\nCompute the logical AND of two <code>Predicate</code> results, …\nAutomatically generate mock types for structs and traits.\nReturns a <code>BoxPredicate</code> wrapper around this <code>Predicate</code> type.\nDecorates a method or function to tell Mockall to treat …\nExecute this <code>Predicate</code> against <code>variable</code>, returning the …\nExamples of Mockall’s generated code\nFind a case that proves this predicate as <code>expected</code> when …\nReturns the argument unchanged.\nReturns a <code>FileContentPredicate</code> that adapts <code>Self</code> to a file …\nReturns a <code>Utf8Predicate</code> that adapts <code>Self</code> to a <code>[u8]</code> …\nCalls <code>U::from(self)</code>.\nManually mock a structure.\nCreate a new empty <code>Sequence</code>\nCompute the logical NOT of a <code>Predicate</code>, returning the …\nCompute the logical OR of two <code>Predicate</code> results, returning …\nPredicate factories\nReturns a <code>TrimPredicate</code> that ensures the data passed to …\nA trait implemented by a Struct we want to mock\nMock of a basic trait with several kinds of method.\nMock of a struct\nMock of a basic trait with several kinds of method.\nSome trait method\nA static method\nA static method\nCreate a <code>Context</code> for mocking the <code>bang</code> method\nA method returning a reference\nA method returning a reference\nA method returning a mutable reference\nA method returning a mutable reference\nA method returning a <code>&#39;static</code> reference\nA method returning a <code>&#39;static</code> reference\nValidate that all current expectations for all methods have\nValidate that all current expectations for all methods have\nCreate an <code>Expectation</code> for mocking the <code>bah</code> method\nCreate an <code>Expectation</code> for mocking the <code>bar</code> method\nCreate an <code>Expectation</code> for mocking the <code>baz</code> method\nCreate an <code>Expectation</code> for mocking the <code>bean</code> method\nCreate an <code>Expectation</code> for mocking the <code>foo</code> method\nA module full of foreign C functions.\nA method with a <code>&#39;static</code> return type\nA method with a <code>&#39;static</code> return type\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMock version of the <code>ffi</code> module\nMock version of the <code>my_module</code> module\nMock this entire module\nCreate a new mock object with no expectations.\nCreate a new mock object with no expectations.\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nManages the context for expectations of static methods.\nExpectation type for methods that return a <code>&#39;static</code> type. …\nLike an <code>&amp;Expectation</code> but protected by a Mutex guard.  …\nVerify that all current expectations for this method are …\nCreate a new expectation for this method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nJust like <code>Expectation::in_sequence</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nJust like <code>Expectation::never</code>\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nJust like <code>Expectation::once</code>\nReturn a constant value from the <code>Expectation</code>\nJust like <code>Expectation::return_const</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nJust like <code>Expectation::return_const_st</code>\nSupply an <code>FnOnce</code> closure that will provide the return …\nJust like <code>Expectation::return_once</code>\nSingle-threaded version of <code>return_once</code>.  This is useful for\nJust like <code>Expectation::return_once_st</code>\nSupply a closure that will provide the return value for …\nJust like <code>Expectation::returning</code>\nSingle-threaded version of <code>returning</code>. Can be used when the …\nJust like <code>Expectation::returning_st</code>\nRestrict the number of times that that this method may be …\nJust like <code>Expectation::times</code>\nSet matching criteria for this Expectation.\nJust like <code>Expectation::with</code>\nSet a matching function for this Expectation.\nJust like <code>Expectation::withf</code>\nSingle-threaded version of <code>withf</code>. Can be used when the …\nJust like <code>Expectation::withf_st</code>\nExpectation type for methods taking a <code>&amp;self</code> argument and …\nCall this <code>Expectation</code> as if it were the real method.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a reference to a constant value from the <code>Expectation</code>\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods taking a <code>&amp;mut self</code> argument …\nSimulating calling the real method for this expectation\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nConvenience method that can be used to supply a return …\nSupply a closure that the <code>Expectation</code> will use to create …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nA foreign “C” function.\nVerify that all current expectations for every function in …\nA foreign “C” function.\nCreate a <code>Context</code> for mocking the <code>ffi_func</code> method\nManages the context for expectations of static methods.\nExpectation type for methods that return a <code>&#39;static</code> type. …\nLike an <code>&amp;Expectation</code> but protected by a Mutex guard.  …\nVerify that all current expectations for this method are …\nCreate a new expectation for this method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nJust like <code>Expectation::in_sequence</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nJust like <code>Expectation::never</code>\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nJust like <code>Expectation::once</code>\nReturn a constant value from the <code>Expectation</code>\nJust like <code>Expectation::return_const</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nJust like <code>Expectation::return_const_st</code>\nSupply an <code>FnOnce</code> closure that will provide the return …\nJust like <code>Expectation::return_once</code>\nSingle-threaded version of <code>return_once</code>.  This is useful for\nJust like <code>Expectation::return_once_st</code>\nSupply a closure that will provide the return value for …\nJust like <code>Expectation::returning</code>\nSingle-threaded version of <code>returning</code>. Can be used when the …\nJust like <code>Expectation::returning_st</code>\nRestrict the number of times that that this method may be …\nJust like <code>Expectation::times</code>\nSet matching criteria for this Expectation.\nJust like <code>Expectation::with</code>\nSet a matching function for this Expectation.\nJust like <code>Expectation::withf</code>\nSingle-threaded version of <code>withf</code>. Can be used when the …\nJust like <code>Expectation::withf_st</code>\nVerify that all current expectations for every function in …\nA function in a mocked module\nCreate a <code>Context</code> for mocking the <code>modfunc</code> method\nManages the context for expectations of static methods.\nExpectation type for methods that return a <code>&#39;static</code> type. …\nLike an <code>&amp;Expectation</code> but protected by a Mutex guard.  …\nVerify that all current expectations for this method are …\nCreate a new expectation for this method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nJust like <code>Expectation::in_sequence</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nForbid this expectation from ever being called.\nJust like <code>Expectation::never</code>\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nJust like <code>Expectation::once</code>\nReturn a constant value from the <code>Expectation</code>\nJust like <code>Expectation::return_const</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nJust like <code>Expectation::return_const_st</code>\nSupply an <code>FnOnce</code> closure that will provide the return …\nJust like <code>Expectation::return_once</code>\nSingle-threaded version of <code>return_once</code>.  This is useful for\nJust like <code>Expectation::return_once_st</code>\nSupply a closure that will provide the return value for …\nJust like <code>Expectation::returning</code>\nSingle-threaded version of <code>returning</code>. Can be used when the …\nJust like <code>Expectation::returning_st</code>\nRestrict the number of times that that this method may be …\nJust like <code>Expectation::times</code>\nSet matching criteria for this Expectation.\nJust like <code>Expectation::with</code>\nSet a matching function for this Expectation.\nJust like <code>Expectation::withf</code>\nSingle-threaded version of <code>withf</code>. Can be used when the …\nJust like <code>Expectation::withf_st</code>\nA function in a mocked module\nCreates a new <code>Predicate</code> that always returns <code>true</code>.\nCreates a new predicate that will return <code>true</code> when the …\n<code>f64</code> Predicate factories\nCreates a new predicate that wraps over the given …\nCreates a new predicate that will return <code>true</code> when the …\nCreates a new predicate that will return <code>true</code> when the …\nCreates a new predicate that will return <code>true</code> when the …\nCreates a new predicate that will return <code>true</code> when the …\nCreates a new predicate that will return <code>true</code> when the …\nCreates a new predicate that will return <code>true</code> when the …\nCreates a new predicate that will return <code>true</code> when the …\nCreates a new <code>Predicate</code> that always returns <code>false</code>.\n<code>Path</code> Predicate factories\n<code>str</code> Predicate factories\nCreates a new <code>Predicate</code> that ensures complete equality\nCreates a new <code>Predicate</code> that ensures the path exists.\nCreates a new <code>Predicate</code> that ensures the path points to a …\nCreates a new <code>Predicate</code> that ensures the path points to a …\nCreates a new <code>Predicate</code> that ensures the path points to a …\nCreates a new <code>Predicate</code> that ensures the path doesn’t …\nCreates a new <code>Predicate</code> that ensures a str contains <code>pattern</code>\nCreates a new <code>Predicate</code> that ensures a str ends with …\nCreates a new <code>Predicate</code> that ensures a str is empty\nCreates a new <code>Predicate</code> that ensures a str starts with …")