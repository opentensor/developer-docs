searchState.loadedDescShard("netlink_packet_route", 0, "A raw Netlink buffer that provides getters and setter for …\nA Netlink header representation. A netlink header has the …\nRepresent a netlink message.\nReturn the length of this message in bytes\nParse the given buffer as a netlink message\nEnsure the header (<code>NetlinkHeader</code>) is consistent with the …\nReturn the <code>flags</code> field\nFlags. It should be set to one of the <code>NLM_F_*</code> constants.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMessage header (this is common to all the netlink …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the packet, returning the underlying buffer.\nConsume this message and return its header and payload\nReturn the <code>length</code> field\nLength of the netlink packet, including the header and the …\nReturn the <code>type</code> field\nNetlinkMessage type. The meaning of this field depends on …\nCreate a new <code>NetlinkBuffer</code> that uses the given buffer as …\nCreate a new netlink message from the given header and …\nCheck the length of the given buffer and make sure it’s …\nReturn a pointer to the packet payload.\nInner message, which depends on the netlink protocol being …\nReturn the payload length.\nReturn a mutable pointer to the payload.\nReturn the <code>port_number</code> field\nPort number (usually set to the the process ID)\nReturn the <code>sequence_number</code> field\nSequence number of the packet\nSerialize this message and write the serialized data into …\nSet the packet header <code>flags</code> field\nSet the packet header <code>length</code> field\nSet the packet header <code>message_type</code> field\nSet the packet header <code>port_number</code> field\nSet the packet header <code>sequence_number</code> field\nAccording to <code>netlink(7)</code> the <code>NLMSG_ERROR</code> return Negative …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntry to find source address in routing lookups\nDestination port\nDestination address\nflow/class id\nmark\nmask for netfilter mark\nTarget to jump to\nInterface name\nIP protocol\niif or oif is l3mdev goto its table\npriority/preference\nOriginator of the rule\nSource port\nSource address\nExtended table id\nUID range\nDrop without notification\nJump to another rule\nNo operation\nDrop with <code>EACCES</code>\nPass to fixed table\nDrop with <code>ENETUNREACH</code>\nsee …\nLink supports multicast routing\nDriver supports setting media type (only used by ARM …\nLink supports broadcasting\nTell driver to do debugging (currently unused)\nDriver signals IFF_DORMANT\nLink loopback network\nLink layer is operational\nMaster of a load balancer (bonding)\nLink supports multicasting\nARP is not supported\nu32erface is point-to-point link\nLink selects port automatically (only used by ARM ethernet)\nReceive all packets.\nLink is up and carrier is OK (RFC2863 OPER_UP)\nSlave of a load balancer\nLink is up (administratively).\nNeighbour cache entry type: entry for cache statistics\nNeighbour cache entry type: entry for a network layer …\nNeighbour cache entry type: entry for a link layer …\nNeighbour cache entry type: unknown type\nRequest for an acknowledgment on success. Typical …\nextended ACK TVLs were included\nAdd to the end of the object list.\nReturn an atomic snapshot of the table. Requires …\nrequest was capped\nCreate object if it doesn’t already exist.\nDump was filtered as requested\nDump was inconsistent due to sequence change\nEcho this request.  Typical direction of request is from …\nDon’t replace if the object already exists.\nReturn all entries matching criteria passed in message …\nIndicates the message is part of a multipart message …\nDo not delete recursively\nReplace existing matching object.\nMust be set on all request messages (typically from user …\nReturn the complete table instead of a single entry.\nNeighbour cache entry state: the validation of this entry …\nNeighbour cache entry state: the validation of this entry …\nNeighbour cache entry state: the neighbour has not (yet) …\nNeighbour cache entry state: entry is valid and the kernel …\nNeighbour cache entry state: pseudo state for fresh …\nNeighbour cache entry state: entry is valid forever and …\nNeighbour cache entry state: the neighbour entry is being …\nNeighbour cache entry state: the neighbour entry is valid …\nNeighbour cache entry state: the neighbour entry is valid …\nThis route is cloned. Cloned routes are routes coming from …\nMultipath equalizer (not yet implemented)\nReturn the full FIB lookup match (see commit …\nShow the table from which the lookup result comes. Note …\nIf the route changes, notify the user via rtnetlink\nPrefix addresses\nA local broadcast route (sent as a unicast)\nA packet dropping route\nA local broadcast route (sent as a broadcast)\nA local interface route\nA multicast route\nA network address translation rule\nA packet rejection route\nContinue routing lookup in another table\nA gateway or direct route\nAn unreachable destination\nUnknown route\nRefer to an external resolver (not implemented)\nRoute was learnt during boot\nRoute was learnt by the kernel\nRoute was learnt by an ICMP redirect\nRoute was set statically\nUnknown\nThe destination is valid only on this host\nThe destination is link local\nDestination doesn’t exist\n(IPv6 only) the destination is site local, i.e. it is …\nThe destination is globally valid.\nA route table introduced for compatibility with old …\nThe default routing table.\nThe local table.\nThe main routing table.\nAn unspecified routing table\nHigh level representation of <code>RTM_GETLINK</code>, <code>RTM_SETLINK</code>, …\nChange mask for the <code>flags</code> field. Reserved, it should be set\nState of the link, described by a combinations of <code>IFF_*</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLink index.\nAddress family: one of the <code>AF_*</code> constants.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLink type. It should be set to one of the <code>ARPHRD_*</code> …\nAlternate name for the device. For additional context see …\nNot up but pending an external event\nDown\nDown due to state of lower layer\nThe maximum MTU for the device. For additional context see …\nThe minimum MTU for the device. For additional context see …\nSome component is missing\nUnrecognized value. This should go away when <code>TryFrom</code> is …\nPermanent hardware address of the device. The provides the …\nA list of properties for the device. For additional …\n<code>protodown</code> is a mechanism that allows protocols to hold an …\nIn some test mode\nStatus can’t be determined\nUp, ready to send packets\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nmulticast packets received\nmulticast packets received\ntotal bytes received\ntotal bytes received\nreceived packets with crc error\nreceived packets with crc error\nno space in linux buffers\nno space in linux buffers\nbad packets received\nbad packets received\nrecv’r fifo overrun\nrecv’r fifo overrun\nreceived frame alignment errors\nreceived frame alignment errors\nreceiver missed packet\nreceiver missed packet\ndropped, no handler found\ndropped, no handler found\nreceiver ring buff overflow\nreceiver ring buff overflow\ntotal packets received\ntotal packets received\ntotal bytes transmitted\ntotal bytes transmitted\nno space available in linux\nno space available in linux\npacket transmit problems\npacket transmit problems\ntotal packets transmitted\ntotal packets transmitted\nNeighbour headers have the following structure:\nNeighbour cache entry flags. It should be set to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNeighbour cache entry type. It should be set to one of the …\nNeighbour cache entry state. It should be set to one of the\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNlA(RTA) align size\nIdentify the bits that represent the “nested” flag of …\nIdentify the bits that represent the “byte order” flag …\nNlA(RTA) header size. (unsigned short rta_len) + (unsigned …\nIdentify the bits that represent the type of a netlink …\nAn iterator that iteratates over nlas without decoding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a reference to the underlying buffer\nReturn a mutable reference to the underlying buffer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the buffer, returning the underlying buffer.\nReturn the <code>type</code> field\nReturn the <code>length</code> field. The <code>length</code> field corresponds to …\nSet the <code>type</code> field\nSet the <code>length</code> field\nReturn the <code>value</code> field\nReturn the length of the <code>value</code> field\nReturn the <code>value</code> field\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis route is cloned. Cloned routes are routes coming from …\nMultipath equalizer (not yet implemented)\nReturn the full FIB lookup match (see commit …\nShow the table from which the lookup result comes. Note …\nIf the route changes, notify the user via rtnetlink\nPrefix addresses\nFlags that can be set in a <code>RTM_GETROUTE</code> ([…\nHigh level representation of <code>RTM_GETROUTE</code>, <code>RTM_ADDROUTE</code>, …\nAddress family of the route: either <code>AF_INET</code> for IPv4 …\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the destination subnet prefix, if present.\nPrefix length of the destination subnet.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nFlags when querying the kernel with a <code>RTM_GETROUTE</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nReturns the gateway address, if present.\nReturns the input interface index, if present.\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nRoute type. It should be set to one of the <code>RTN_*</code> constants.\nReturns the complement of this set of flags.\nReturns the output interface index, if present.\nProtocol from which the route was learnt. It should be set …\nRemoves the specified flags in-place.\nThe scope of the area where the addresses in the …\nInserts or removes the specified flags depending on the …\nReturns the source address prefix, if present.\nPrefix length of the source address.\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nRouting table ID. It can be one of the <code>RT_TABLE_*</code> …\nToggles the specified flags in-place.\nTOS filter\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nNetlink attributes for <code>RTA_ENCAP</code> with <code>RTA_ENCAP_TYPE</code> set …\nNetlink attributes for <code>RTM_NEWROUTE</code>, <code>RTM_DELROUTE</code>, …\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nNext-hop flags (see <code>NextHopFlags</code>)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nGateway address (it is actually encoded as an <code>RTA_GATEWAY</code> …\nNext-hop priority\nInserts the specified flags in-place.\nInterface index for the next-hop\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nAttributes\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFR_ACT_*\nReturns the set containing all flags.\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nAddress family: one of the <code>AF_*</code> constants.\nfib rule flags\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if all flags are currently set.\nReturns <code>true</code> if no flags are currently stored.\nReturns the complement of this set of flags.\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nRT_TABLE_*\nToggles the specified flags in-place.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ndestination address\nflow class id,\ntarget to jump to when used with rule action <code>FR_ACT_GOTO</code>\ninput interface name\nAF_*\niif or oif is l3mdev goto its table\noutput interface name\nRTPROT_*\nsource address\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TcMessage</code> with the given index\nAction attributes\nMirred action attr\nU32 filters\nHandles\nU32 Flags\nName of queueing discipline\nOptions follow\nRate limit\nGeneric queue statistics\nStatistics\nByte/Packet throughput statistics\nQueuing statistics\nUnspecified\nModule-specific statistics\nbacklog size of queue\nCurrent flow byte rate\nNumber of enqueued bytes\nnumber of seen bytes\nPackets dropped because of lack of resources\nnumber of dropped packets\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of throttle events when this flow goes out of …\nnumber of enqueues over the limit\nNumber of enqueued packets\nnumber of seen packets\nCurrent flow packet rate\nqueue length\nnumber of requeues\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA type that implements <code>Emitable</code> can be serialized.\nA <code>Parseable</code> type can be used to deserialize data from the …\nA <code>Parseable</code> type can be used to deserialize data from the …\nReturn the length of the serialized data.\nSerialize this types and write the serialized data into …\nDeserialize the current type.\nDeserialize the current type.")