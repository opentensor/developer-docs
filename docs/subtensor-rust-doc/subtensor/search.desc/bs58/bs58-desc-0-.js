searchState.loadedDescShard("bs58", 0, "Another Base58 codec implementation.\nPrepared Alphabet for <code>EncodeBuilder::with_alphabet</code> and …\nSupport for configurable alphabets\nFunctions for decoding Base58 encoded strings.\nSetup decoder for the given string using the default …\nFunctions for encoding into Base58 encoded strings.\nSetup encoder for the given bytes using the default …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrepared Alphabet for <code>EncodeBuilder::with_alphabet</code> and …\nBitcoin’s alphabet as defined in their Base58Check …\nThe default alphabet used if none is given. Currently is …\nThe alphabet contained a duplicate character at at least 2 …\nErrors that could occur when preparing a Base58 alphabet.\nFlickr’s alphabet for creating short urls from photo ids.\nMonero’s alphabet as defined in this forum post.\nThe alphabet contained a multi-byte (or non-utf8) …\nRipple’s alphabet as defined in their wiki.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate prepared alphabet, checks that the alphabet is pure …\nSame as <code>Self::new</code>, but gives a panic instead of an <code>Err</code> on …\nThe duplicate character encountered.\nThe first index the character was seen at.\nThe index at which the non-ASCII character was seen.\nThe second index the character was seen at.\nThe output buffer was too small to contain the entire …\nA builder for setting up the alphabet and output of a …\nRepresents a buffer that can be decoded into. See …\nContains the error value\nErrors that could occur when decoding a Base58 encoded …\nThe input contained a character that was not part of the …\nThe input contained a multi-byte (or non-utf8) character …\nContains the success value\nA specialized <code>Result</code> type for <code>bs58::decode</code>\nDecodes into this buffer, provides the maximum length for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecode into a new array.\n<code>Self::into_array_const</code> but the result will be unwrapped, …\nDecode into a new vector of bytes.\nSetup decoder for the given string using the given …\nDecode into the given buffer.\nPanic with an error message based on this error. This …\nChange the alphabet that will be used for decoding.\nThe unexpected character.\nThe (byte) index in the input string the character was at.\nThe (byte) index in the input string the start of the …\nThe output buffer was too small to contain the entire …\nA builder for setting up the alphabet and output of a …\nRepresents a buffer that can be encoded into. See …\nContains the error value\nErrors that could occur when encoding a Base58 encoded …\nContains the success value\nA specialized <code>Result</code> type for <code>bs58::encode</code>\nEncodes into this buffer, provides the maximum length for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncode into a new owned string.\nEncode into a new owned vector.\nSetup encoder for the given string using the given …\nEncode onto the given buffer.\nChange the alphabet that will be used for encoding.")