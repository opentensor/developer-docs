searchState.loadedDescShard("ed25519_zebra", 0, "Build status dependency status\nSize of an encoded Ed25519 signature in bytes.\nAn error related to Ed25519 signatures.\nSignature verification failed.\nA byte slice of the wrong length was supplied during …\nThe encoding of a public key was malformed.\nThe encoding of a secret key was malformed.\nEd25519 signature.\nAn Ed25519 signing key.\nA valid Ed25519 verification key.\nA refinement type for <code>[u8; 32]</code> indicating that the bytes …\nPerforms batch Ed25519 signature verification.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse an Ed25519 signature from a byte slice.\nParse an Ed25519 signature from its <code>R</code> and <code>s</code> components.\nParse an Ed25519 signature from a byte slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerate a new signing key.\nBytes for the <code>R</code> component of a signature.\nBytes for the <code>s</code> component of a signature.\nCreate a signature on <code>msg</code> using this key.\nReturn the inner byte array.\nConvert this signature into a byte vector.\nGenerate a <code>Signature</code> using a given <code>SigningKey</code>.\nVerify a purported <code>signature</code> on the given <code>msg</code>.\nVerify a <code>Signature</code> object against a given <code>VerificationKey</code>.\nA batch verification item.\nA batch verification context.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new batch verifier.\nQueue a (key, signature, message) tuple for verification.\nPerform batch verification, returning <code>Ok(())</code> if all …\nPerform non-batched verification of this <code>Item</code>.")