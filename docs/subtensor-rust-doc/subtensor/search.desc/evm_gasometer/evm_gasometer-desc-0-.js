searchState.loadedDescShard("evm_gasometer", 0, "EVM gasometer.\nAccessing address\nGas cost for <code>BALANCE</code>.\nBase gas cost.\nGas cost for <code>BLOCKHASH</code>.\nGas cost for <code>CALL</code>.\nCall transaction cost.\nGas cost for `CALLCODE.\nGas cost for <code>CREATE</code>.\nCreate transaction cost.\nGas cost for <code>CREATE2</code>.\nGas cost for <code>DELEGATECALL</code>.\nGas cost for <code>EXP</code>.\nGas cost for <code>EXTCODECOPY</code>.\nGas cost for <code>EXTBLOCKHASH</code>.\nGas cost for <code>EXTCODESIZE</code>.\nGas cost.\nEVM gasometer.\nFail the gasometer.\nGas cost for <code>LOG</code>.\nLow gas cost.\nMemory cost.\nNo storage access\nGas cost for <code>SLOAD</code>.\nGas cost for <code>SSTORE</code>.\nGas cost for <code>SHA3</code>.\nAccessing storage slot within an address\nGas cost for <code>STATICCALL</code>.\nStorage opcode will access. Used for tracking accessed …\nGas cost for <code>SUICIDE</code>.\nTransaction cost.\nVery low gas cost.\nGas cost for some copy opcodes that is documented as …\nZero gas cost.\nCalculate the call transaction cost.\nReference of the config.\nCalculate the create transaction cost.\nCalculate the opcode cost.\nExplicitly fail the gasometer with out of gas. Return …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRemaining gas.\nReturns the numerical gas cost value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nJoin two memory cost together.\nAffected length.\nCreate a new gasometer with given gas limit and config.\nAffected memory offset.\nRecord an explicit cost.\nRecord <code>CREATE</code> code deposit.\nRecord opcode gas cost.\nRecord an explicit refund.\nRecord opcode stipend.\nRecord transaction cost.\nRefunded gas.\nTotal used gas.\nWhether the target has already been removed.\nCurrent value.\nCall gas.\nCall gas.\nCall gas.\nCall gas.\nLength of the data.\nData length.\nLength.\nLength.\nLength.\nTopic length.\nNew value.\nOriginal value.\nPower of <code>EXP</code>.\nWhether the target exists.\nWhether the target exists.\nWhether the target exists.\nWhether the target exists.\nWhether the target exists.\nTrue if address has not been previously accessed in this …\nTrue if address has not been previously accessed in this …\nTrue if address has not been previously accessed in this …\nTrue if target has not been previously accessed in this …\nTrue if target has not been previously accessed in this …\nTrue if target has not been previously accessed in this …\nTrue if target has not been previously accessed in this …\nTrue if target has not been previously accessed in this …\nTrue if target has not been previously accessed in this …\nTrue if target has not been previously accessed in this …\nTrue if target has not been previously accessed in this …\nCall value.\nCall value.\nValue.\nNumber of addresses in transaction access list (see …\nNumber of addresses in transaction access list (see …\nTotal number of storage keys in transaction access list …\nTotal number of storage keys in transaction access list …\nCost of initcode = 2 * ceil(len(initcode) / 32) (see …\nLength of non-zeros in transaction data.\nLength of non-zeros in transaction data.\nLength of zeros in transaction data.\nLength of zeros in transaction data.")