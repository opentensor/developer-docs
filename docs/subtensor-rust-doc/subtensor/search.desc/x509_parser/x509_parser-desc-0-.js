searchState.loadedDescShard("x509_parser", 0, "License: MIT Apache License 2.0 docs.rs crates.io Download …\nX.509 Certificate object definitions and operations\nX.509 errors\nX.509 Extensions objects and types\nX.509 helper objects definitions and registry\nParse a DER-encoded X.509 v2 CRL, and return the remaining …\nParse a <strong>DER-encoded</strong> X.509 Certificate, and return the …\nParse a DER-encoded X.509 v2 CRL, and return the remaining …\nParse a DER-encoded X.509 Certificate, and return the …\nDecoding functions for PEM-encoded data\nA “prelude” for users of the x509-parser crate.\nX.509 objects and types\nBasic extension structure, used in search results\nThe sequence <code>TBSCertificate</code> contains information …\n<code>TbsCertificate</code> parser builder\nAn X.509 v3 Certificate.\nX.509 Certificate parser\nAttempt to get the certificate Basic Constraints extension\nAttempt to get the certificate Extended Key Usage extension\nReturns the certificate extensions\nBuilds and returns a map of extensions.\nSearches for an extension with the given <code>Oid</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a DER-encoded X.509 Certificate, and return the …\nParse a DER-encoded TbsCertificate object\nSearches for an extension with the given <code>Oid</code>.\nAttempt to get the certificate Policy Constraints extension\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if certificate has <code>basicConstraints CA:true</code>\nCheck the certificate time validity\nCheck the certificate time validity for the provided …\nGet the certificate issuer.\nReturns an iterator over the certificate extensions\nAttempt to get the certificate Key Usage extension\nAttempt to get the certificate Name Constraints extension\nAttempt to get the certificate Policy Constraints extension\nAttempt to get the certificate Policy Mappings extension\nGet the certificate public key information.\nGet the raw bytes of the certificate serial number\nGet a formatted string of the certificate serial number, …\nGet the certificate subject.\nAttempt to get the certificate Subject Alternative Name …\nThe time left before the certificate expires.\nGet the certificate validity.\nGet the version of the encoded certificate\nCertification Signing Request (CSR)\nCertification Request Info structure\nGet the CRL entry extensions.\nBuilds and returns a map of CRL entry extensions.\nSearches for a CRL entry extension with the given <code>Oid</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the CRL entry extensions\nSection 3.1 of rfc 5272\nAttributes for Certification Request\nAttributes for Certification Request\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the attribute type or <code>UnsupportedAttribute</code> if the …\nContains the error value\nTop-level certificate structure is invalid\nAn error that can occur while converting an OID to a Nid.\nContains the success value\nAn error that can occur while parsing or validating a …\nAn error that can occur while parsing or validating a …\nHolds the result of parsing functions (X.509)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSection 4.2.2.1 of rfc 5280\nSection 4.2.1.1 of rfc 5280\nIdentifies whether the subject of the certificate is a CA, …\nSection 4.2.1.9 of rfc 5280\nSection 4.2.1.13 of rfc 5280\nSection 5.3.1 of rfc 5280\nSection 4.2.1.4 of rfc 5280\nCtExtensions as defined in RFC6962 Section 3.2\nLogID as defined in RFC6962 Section 3.2\nCertificate Transparency Version as defined in RFC6962 …\nA hostname, format is not checked.\nRFC5280 defines several string types, we always try to …\nEDIPartyName\nSection 4.2.1.12 of rfc 5280\nRepresents a GeneralName as defined in RFC5280. There is …\nRepresents the structure used in the name constraints …\nAn ip address, provided as encoded.\nSection 4.2.1.14 of rfc 5280\nSection 5.3.3 of rfc 5280\nSection 4.2.1.7 of rfc 5280\nSection 5.2.5 of rfc 5280\nSection 4.2.1.3 of rfc 5280\nNetscape certificate type (subject is SSL client, an SSL …\nSection 4.2.1.10 of rfc 5280\nNetscape certificate comment\nSection 4.2.1.11 of rfc 5280\nSection 4.2.1.5 of rfc 5280\nMore or less an e-mail, the format is not checked.\nSection 5.3.1 of rfc 5280\nrfc 6962\nSection 4.2.1.6 of rfc 5280\nSection 4.2.1.2 of rfc 5280\nAn uniform resource identifier. The format is not checked.\nUnparsed extension (was not requested in parsing options)\nCrate parser does not support this extension (yet)\nX400Address,\nX.509 version 3 extension\n<code>X509Extension</code> parser builder\nReturns a <code>HashMap</code> mapping <code>Oid</code> to the list of references to …\nReturns a <code>HashMap</code> mapping <code>Oid</code> to the list of references to …\nBoolean value describing the ‘critical’ attribute of …\nReturn a reference on the parsing error if the extension …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>HashMap</code> mapping <code>Oid</code> to the list of <code>Oid</code> …\nReturns a <code>HashMap</code> mapping <code>Oid</code> to the list of <code>GeneralNames</code> …\nReturns an iterator over the Access Descriptors\nCreates a new extension with the provided values.\nOID describing the extension content\nParses as single Signed Certificate Timestamp entry\nParses a list of Signed Certificate Timestamp entries\nReturn the extension type or <code>UnsupportedExtension</code> if the …\nReturn <code>true</code> if the extension is unsupported\nRaw content of the extension\nReturn the abbreviation (for ex. CN for Common Name), or …\nReturns the description corresponding to the OID\nReturns the short name corresponding to the OID\nReturn a reference to the default registry of known OIDs\nRepresentation of PEM data\nIterator over PEM-encapsulated blocks\nThe PEM decoded data\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the PEM-encapsulated parts of a …\nReturns an iterator over the PEM-encapsulated parts of a …\nThe PEM label\nDecode the PEM contents into a X.509 object\nRead a PEM-encoded structure, and decode the base64 data\nRead the next PEM-encoded structure, and decode the base64 …\nBase trait for DER object parsers\nAttempt to parse input bytes into a DER object (enforcing …\nDSAPublicKey ::= INTEGER – public key, Y (RFC 3279)\nElliptic Curve point, as defined in RFC5480\nGostR3410-94-PublicKey ::= OCTET STRING – public key, Y …\nGostR3410-2012-256-PublicKey ::= OCTET STRING (64), …\nPublic Key value\nRSA public Key, defined in rfc3279\nEC Point content (See Standards for Efficient Cryptography …\nRaw bytes of the exponent\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the key size (in bits) or 0\nReturn the key size (in bits) or 0\nReturn the key size (in bits) or 0\nRaw bytes of the modulus\nAttempt to convert exponent to u64\nAn X.509 v2 Certificate Revocation List (CRL).\nThe sequence TBSCertList contains information about the …\nGet the CRL number, if present\nGet the CRL extensions.\nReturns the certificate extensions\nGet the CRL entry extensions.\nBuilds and returns a map of extensions.\nBuilds and returns a map of CRL entry extensions.\nSearches for an extension with the given <code>Oid</code>.\nSearches for a CRL entry extension with the given <code>Oid</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the invalidity date, if present\nGet the certificate issuer.\nReturns an iterator over the certificate extensions\nReturns an iterator over the CRL entry extensions\nReturn an iterator over the <code>RevokedCertificate</code> objects\nGet the date and time of the last (this) update.\nGet the date and time of the next update, if present.\nGet the raw bytes of the certificate serial number\nGet a formatted string of the certificate serial number, …\nGet the code identifying the reason for the revocation, if …\nThe date on which the revocation occurred is specified.\nReturn the serial number of the revoked certificate\nThe Serial number of the revoked certificate\nGet the version of the encoded certificate\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the rsa ssa pss params’s hash …\nGet a reference to the rsa aes oaep params’s hash …\nReturn the hash algorithm OID, or SHA1 if absent (RFC4055)\nReturn the hash algorithm OID, or SHA1 if absent (RFC4055)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the rsa ssa pss params’s mask generation algorithm.\nGet the rsa ssa pss params’s mask generation algorithm.\nGet a reference to the rsa ssa pss params’s mask …\nGet a reference to the rsa ssa pss params’s mask …\nReturn the pSourceFunc algorithm\nReturn the salt length\nReturn the trailer field (value must be <code>1</code> according to …\nECDSA Signature Value (RFC3279)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn ASN.1 timestamp.\nReturns the argument unchanged.\nMakes a new <code>ASN1Time</code> from the number of non-leap seconds …\nCalls <code>U::from(self)</code>.\nReturns a <code>ASN1Time</code> which corresponds to the current date.\nReturns the number of non-leap seconds since January 1, …\nReturns an RFC 2822 date and time string such as …\nFormats a slice to a colon-separated hex string (for ex …\nAlgorithm identifier\nA generic attribute type and value\nA Relative Distinguished Name element.\nX.509 Name (as used in <code>Issuer</code> and <code>Subject</code> fields)\nThe version of the encoded certificate.\nGet the content as a slice.\nAttempt to get the content as <code>str</code>. This can fail if the …\nReturns the attribute type\nReturns the attribute value, as <code>ANY</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse the SubjectPublicKeyInfo struct portion of a …\nParse the X.501 type Name, used for ex in issuer and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an iterator over the components of this object\nReturn an iterator over the <code>RelativeDistinguishedName</code> …\nReturn an iterator over the attribute types and values of …\nReturn an iterator over the components identified by the …\nReturn an iterator over the <code>CommonName</code> attributes of the …\nReturn an iterator over the <code>Country</code> attributes of the …\nReturn an iterator over the <code>EmailAddress</code> attributes of the …\nReturn an iterator over the <code>Locality</code> attributes of the …\nReturn an iterator over the <code>Organization</code> attributes of the …\nReturn an iterator over the <code>OrganizationalUnit</code> attributes …\nReturn an iterator over the <code>RelativeDistinguishedName</code> …\nReturn an iterator over the <code>StateOrProvinceName</code> attributes …\nBuilds a new <code>AttributeTypeAndValue</code>\nBuilds a new <code>RelativeDistinguishedName</code>\nCreate a new <code>AlgorithmIdentifier</code>\nBuilds a new <code>X509Name</code> from the provided elements.\nGet the algorithm OID\nGet a reference to the algorithm parameters, if present\nAttempt to parse the public key, and return the parsed …\nA raw unparsed PKIX, ASN.1 DER form (see RFC 5280, Section …\nAttempt to format the current name, using the given …")