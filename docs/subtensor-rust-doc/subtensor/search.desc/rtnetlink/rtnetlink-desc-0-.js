searchState.loadedDescShard("rtnetlink", 0, "This crate provides methods to manipulate networking …\nA request to create a new address. This is equivalent to …\nInternet Protocol (IP) version.\nA request to create a new link. This is equivalent to the …\nA request to create a new route. This is equivalent to the …\nA request to create a new rule. This is equivalent to the …\nIPv4\nIPv6\nA request to create a new vxlan link. This is equivalent …\nSet action.\nAdd a new network namespace. This is equivalent to …\nAdd an ip address on an interface (equivalent to …\nAdd an routing table entry (equivalent to <code>ip route add</code>)\nAdd a route rule entry (equivalent to <code>ip rule add</code>)\nCreate a new qdisc, don’t replace if the object already …\nAdd a filter to a node, don’t replace if the object …\nAdd a new neighbour entry (equivalent to <code>ip neighbour add</code>)\nAdd a new fdb entry (equivalent to <code>bridge fdb add</code>)\nSet the hardware address of the link with the given index …\nCreate a new handle, specifically for address requests …\nAdds the <code>ageing</code> attribute to the VXLAN This is equivalent …\nAdd alternative name to the link. This is equivalent to …\nRemove alternative name to the link. This is equivalent to …\nEnable or disable the ARP protocol of the link with the …\nSet block index. Equivalent to <code>block BLOCK_INDEX</code>.\nCreate a new bridge. This is equivalent to …\nChange the qdisc, the handle cannot be changed and neither …\nChange the filter, the handle cannot be changed and …\nThis is the child process, it will actually create the …\nRemove a network namespace This is equivalent to …\nDelete the given address\nDelete the given routing table entry (equivalent to …\nDelete the given route rule entry (equivalent to …\nDelete the qdisc ( equivalent to <code>tc qdisc del dev STRING</code>)\nDelete a neighbour entry (equivalent to <code>ip neighbour delete</code>…\nSet the destination address for the neighbour (see <code>NDA_DST</code> …\nSets the destination address prefix.\nSets the destination address prefix.\nSets the destination address prefix.\nSets the destination address prefix.\nSet the link with the given index down (equivalent to …\nCreate a dummy link. This is equivalent to …\nSet parent to egress.\nExecute the request.\nExecute the request.\nExecute the request\nExecute the request\nExecute the request\nExecute the request\nExecute the request\nExecute the request.\nExecute the request\nExecute the request.\nExecute the request\nExecute the request.\nExecute the request\nExecute the request\nExecute the request\nExecute the request\nExecute the request\nExecute the request\nExecute the request\nExecute the request\nExecute the request.\nExecute the request\nSet flags for the neighbor cache entry. It should be a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the gateway (via) address.\nSets the gateway (via) address.\nRetrieve the list of links (equivalent to <code>ip link show</code>)\nRetrieve the list of ip addresses (equivalent to …\nRetrieve the list of routing table entries (equivalent to …\nRetrieve the list of route rule entries (equivalent to …\nRetrieve the list of qdisc (equivalent to <code>tc qdisc show</code>)\nRetrieve the list of traffic class (equivalent to …\nRetrieve the list of filter (equivalent to …\nRetrieve the list of chain (equivalent to …\nList neighbour entries (equivalent to <code>ip neighbour show</code>)\nAdds the <code>group</code> attribute to the VXLAN This is equivalent …\nAdds the <code>group</code> attribute to the VXLAN This is equivalent …\nSet handle,\nSet interface index. Equivalent to <code>dev STRING</code>, dev and …\nGet ingress qdisc\nNew a ingress qdisc\nSet parent to ingress.\nSets the input interface index.\nSets the input interface name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the route kind.\nThis is equivalent to …\nThis is equivalent to …\nAdds the <code>flowlabel</code> attribute to the VXLAN This is …\nAdds the <code>learning</code> attribute to the VXLAN This is …\nAdds the <code>maxaddress</code> attribute to the VXLAN This is …\nAdds the <code>dev</code> attribute to the VXLAN This is equivalent to …\nPerforms a replace where the node must exist already. ( …\nCreate a new handle, specifically for link requests …\nSet a neighbor cache link layer address (see <code>NDA_LLADDR</code> …\nAdds the <code>local</code> attribute to the VXLAN This is equivalent …\nAdds the <code>local</code> attribute to the VXLAN This is equivalent …\nCreate macvlan on a link. This is equivalent to …\nAttach the link to a bridge (its <em>master</em>). This is …\nLookup a link by index\nLookup a link by name\nReturn a mutable reference to the request message.\nReturn a mutable reference to the request\nReturn a mutable reference to the request\nReturn a mutable reference to the request\nReturn a mutable reference to the request\nReturn a mutable reference to the request\nReturn a mutable reference to the request message.\nReturn a mutable reference to the request message.\nReturn a mutable reference to the request\nReturn a mutable reference to the request\nReturn a mutable reference to the request message.\nSet the mtu of the link with the given index (equivalent …\nSet the name of the link with the given index (equivalent …\nCreate a new handle, specifically for routing neighbours …\nDetach the link from its <em>master</em>. This is equivalent to …\nSet attributes applicable to the the neighbor cache entry. …\nSets the output interface index.\nSets the output interface name.\nSet parent\nSet parent. Equivalent to …\nThis is the parent process form the fork, it waits for the …\nAdds the <code>dstport</code> attribute to the VXLAN This is equivalent …\nAdds the <code>srcport</code> attribute to the VXLAN This is equivalent …\nSets the preferred source address.\nSets the preferred source address.\nSet priority. Equivalent to <code>priority PRIO</code> or <code>pref PRIO</code>.\nEnable or disable promiscious mode of the link with the …\nSets the route protocol.\nSet protocol. Equivalent to <code>protocol PROT</code>. Default: …\nList neighbor proxies in the system (equivalent to: …\nAdds the <code>proxy</code> attribute to the VXLAN This is equivalent …\nCreate a new handle, specifically for traffic control …\nUse u32 to implement traffic redirect. Equivalent to …\nAdds the <code>remote</code> attribute to the VXLAN This is equivalent …\nAdds the <code>remote</code> attribute to the VXLAN This is equivalent …\nReplace existing matching link.\nReplace existing matching address.\nReplace existing matching route.\nReplace existing matching rule.\nReplace existing matching qdisc, create qdisc if it doesn…\nReplace existing matching filter, create filter if it doesn…\nReplace existing matching neighbor.\nSet parent to root.\nSet parent to root.\nSet parent to root.\nCreate a new handle, specifically for routing table …\nAdds the <code>rsc</code> attribute to the VXLAN This is equivalent to …\nCreate a new handle, specifically for routing rule …\nSets the route scope.\nReturn only the addresses of the given prefix length.\nSetting filter mask(e.g. RTEXT_FILTER_BRVLAN and etc)\nReturn only the addresses of the given interface.\nReturn only the addresses of the given prefix length.\nMove this network device into the network namespace …\nMove this network device into the network namespace of the …\nSets the source address prefix.\nSets the source address prefix.\nSets the source address prefix.\nSets the source address prefix.\nSet a bitmask of states for the neighbor cache entry. It …\nSets the route table.\nSets the rule table.\nAdds the <code>tos</code> attribute to the VXLAN This is equivalent to …\nSet the tos.\nCreate a new handle, specifically for traffic control …\nCreate a new handle, specifically for traffic control …\nCreate a new handle, specifically for traffic control …\nAdds the <code>ttl</code> attribute to the VXLAN This is equivalent to …\nThe 32bit filter allows to match arbitrary bitfields in …\nThis is equivalent to …\nThis function unshare the calling process and move into …\nSets the interface up This is equivalent to …\nSet the link with the given index up (equivalent to …\nBuild an IP v4 route request\nBuild an IP v4 rule\nBuild an IP v6 route request\nBuild an IP v6 rule\nCreate a veth pair. This is equivalent to …\nCreate VLAN on a link. This is equivalent to …\nCreate a VxLAN This is equivalent to …\nConnection to a Netlink socket, running in the background.\nThe netlink connection is closed\nA handle to pass requests to a <code>Connection</code>.\nReceived an error message as a response\nRepresent a netlink message.\nError while reading from or writing to the netlink socket\nReturn the length of this message in bytes\nParse the given buffer as a netlink message\nEnsure the header (<code>NetlinkHeader</code>) is consistent with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMessage header (this is common to all the netlink …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this message and return its header and payload\nCreate a new netlink message from the given header and …\nInner message, which depends on the netlink protocol being …\nSend a new request and get the response as a stream of …\nSerialize this message and write the serialized data into …\nTrait to support different async backends\nSupport trait for <code>AsyncSocket</code>\nThe address of a netlink socket\nAn I/O object representing a Netlink socket.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the multicast groups of this socket\nWrapper for <code>Socket::new</code>\nCreate a new socket address for with th\nPolling wrapper for <code>Socket::recv</code>\nPolling wrapper for <code>Socket::recv_from</code>\nPolling wrapper for <code>Socket::recv_from_full</code>\nPolling wrapper for <code>Socket::send</code>\nPolling wrapper for <code>Socket::send_to</code>\nGet the unicast address of this socket\n…\n…\n…\n<code>async fn send(&amp;mut self, buf: &amp;[u8]) -&gt; io::Result&lt;usize&gt;</code>\n<code>async fn send(&amp;mut self, buf: &amp;[u8]) -&gt; io::Result&lt;usize&gt;</code>\nMutable access to underyling <code>Socket</code>\nMutable access to underyling <code>Socket</code>\nAccess underyling <code>Socket</code>\nAuditing.\nKernel connector. See <code>Documentation/connector/*</code> in the …\nNetlink interface to request information about ciphers …\nDECnet routing messages.\nAccess to FIB lookup from user space.\nTransport  IPv4  packets  from  netfilter  to  user  …\nGeneric netlink family for simplified netlink usage.\nTransport IPv6 packets from netfilter to user space.  Used …\nOpen-iSCSI.\nKernel messages to user space.\nNetfilter subsystem.\nNetfilter/iptables ULOG.\nInfiniband RDMA.\nReceives routing and link updates and may be used to …\nSCSI transpots\nSELinux event notifications.\nQuery information about sockets of various protocol …\nReserved for user-mode socket protocols.\nIPsec.")