searchState.loadedDescShard("polkavm", 0, "List of all of the VM’s registers.\nList of all input/output argument registers.\nAsynchronous gas metering. Has a lower performance …\nA helper struct used when calling into a function exported …\nA handle used to access the execution context.\nA handle used to access the execution context, with erased …\nThe index of an exported function to be called.\nA gas value used for gas metering.\nThe type of gas metering.\nThe maximum possible available gas.\nThe minimum possible available gas.\nThe memory map of a given guest program.\nA compiled PolkaVM program module.\nThe configuration for a module.\nA partially deserialized PolkaVM program.\nSynchronous gas metering. This will immediately abort the …\nSets the argument registers to the given values according …\nSets the argument registers to the given values.\nReturns the original bytes from which this program blob …\nGets the currently set backend, if any.\nReturns the number of basic blocks the code section should …\nUpdates the state of the instance according to the …\nA conveniance function to call into this particular …\nReturns the program code in its raw form.\nCreates an empty memory map.\nReturns an iterator over program exports.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new module from a deserialized program <code>blob</code>.\nCreates a new default configuration and seeds it from the …\nConstructs a new gas value from an <code>i64</code>, checking whether it…\nConstructs a new gas value from an <code>u64</code>, checking whether it…\nDefines a fallback external call handler, in case no other …\nDefines a new dynamically typed handler for external calls …\nDefines a new statically typed handler for external calls …\nGets the amount of gas remaining, or <code>None</code> if gas metering …\nGets the raw gas value.\nReturns the line program for the given instruction.\nReturns the debug string for the given relative offset.\nReturns the value of the given register.\nExtracts a return value from the argument registers …\nThe address at which the program’s heap starts.\nReturns the current size of the program’s heap.\nReturns an iterator over program imports.\nInstantiates a new module.\nPre-instantiates a new module, linking it with the …\nReturns the number of instructions the code section should …\nReturns an iterator over program instructions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an owned program blob, possibly cloning it if it …\nCreates a caller handle with dynamically checked borrow …\nChecks whether there is no gas remaining.\nReturns an iterator over the jump table entries, excluding …\nThe upper bound of how many entries there might be in this …\nSearches for a given symbol exported by the module.\nThe raw machine code of the compiled module.\nThe address at which the raw machine code will be loaded.\nThe maximum size of the program’s heap.\nThe program’s memory map.\nReturns the module from which this instance was created.\nCreates a new <code>CallArgs</code>.\nCreates a new <code>StateArgs</code>.\nCalculates the memory map from the given parameters.\nCreates a new module by deserializing the program from the …\nConstructs a new gas value. Alias for <code>Gas::from_u64</code>.\nCreates a new default configuration.\nCreates a new default module configuration.\nA map with gas costs for each basic block of the program.\nA map which makes it possible to map a position within the …\nThe page size of the program.\nParses the given bytes into a program blob.\nReturns the PID of the sandbox corresponding to this …\nSets a given register to the given value before the call.\nA conveniance function to reset the instance’s memory to …\nDecides whether the memory of the instance will be reset.\nDecides whether the memory of the instance will be reset …\nReturns the contents of the read-only data section.\nThe address at where the program’s read-only data starts …\nThe range of addresses where the program’s read-only …\nThe size of the program’s read-only data.\nReturns the size of the read-only data section.\nReturns the contents of the read-write data section.\nThe address at where the program’s read-write data …\nThe range of addresses where the program’s read-write …\nThe size of the program’s read-write data.\nReturns the size of the read-write data section.\nGets the currently set sandbox, if any.\nA conveniance function to increase the size of the program…\nIncrements the guest’s heap by the given number of bytes.\nEnabling this makes it possible to enable other settings …\nForces the use of a given backend.\nSets the current remaining gas.\nSets the type of gas metering to enable for this module.\nSets the page size used for the module.\nForces the use of a given sandbox.\nEnables execution tracing.\nSets the number of worker sandboxes that will be …\nThe address at where the program’s stack ends inside of …\nThe address at where the program’s stack starts inside …\nThe range of addresses where the program’s stack is …\nThe size of the program’s stack.\nReturns the initial size of the stack.\nReturns whether the execution tracing is enabled.\nUpdates the state of this particular instance.")