searchState.loadedDescShard("memory_db", 0, "Reference-counted memory-based <code>HashDB</code> implementation.\nKey function that only uses the hash\nKey function that concatenates prefix and hash. This is …\nReference-counted memory-based <code>HashDB</code> implementation.\nKey function that concatenates prefix and hash.\nClear all data from the database.\nConsolidate all the entries of <code>other</code> into <code>self</code>.\nCreate a new default instance of <code>Self</code> and returns <code>Self</code> and …\nReturn the internal key-value Map, clearing the current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>MemoryDB</code> from a given null key/data\nMake database key from hash only.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the keys in the database together with number of …\nLegacy method for db using previous version of prefix …\nCreate a new instance of <code>Self</code>.\nDerive a database key from hash value of the node (key) …\nPurge all zero-referenced data from the database.\nGrab the raw information associated with a key. Returns …\nRemove an element and delete it from storage if reference …\nShrinks the capacity of the map as much as possible. It …")