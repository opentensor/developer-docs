searchState.loadedDescShard("file_guard", 0, "A cross-platform library for simple advisory file locking.\nAn exclusive lock may only be held by a single process.\nAn RAII implementation of a “scoped lock” of a file. …\nThe type of a lock operation.\nA shared lock may be concurrently held by multiple …\nSafely exchanges an <code>Exclusive</code> <code>Lock</code> for a <code>Shared</code> one.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTests if the byte range of the lock has a length of zero.\nTest if the currently held <code>Lock</code> type is <code>Exclusive</code>.\nTest if the currently held <code>Lock</code> type is <code>Shared</code>.\nGets the byte length of the held lock.\nWait and claim the desired <code>Lock</code> type using a byte range of …\nFirst attempt to claim an <code>Exclusive</code> lock and then fallback …\nGets the <code>Lock</code> type currently held.\nGets the byte offset of the held lock.\nProvides low-level support operations for file locking.\nGets the byte range of the held lock.\nAttempt to claim the desired <code>Lock</code> type using a byte range …\nProvides low-level support operations for file locking on …\nUNIX-specific extensions to <code>FileGuard</code>.\nDowngrades a file lock from exclusive to shared.\nAcquires and releases a file lock.\nAttempts to upgrade a lock from <code>Shared</code> to <code>Exclusive</code>.\nUpgrades a lock from <code>Shared</code> to <code>Exclusive</code>.")