searchState.loadedDescShard("predicates_core", 0, "Composable first-order predicate trait.\nTrait for generically evaluating a type against a …\nExecute this <code>Predicate</code> against <code>variable</code>, returning the …\nFind a case that proves this predicate as <code>expected</code> when …\nFind a case that proves this predicate as <code>expected</code> when …\nIntrospect into the state of a <code>Predicate</code>.\nA descriptive explanation for why a predicate failed.\nIterator over a <code>Case</code>s sub-cases.\nIterator over a <code>Case</code>s by-products.\nA view of a <code>Predicate</code> child, provided by reflection.\nA view of a <code>Predicate</code> parameter, provided by reflection.\nIntrospect the state of a <code>Predicate</code>.\nA by-product of a predicate evaluation.\nAdd an additional by product to a <code>Case</code>.\nAdd an additional by product to a <code>Case</code>.\nNested <code>Predicate</code>s of the current <code>Predicate</code>.\nAccess the sub-cases.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccess the <code>Parameter</code> name.\nAccess the <code>Child</code>’s name.\nAccess the <code>Product</code> name.\nCreate a new <code>Parameter</code>.\nCreate a new <code>Predicate</code> child.\nCreate a new <code>Case</code> describing the result of a <code>Predicate</code>.\nCreate a new <code>Product</code>.\nParameters of the current <code>Predicate</code>.\nThe <code>Predicate</code> that produced this case.\nAccess the by-products from determining this case.\nThe result of this case.\nAccess the <code>Parameter</code> value.\nAccess the <code>Child</code> <code>Predicate</code>.\nAccess the <code>Product</code> value.")