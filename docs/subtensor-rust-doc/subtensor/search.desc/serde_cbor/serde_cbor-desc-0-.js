searchState.loadedDescShard("serde_cbor", 0, "CBOR and serialization.\nRepresents an array of values.\nRepresents a boolean value.\nRepresents a byte string.\nA Serde <code>Deserialize</code>r of CBOR data.\nContains the error value\nThis type represents all possible errors that can occur …\nRepresents a floating point value.\nInteger CBOR numbers.\nRepresents a map.\nRepresents the absence of a value or the value undefined.\nContains the success value\nAlias for a <code>Result</code> with the error type <code>serde_cbor::Error</code>.\nA structure for serializing Rust values to CBOR.\nIterator that deserializes a stream into multiple CBOR …\nRepresents a tagged value\nRepresents an UTF-8 encoded string.\nThe <code>Value</code> enum, a loosely typed way of representing any …\nDeserialization.\nWhen serializing or deserializing CBOR goes wrong.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes a value from CBOR data in a reader.\nDecodes a value from CBOR data in a slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerialize a Rust data structure to CBOR data.\nSupport for cbor tags\nSerializes a value to a vector.\nSerializes a value to a writer.\nCBOR values, keys and serialization routines.\nA Serde <code>Deserialize</code>r of CBOR data.\nCBOR input source that reads from a std::io input stream.\nA CBOR input source that reads from a slice of bytes, and …\nTrait used by the deserializer for iterating over input.\nA CBOR input source that reads from a slice of bytes.\nA CBOR input source that reads from a slice of bytes using …\nIterator that deserializes a stream into multiple CBOR …\nReturn the current offset in the reader\nReturn the current offset in the reader\nDon’t accept the old enum format used by <code>serde_cbor</code> …\nDon’t accept named variants and fields.\nDon’t accept numbered variants and fields.\nDon’t accept the new enum format used by <code>serde_cbor</code> …\nThis method should be called after a value has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode a value from CBOR data in a mutable slice.\nConstructs a <code>Deserializer</code> which reads from a mutable slice …\nDecodes a value from CBOR data in a reader.\nConstructs a <code>Deserializer</code> which reads from a <code>Read</code>er.\nDecodes a value from CBOR data in a slice.\nConstructs a <code>Deserializer</code> which reads from a slice.\nDecode a value from CBOR data using a scratch buffer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn a CBOR deserializer into an iterator over values of …\nConstructs a <code>Deserializer</code> from one of the possible …\nCreate a new CBOR stream deserializer from one of the …\nCreates a new CBOR input source to read from a std::io …\nCreates a CBOR input source to read from a slice of bytes.\nCreates a CBOR input source to read from a slice of bytes, …\nCreates a CBOR input source to read from a slice of bytes.\nCategorizes the cause of a <code>serde_cbor::Error</code>.\nThe error was caused by input data that was semantically …\nThe error was caused by prematurely reaching the end of …\nContains the error value\nThis type represents all possible errors that can occur …\nThe error was caused by a failure to read or write bytes …\nContains the success value\nAlias for a <code>Result</code> with the error type <code>serde_cbor::Error</code>.\nThe error was caused by input that was not syntactically …\nCategorizes the cause of this error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if this error was caused by data that was …\nReturns true if this error was caused by prematurely …\nReturns true if this error was caused by a failure to read …\nReturns true if this error was caused by the scratch …\nReturns true if this error was caused by input that was …\nThe byte offset at which the error occurred.\nA wrapper for types that implement <code>std::io::Write</code> to …\nA structure for serializing Rust values to CBOR.\nImplements <code>Write</code> for mutable byte slices (<code>&amp;mut [u8]</code>).\nA sink for serialized CBOR.\nReturns the number of bytes written to the underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap the <code>Writer</code> from the <code>Serializer</code>.\nReturns the underlying slice.\nEnable old enum format used by <code>serde_cbor</code> versions &lt;= v0.9.\nCreates a new CBOR serializer.\nWraps an <code>io::Write</code> writer to make it compatible with <code>Write</code>\nWraps a mutable slice so it can be used as a <code>Write</code>.\nChoose concise/packed format for serializer.\nWrites a CBOR self-describe tag to the stream.\nSerializes a value to a vector.\nSerializes a value to a vector in packed format.\nSerializes a value to a writer.\nA value that is optionally tagged with a cbor tag\nfunction to get the current cbor tag\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new tagged value\ncbor tag\nvalue\nRepresents an array of values.\nRepresents a boolean value.\nRepresents a byte string.\nRepresents a floating point value.\nInteger CBOR numbers.\nRepresents a map.\nRepresents the absence of a value or the value undefined.\nRepresents a tagged value\nRepresents an UTF-8 encoded string.\nThe <code>Value</code> enum, a loosely typed way of representing any …\nConvert a <code>serde_cbor::Value</code> into a type <code>T</code>\nConvert a <code>T</code> into <code>serde_cbor::Value</code> which is an enum that …")