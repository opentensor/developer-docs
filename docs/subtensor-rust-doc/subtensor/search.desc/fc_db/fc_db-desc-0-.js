searchState.loadedDescShard("fc_db", 0, "Check given path, and see if there is an existing database …\nUse a custom already-open database.\nWhere to find the database..\nLoad a ParityDb database from a given path.\nLoad a RocksDB database from a given path. Recommended for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn path for databases that are stored on disk.\nSet path for databases that are stored on disk.\nCache size in MiB. Used only by <code>RocksDb</code> variant of …\nCache size in MiB.\nthe handle to the custom storage\nPath to the paritydb database.\nPath to the database.\nPath to the database.\nif set, the <code>create</code> flag will be required to open such …\nPath to the rocksdb database.\nCheck given path, and see if there is an existing database …\nUse a custom already-open database.\nDatabase settings.\nWhere to find the database..\nHash type that this backend uses for the database.\nLoad a ParityDb database from a given path.\nLoad a RocksDB database from a given path. Recommended for …\nCommit the <code>transaction</code> to the database atomically. Any …\nCheck if the value exists in the database without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the frontier database directory.\nRetrieve the value previously stored against <code>key</code> or <code>None</code> if\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove a possible path-prefix from the key.\nWhere to find the database.\nCheck if database supports internal ref counting for state …\nCheck value size in the database possibly without …\nCall <code>f</code> with the value previously stored against <code>key</code>.\nCache size in MiB. Used only by <code>RocksDb</code> variant of …\nCache size in MiB.\nthe handle to the custom storage\nPath to the paritydb database.\nPath to the database.\nPath to the database.\nif set, the <code>create</code> flag will be required to open such …\nPath to the rocksdb database.\nRepresents the backend configurations.\nRepresents the indexed status of a block and if it’s …\nRepresents a log item.\nRepresents the Sqlite connection options that are used to …\nRetrieves the status if a block is indexed and if also …\nCanonicalize the indexed blocks, marking/demarking them as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nRetrieves the first missing canonical block number in …\nRetrieves the first pending canonical block hash in …\nIndex the logs for the newly indexed blocks upto a …\nInsert the block metadata for the provided block hashes.\nIndex the block metadata for the genesis block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves the status if a block has been already indexed.\nRetrieve the block hash for the last indexed canon block.\nCreates a new instance of the SQL backend.\nGet the underlying Sqlite pool.\nSets the provided block as canon.")