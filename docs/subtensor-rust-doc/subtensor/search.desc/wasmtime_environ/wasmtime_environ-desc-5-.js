searchState.loadedDescShard("wasmtime_environ", 5, "Searches for an element of an iterator from the back that …\nSearches for an element of an iterator from the back that …\nSearches for an element of an iterator from the back that …\nSearches for an element of an iterator from the back that …\nSearches for an element of an iterator from the back that …\nAn iterator method that reduces the iterator’s elements …\nAn iterator method that reduces the iterator’s elements …\nAn iterator method that reduces the iterator’s elements …\nAn iterator method that reduces the iterator’s elements …\nAn iterator method that reduces the iterator’s elements …\nSearches for an element in an iterator from the right, …\nSearches for an element in an iterator from the right, …\nSearches for an element in an iterator from the right, …\nSearches for an element in an iterator from the right, …\nSearches for an element in an iterator from the right, …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the bounds on the remaining length of the iterator.\nReturns the size of a type in bytes.\nReturns the size of the pointed-to value in bytes.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator starting at the same point, but …\nCreates an iterator starting at the same point, but …\nCreates an iterator starting at the same point, but …\nCreates an iterator starting at the same point, but …\nCreates an iterator starting at the same point, but …\nStringifies its arguments.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nSums the elements of an iterator.\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields elements based on a …\nCreates an iterator that yields elements based on a …\nCreates an iterator that yields elements based on a …\nCreates an iterator that yields elements based on a …\nCreates an iterator that yields elements based on a …\nAttribute macro applied to a function to turn it into a …\nAn implementation detail of the <code>#[test]</code> and <code>#[bench]</code> …\nEnables or disables tracing functionality used for …\nFallibly transforms an iterator into a collection, short …\nFallibly transforms an iterator into a collection, short …\nFallibly transforms an iterator into a collection, short …\nFallibly transforms an iterator into a collection, short …\nFallibly transforms an iterator into a collection, short …\nApplies function to the elements of iterator and returns …\nApplies function to the elements of iterator and returns …\nApplies function to the elements of iterator and returns …\nApplies function to the elements of iterator and returns …\nApplies function to the elements of iterator and returns …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a fallible function to …\nAn iterator method that applies a fallible function to …\nAn iterator method that applies a fallible function to …\nAn iterator method that applies a fallible function to …\nAn iterator method that applies a fallible function to …\nReduces the elements to a single one by repeatedly …\nReduces the elements to a single one by repeatedly …\nReduces the elements to a single one by repeatedly …\nReduces the elements to a single one by repeatedly …\nReduces the elements to a single one by repeatedly …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nUnstable placeholder for type ascription.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\nConverts an iterator of pairs into a pair of containers.\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\n‘Zips up’ two iterators into a single iterator of …\nA type storing a <code>usize</code> which is a power of two, and thus …\nThe metadata for a <code>Dyn = dyn SomeTrait</code> trait object type.\nThe smallest possible alignment, 1.\nThe type for metadata in pointers and references to <code>Self</code>.\n<code>*mut T</code> but non-zero and covariant.\nProvides the pointer metadata type of any pointed-to type.\nAdds an offset to a pointer (convenience for …\nGets the “address” portion of the pointer.\nCompares the <em>addresses</em> of the two pointers for equality, …\nCreates a <code>const</code> raw pointer to a place, without creating …\nCreates a <code>mut</code> raw pointer to a place, without creating an …\nReturns the alignment of the type associated with this …\nComputes the offset that needs to be applied to the …\nReturns a unique reference to the value. If the value may …\nReturns a raw pointer to the slice’s buffer.\nReturns a non-null pointer to the slice’s buffer.\nReturns the alignment as a NonZero&lt;usize&gt;.\nAcquires the underlying <code>*mut</code> pointer.\nReturns a shared reference to the value. If the value may …\nReturns a unique references to the value. In contrast to …\nReturns a shared references to the value. In contrast to …\nReturns a shared reference to a slice of possibly …\nReturns a unique reference to a slice of possibly …\nReturns the alignment as a <code>usize</code>.\nCalculates the offset from a pointer in bytes (convenience …\nCalculates the offset from a pointer in bytes.\nCalculates the distance between two pointers within the …\nCalculates the offset from a pointer in bytes (convenience …\nCalculates the distance between two pointers within the …\nCasts to a pointer of another type.\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The …\nCopies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The …\nCreates a new pointer that is dangling, but non-null and …\nCreates a new <code>NonNull</code> that is dangling, but well-aligned.\nCreates a new pointer that is dangling, but non-null and …\nExecutes the destructor (if any) of the pointed-to value.\nExecutes the destructor (if any) of the pointed-to value.\nCompares raw pointers for equality.\nExposes the “provenance” part of the pointer for …\nCompares the <em>addresses</em> of the two function pointers for …\nReturns the argument unchanged.\nConverts a <code>&amp;T</code> to a <code>NonNull&lt;T&gt;</code>.\nConverts a <code>&amp;mut T</code> to a <code>NonNull&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a mutable reference to a raw pointer.\nConverts a mutable reference to a <code>NonNull</code> pointer.\nForms a (possibly-wide) raw pointer from a data pointer …\nPerforms the same functionality as <code>std::ptr::from_raw_parts</code>…\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to a raw pointer.\nConverts a reference to a <code>NonNull</code> pointer.\nReturns a raw pointer to an element or subslice, without …\nHash a raw pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the pointer is properly aligned for <code>T</code>.\nReturns whether the pointer is aligned to <code>align</code>.\nReturns <code>true</code> if the non-null raw slice has a length of 0.\nReturns the size and alignment together as a <code>Layout</code>\nReturns the length of a non-null raw slice.\nReturns the base-2 logarithm of the alignment.\nCreates a new pointer by mapping <code>self</code>’s address to a new …\nReturns a bit mask that can be used to match this …\nExtracts the metadata component of a pointer.\nCreates a new <code>NonNull</code> if <code>ptr</code> is non-null.\nCreates an <code>Alignment</code> from a <code>usize</code>, or returns <code>None</code> if it’…\nCreates a new <code>NonNull</code>.\nCreates an <code>Alignment</code> from a power-of-two <code>usize</code>.\nCreates a null raw pointer.\nCreates a null mutable raw pointer.\nReturns the alignment for a type.\nAdds an offset to a pointer.\nCalculates the distance between two pointers within the …\nReads the value from <code>src</code> without moving it. This leaves the\nReads the value from <code>self</code> without moving it. This leaves …\nReads the value from <code>src</code> without moving it. This leaves the\nReads the value from <code>self</code> without moving it. This leaves …\nPerforms a volatile read of the value from <code>src</code> without …\nPerforms a volatile read of the value from <code>self</code> without …\nMoves <code>src</code> into the pointed <code>dst</code>, returning the previous <code>dst</code> …\nReplaces the value at <code>self</code> with <code>src</code>, returning the old …\nReturns the size of the type associated with this vtable.\nForms a raw slice from a pointer and a length.\nCreates a non-null raw slice from a thin pointer and a …\nForms a raw mutable slice from a pointer and a length.\nSubtracts an offset from a pointer (convenience for …\nCalculates the distance between two pointers within the …\nSwaps the values at two mutable locations of the same …\nSwaps the values at two mutable locations of the same …\nSwaps <code>count * size_of::&lt;T&gt;()</code> bytes between the two regions …\nDecompose a (possibly wide) pointer into its data pointer …\nCreates a new pointer with the given address and the …\nConverts an address back to a pointer, picking up some …\nConverts an address back to a mutable pointer, picking up …\nConverts an address back to a mutable pointer, picking up …\nCreates a pointer with the given address and no provenance.\nCreates a pointer with the given address and no provenance.\nCreates a pointer with the given address and no provenance.\nOverwrites a memory location with the given value without …\nOverwrites a memory location with the given value without …\nSets <code>count * size_of::&lt;T&gt;()</code> bytes of memory starting at <code>dst</code>…\nInvokes memset on the specified pointer, setting …\nOverwrites a memory location with the given value without …\nOverwrites a memory location with the given value without …\nPerforms a volatile write of a memory location with the …\nPerforms a volatile write of a memory location with the …\nA trait for getting a random value for a type.\nA source of randomness.\nFills <code>bytes</code> with random bytes.\nGenerates a random value.\nAn endpoint of a range of keys.\nAn exclusive bound.\nAn inclusive bound.\nUsed to convert a range into start and end bounds, …\nBy-value <code>Range</code> iterator.\nBy-value <code>RangeFrom</code> iterator.\nBy-value <code>RangeInclusive</code> iterator.\n<code>OneSidedRange</code> is implemented for built-in range types that …\nA (half-open) range bounded inclusively below and …\n<code>RangeBounds</code> is implemented by Rust’s built-in range …\nA range only bounded inclusively below (<code>start..</code>).\nAn unbounded range (<code>..</code>).\nA range bounded inclusively below and above (<code>start..=end</code>).\nA range only bounded exclusively above (<code>..end</code>).\nA range only bounded inclusively above (<code>..=end</code>).\nObjects that have a notion of <em>successor</em> and <em>predecessor</em> …\nAn infinite endpoint. Indicates that there is no bound in …\nReturns the value that would be obtained by taking the …\nAn internal-only helper function for <code>split_off</code> and …\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive)\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive).\nEnd index bound.\nReturns the value that would be obtained by taking the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this range into the start and end bounds. Returns …\nReturns <code>true</code> if the range contains no items.\nReturns <code>true</code> if the range contains no items.\nCreates an iterator over the elements within this range.\nCreates an iterator over the elements within this range.\nCreates an iterator over the elements within this range.\nLegacy range types\nReturns the remainder of the range being iterated over.\nReturns the remainder of the range being iterated over.\nReturns the remainder of the range being iterated over.\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nStart index bound.\nReturns the bounds on the number of <em>successor</em> steps …\nA (half-open) range bounded inclusively below and …\nA range only bounded inclusively below (<code>start..</code>).\nA range bounded inclusively below and above (<code>start..=end</code>).\nThe upper bound of the range (exclusive).\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nContains the error value\nAn iterator over the value in a <code>Ok</code> variant of a <code>Result</code>.\nAn iterator over a reference to the <code>Ok</code> variant of a <code>Result</code>.\nAn iterator over a mutable reference to the <code>Ok</code> variant of …\nContains the success value\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nReturns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nCalls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …\nConverts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.\nConverts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value.\nConverts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nCalls a function with a reference to the contained value …\nCalls a function with a reference to the contained value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the contained <code>Err</code> value, but never panics.\nReturns a consuming iterator over the possibly contained …\nReturns the contained <code>Ok</code> value, but never panics.\nReturns <code>true</code> if the result is <code>Err</code>.\nReturns <code>true</code> if the result is <code>Err</code> and the value inside of …\nReturns <code>true</code> if the result is <code>Ok</code>.\nReturns <code>true</code> if the result is <code>Ok</code> and the value inside of …\nReturns an iterator over the possibly contained value.\nReturns a mutable iterator over the possibly contained …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …\nReturns the provided default (if <code>Err</code>), or applies a …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function …\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.\nReturns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nCalls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nTransposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value, …\nReturns the contained <code>Ok</code> value or a provided default.\nReturns the contained <code>Ok</code> value or a default\nReturns the contained <code>Ok</code> value or computes it from a …\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value, …\nThe number of bytes in a bitmask with this many lanes.\nThis type, reinterpreted as bytes.\nMap from the elements of the input vector to the output …\nNumber of elements in this vector.\nSpecifies the number of lanes in a SIMD vector as a type.\nA SIMD vector mask for <code>N</code> elements of width specified by …\nThe mask element type corresponding to this element type.\nMarker trait for types that may be used as SIMD mask …\nA SIMD vector with the shape of <code>[T; N]</code> but the operations …\nSupporting trait for <code>Simd::cast</code>.  Typically doesn’t need …\nMarker trait for types that may be used as SIMD vector …\nStatically guarantees that a lane count is marked as …\nCreates a vector from the elements of another vector.\nConverts SIMD vectors to vectors of bytes\nReturns true if all elements are set, or false otherwise.\nReturns true if any element is set, or false otherwise.\nReturns an array reference containing the entire SIMD …\nReturns a mutable array reference containing the entire …\nConverts the mask to a mask of any other element size.\nTraits for comparing and ordering vectors.\nCreates a new vector from the elements of <code>first</code> and <code>second</code>.\nCreates a new mask from the elements of <code>first</code> and <code>second</code>.\nWrites a SIMD vector to the first <code>N</code> elements of a slice.\nDeinterleave two masks.\nDeinterleave two vectors.\nExtract a vector from another vector.\nExtract a vector from another vector.\nA SIMD vector with one element of type <code>f32</code>.\nA SIMD vector with 16 elements of type <code>f32</code>.\nA SIMD vector with two elements of type <code>f32</code>.\nA SIMD vector with 32 elements of type <code>f32</code>.\nA SIMD vector with four elements of type <code>f32</code>.\nA SIMD vector with 64 elements of type <code>f32</code>.\nA SIMD vector with eight elements of type <code>f32</code>.\nA SIMD vector with one element of type <code>f64</code>.\nA SIMD vector with 16 elements of type <code>f64</code>.\nA SIMD vector with two elements of type <code>f64</code>.\nA SIMD vector with 32 elements of type <code>f64</code>.\nA SIMD vector with four elements of type <code>f64</code>.\nA SIMD vector with 64 elements of type <code>f64</code>.\nA SIMD vector with eight elements of type <code>f64</code>.\nFinds the index of the first set element.\nA <code>Simd&lt;T, N&gt;</code> has a debug format like the one for <code>[T]</code>:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an array of bools to a SIMD mask.\nConverts an array to a SIMD vector.\nCreates an integer value from its representation as a byte …\nCreates a mask from a bitmask.\nConverts a vector of integers to a mask, where 0 …\nConverts a vector of integers to a mask, where 0 …\nCreates an integer value from its representation as a byte …\nCreates a native endian integer value from its memory …\nConverts a slice to a SIMD vector containing <code>slice[..N]</code>.\nReads from potentially discontiguous indices in <code>slice</code> to …\nReads from indices in <code>slice</code> to construct a SIMD vector. If …\nReads elementwise from pointers into a SIMD vector.\nReads from indices in <code>slice</code> to construct a SIMD vector. …\nConditionally read elementwise from pointers into a SIMD …\nReads from indices in <code>slice</code> to construct a SIMD vector. …\nA SIMD vector with one element of type <code>i16</code>.\nA SIMD vector with 16 elements of type <code>i16</code>.\nA SIMD vector with two elements of type <code>i16</code>.\nA SIMD vector with 32 elements of type <code>i16</code>.\nA SIMD vector with four elements of type <code>i16</code>.\nA SIMD vector with 64 elements of type <code>i16</code>.\nA SIMD vector with eight elements of type <code>i16</code>.\nA SIMD vector with one element of type <code>i32</code>.\nA SIMD vector with 16 elements of type <code>i32</code>.\nA SIMD vector with two elements of type <code>i32</code>.\nA SIMD vector with 32 elements of type <code>i32</code>.\nA SIMD vector with four elements of type <code>i32</code>.\nA SIMD vector with 64 elements of type <code>i32</code>.\nA SIMD vector with eight elements of type <code>i32</code>.\nA SIMD vector with one element of type <code>i64</code>.\nA SIMD vector with 16 elements of type <code>i64</code>.\nA SIMD vector with two elements of type <code>i64</code>.\nA SIMD vector with 32 elements of type <code>i64</code>.\nA SIMD vector with four elements of type <code>i64</code>.\nA SIMD vector with 64 elements of type <code>i64</code>.\nA SIMD vector with eight elements of type <code>i64</code>.\nA SIMD vector with one element of type <code>i8</code>.\nA SIMD vector with 16 elements of type <code>i8</code>.\nA SIMD vector with two elements of type <code>i8</code>.\nA SIMD vector with 32 elements of type <code>i8</code>.\nA SIMD vector with four elements of type <code>i8</code>.\nA SIMD vector with 64 elements of type <code>i8</code>.\nA SIMD vector with eight elements of type <code>i8</code>.\nInterleave two masks.\nInterleave two vectors.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA SIMD vector with one element of type <code>isize</code>.\nA SIMD vector with 16 elements of type <code>isize</code>.\nA SIMD vector with two elements of type <code>isize</code>.\nA SIMD vector with 32 elements of type <code>isize</code>.\nA SIMD vector with four elements of type <code>isize</code>.\nA SIMD vector with 64 elements of type <code>isize</code>.\nA SIMD vector with eight elements of type <code>isize</code>.\nReturns the number of elements in this SIMD vector.\nReads contiguous elements from <code>slice</code>. Elements are read so …\nReads contiguous elements from <code>slice</code>. Elements are read so …\nReads contiguous elements from <code>slice</code>. Each element is read …\nReads contiguous elements from <code>slice</code>. Each element is read …\nReads contiguous elements starting at <code>ptr</code>. Each element is …\nReads contiguous elements from <code>slice</code>. Each element is read …\nA SIMD mask with one element for vectors with 16-bit …\nA SIMD mask with 16 elements for vectors with 16-bit …\nA SIMD mask with two elements for vectors with 16-bit …\nA SIMD mask with 32 elements for vectors with 16-bit …\nA SIMD mask with four elements for vectors with 16-bit …\nA SIMD mask with 64 elements for vectors with 16-bit …\nA SIMD mask with eight elements for vectors with 16-bit …\nA SIMD mask with one element for vectors with 32-bit …\nA SIMD mask with 16 elements for vectors with 32-bit …\nA SIMD mask with two elements for vectors with 32-bit …\nA SIMD mask with 32 elements for vectors with 32-bit …\nA SIMD mask with four elements for vectors with 32-bit …\nA SIMD mask with 64 elements for vectors with 32-bit …\nA SIMD mask with eight elements for vectors with 32-bit …\nA SIMD mask with one element for vectors with 64-bit …\nA SIMD mask with 16 elements for vectors with 64-bit …\nA SIMD mask with two elements for vectors with 64-bit …\nA SIMD mask with 32 elements for vectors with 64-bit …\nA SIMD mask with four elements for vectors with 64-bit …\nA SIMD mask with 64 elements for vectors with 64-bit …\nA SIMD mask with eight elements for vectors with 64-bit …\nA SIMD mask with one element for vectors with 8-bit …\nA SIMD mask with 16 elements for vectors with 8-bit …\nA SIMD mask with two elements for vectors with 8-bit …\nA SIMD mask with 32 elements for vectors with 8-bit …\nA SIMD mask with four elements for vectors with 8-bit …\nA SIMD mask with 64 elements for vectors with 8-bit …\nA SIMD mask with eight elements for vectors with 8-bit …\nA SIMD mask with one element for vectors with …\nA SIMD mask with 16 elements for vectors with …\nA SIMD mask with two elements for vectors with …\nA SIMD mask with 32 elements for vectors with …\nA SIMD mask with four elements for vectors with …\nA SIMD mask with 64 elements for vectors with …\nA SIMD mask with eight elements for vectors with …\nTraits for vectors with numeric elements.\nThe portable SIMD prelude.\nTraits for vectors of pointers.\nResize a mask.\nResize a vector.\nReverse the order of the elements in the mask.\nReverse the order of the elements in the vector.\nRotates the mask such that the first <code>OFFSET</code> elements of …\nRotates the vector such that the first <code>OFFSET</code> elements of …\nRotates the mask such that the first <code>self.len() - OFFSET</code> …\nRotates the vector such that the first <code>self.len() - OFFSET</code> …\nWrites the values in a SIMD vector to potentially …\nWrites pointers elementwise into a SIMD vector.\nWrites values from a SIMD vector to multiple potentially …\nConditionally write pointers elementwise into a SIMD …\nWrites values from a SIMD vector to multiple potentially …\nChoose elements from two vectors.\nChoose elements from two masks.\nSets the value of the specified element.\nSets the value of the specified element.\nShifts the mask elements to the left by <code>OFFSET</code>, filling in …\nShifts the vector elements to the left by <code>OFFSET</code>, filling …\nShifts the mask elements to the right by <code>OFFSET</code>, filling …\nShifts the vector elements to the right by <code>OFFSET</code>, filling …\nConstructs a new SIMD vector by copying elements from …\nConstructs a mask by setting all elements to the given …\nConstructs a new SIMD vector with all elements set to the …\nConditionally write contiguous elements to <code>slice</code>. The …\nConditionally write contiguous elements starting from <code>ptr</code>. …\nConditionally write contiguous elements to <code>slice</code>. The …\nCreates a new vector from the elements of <code>vector</code>.\nSwizzle a vector of bytes according to the index vector. …\nCreates a new mask from the elements of <code>mask</code>.\nTests the value of the specified element.\nTests the value of the specified element.\nConverts a SIMD mask to an array of bools.\nConverts a SIMD vector to an array.\nReturns the memory representation of this integer as a …\nCreates a bitmask from a mask.\nConverts the mask to a vector of integers, where 0 …\nReturns the memory representation of this integer as a …\nReturns the memory representation of this integer as a …\nA SIMD vector with one element of type <code>u16</code>.\nA SIMD vector with 16 elements of type <code>u16</code>.\nA SIMD vector with two elements of type <code>u16</code>.\nA SIMD vector with 32 elements of type <code>u16</code>.\nA SIMD vector with four elements of type <code>u16</code>.\nA SIMD vector with 64 elements of type <code>u16</code>.\nA SIMD vector with eight elements of type <code>u16</code>.\nA SIMD vector with one element of type <code>u32</code>.\nA SIMD vector with 16 elements of type <code>u32</code>.\nA SIMD vector with two elements of type <code>u32</code>.\nA SIMD vector with 32 elements of type <code>u32</code>.\nA SIMD vector with four elements of type <code>u32</code>.\nA SIMD vector with 64 elements of type <code>u32</code>.\nA SIMD vector with eight elements of type <code>u32</code>.\nA SIMD vector with one element of type <code>u64</code>.\nA SIMD vector with 16 elements of type <code>u64</code>.\nA SIMD vector with two elements of type <code>u64</code>.\nA SIMD vector with 32 elements of type <code>u64</code>.\nA SIMD vector with four elements of type <code>u64</code>.\nA SIMD vector with 64 elements of type <code>u64</code>.\nA SIMD vector with eight elements of type <code>u64</code>.\nA SIMD vector with one element of type <code>u8</code>.\nA SIMD vector with 16 elements of type <code>u8</code>.\nA SIMD vector with two elements of type <code>u8</code>.\nA SIMD vector with 32 elements of type <code>u8</code>.\nA SIMD vector with four elements of type <code>u8</code>.\nA SIMD vector with 64 elements of type <code>u8</code>.\nA SIMD vector with eight elements of type <code>u8</code>.\nA SIMD vector with one element of type <code>usize</code>.\nA SIMD vector with 16 elements of type <code>usize</code>.\nA SIMD vector with two elements of type <code>usize</code>.\nA SIMD vector with 32 elements of type <code>usize</code>.\nA SIMD vector with four elements of type <code>usize</code>.\nA SIMD vector with 64 elements of type <code>usize</code>.\nA SIMD vector with eight elements of type <code>usize</code>.\nThe mask type returned by each comparison.\nParallel <code>Ord</code>.\nParallel <code>PartialEq</code>.\nParallel <code>PartialOrd</code>.\nRestrict each element to a certain interval.\nTest if each element is equal to the corresponding element …\nTest if each element is greater than or equal to the …\nTest if each element is greater than the corresponding …\nTest if each element is less than or equal to the …\nTest if each element is less than the corresponding …\nReturns the element-wise maximum with <code>other</code>.\nReturns the element-wise minimum with <code>other</code>.\nTest if each element is not equal to the corresponding …\nBit representation of this SIMD vector type.\nA SIMD vector with a different element type.\nA SIMD vector with a different element type.\nA SIMD vector with a different element type.\nMask type used for manipulating this SIMD vector type.\nMask type used for manipulating this SIMD vector type.\nScalar type contained by this SIMD vector type.\nScalar type contained by this SIMD vector type.\nScalar type contained by this SIMD vector type.\nOperations on SIMD vectors of floats.\nOperations on SIMD vectors of signed integers.\nOperations on SIMD vectors of unsigned integers.\nA SIMD vector of unsigned integers with the same element …\nProduces a vector where every element has the absolute …\nLanewise absolute value, implemented in Rust. Every …\nLanewise absolute difference. Every element becomes the …\nLanewise absolute difference. Every element becomes the …\nPerforms elementwise conversion of this vector’s …\nPerforms elementwise conversion of this vector’s …\nPerforms elementwise conversion of this vector’s …\nReturns each element with the magnitude of <code>self</code> and the …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nRaw transmutation from an unsigned integer vector type …\nReturns true for each element if its value is neither …\nReturns true for each element if its value is positive …\nReturns true for each element if its value is <code>NaN</code>.\nReturns true for each negative element and false if it is …\nReturns true for each element if its value is neither …\nReturns true for each positive element and false if it is …\nReturns true for each element if it has a negative sign, …\nReturns true for each element if it has a positive sign, …\nReturns true for each element if its value is subnormal.\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nTakes the reciprocal (inverse) of each element, <code>1/x</code>.\nReturns the cumulative bitwise “and” across the …\nReturns the cumulative bitwise “and” across the …\nReturns the maximum element in the vector.\nReturns the maximum element in the vector.\nReturns the maximum element in the vector.\nReturns the minimum element in the vector.\nReturns the minimum element in the vector.\nReturns the minimum element in the vector.\nReturns the cumulative bitwise “or” across the …\nReturns the cumulative bitwise “or” across the …\nReducing multiply.  Returns the product of the elements of …\nReturns the product of the elements of the vector, with …\nReturns the product of the elements of the vector, with …\nReturns the sum of the elements of the vector.\nReturns the sum of the elements of the vector, with …\nReturns the sum of the elements of the vector, with …\nReturns the cumulative bitwise “xor” across the …\nReturns the cumulative bitwise “xor” across the …\nReverses the order of bits in each elemnent. The least …\nReverses the order of bits in each elemnent. The least …\nLanewise saturating absolute value, implemented in Rust. …\nLanewise saturating add.\nLanewise saturating add.\nLanewise saturating negation, implemented in Rust. As …\nLanewise saturating subtract.\nLanewise saturating subtract.\nReplaces each element with a number that represents its …\nReturns numbers representing the sign of each element.\nRestrict each element to a certain interval unless it is …\nReturns the maximum of each element.\nReturns the minimum of each element.\nReverses the byte order of each element.\nReverses the byte order of each element.\nRaw transmutation to an unsigned integer vector type with …\nConverts each element from radians to degrees.\nRounds toward zero and converts to the same-width integer …\nConverts each element from degrees to radians.\nReturns the number of trailing ones in the binary …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nWrapping negation.\nBit representation of this SIMD vector type.\nA SIMD vector with a different element type.\nA SIMD vector with a different element type.\nA SIMD vector with a different element type.\nVector of const pointers with the same number of elements.\nVector of const pointers with the same number of elements.\nVector of constant pointers to the same type.\nVector of <code>isize</code> with the same number of elements.\nVector of <code>isize</code> with the same number of elements.\nA SIMD vector mask for <code>N</code> elements of width specified by …\nMask type used for manipulating this SIMD vector type.\nMask type used for manipulating this SIMD vector type.\nMask type used for manipulating this SIMD vector type.\nMask type used for manipulating this SIMD vector type.\nThe mask type returned by each comparison.\nVector of mutable pointers to the same type.\nScalar type contained by this SIMD vector type.\nScalar type contained by this SIMD vector type.\nScalar type contained by this SIMD vector type.\nA SIMD vector with the shape of <code>[T; N]</code> but the operations …\nOperations on SIMD vectors of constant pointers.\nOperations on SIMD vectors of floats.\nOperations on SIMD vectors of signed integers.\nOperations on SIMD vectors of mutable pointers.\nParallel <code>Ord</code>.\nParallel <code>PartialEq</code>.\nParallel <code>PartialOrd</code>.\nOperations on SIMD vectors of unsigned integers.\nA SIMD vector of unsigned integers with the same element …\nVector of <code>usize</code> with the same number of elements.\nVector of <code>usize</code> with the same number of elements.\nProduces a vector where every element has the absolute …\nLanewise absolute value, implemented in Rust. Every …\nLanewise absolute difference. Every element becomes the …\nLanewise absolute difference. Every element becomes the …\nGets the “address” portion of the pointer.\nGets the “address” portion of the pointer.\nPerforms elementwise conversion of this vector’s …\nPerforms elementwise conversion of this vector’s …\nPerforms elementwise conversion of this vector’s …\nCasts to a pointer of another type.\nCasts to a pointer of another type.\nChanges constness without changing the type.\nChanges constness without changing the type.\nReturns each element with the magnitude of <code>self</code> and the …\nReturns the number of ones in the binary representation of …\nReturns the number of ones in the binary representation of …\nReturns the number of zeros in the binary representation …\nReturns the number of zeros in the binary representation …\nExposes the “provenance” part of the pointer for …\nExposes the “provenance” part of the pointer for …\nA SIMD vector with one element of type <code>f32</code>.\nA SIMD vector with 16 elements of type <code>f32</code>.\nA SIMD vector with two elements of type <code>f32</code>.\nA SIMD vector with 32 elements of type <code>f32</code>.\nA SIMD vector with four elements of type <code>f32</code>.\nA SIMD vector with 64 elements of type <code>f32</code>.\nA SIMD vector with eight elements of type <code>f32</code>.\nA SIMD vector with one element of type <code>f64</code>.\nA SIMD vector with 16 elements of type <code>f64</code>.\nA SIMD vector with two elements of type <code>f64</code>.\nA SIMD vector with 32 elements of type <code>f64</code>.\nA SIMD vector with four elements of type <code>f64</code>.\nA SIMD vector with 64 elements of type <code>f64</code>.\nA SIMD vector with eight elements of type <code>f64</code>.\nRaw transmutation from an unsigned integer vector type …\nA SIMD vector with one element of type <code>i16</code>.\nA SIMD vector with 16 elements of type <code>i16</code>.\nA SIMD vector with two elements of type <code>i16</code>.\nA SIMD vector with 32 elements of type <code>i16</code>.\nA SIMD vector with four elements of type <code>i16</code>.\nA SIMD vector with 64 elements of type <code>i16</code>.\nA SIMD vector with eight elements of type <code>i16</code>.\nA SIMD vector with one element of type <code>i32</code>.\nA SIMD vector with 16 elements of type <code>i32</code>.\nA SIMD vector with two elements of type <code>i32</code>.\nA SIMD vector with 32 elements of type <code>i32</code>.\nA SIMD vector with four elements of type <code>i32</code>.\nA SIMD vector with 64 elements of type <code>i32</code>.\nA SIMD vector with eight elements of type <code>i32</code>.\nA SIMD vector with one element of type <code>i64</code>.\nA SIMD vector with 16 elements of type <code>i64</code>.\nA SIMD vector with two elements of type <code>i64</code>.\nA SIMD vector with 32 elements of type <code>i64</code>.\nA SIMD vector with four elements of type <code>i64</code>.\nA SIMD vector with 64 elements of type <code>i64</code>.\nA SIMD vector with eight elements of type <code>i64</code>.\nA SIMD vector with one element of type <code>i8</code>.\nA SIMD vector with 16 elements of type <code>i8</code>.\nA SIMD vector with two elements of type <code>i8</code>.\nA SIMD vector with 32 elements of type <code>i8</code>.\nA SIMD vector with four elements of type <code>i8</code>.\nA SIMD vector with 64 elements of type <code>i8</code>.\nA SIMD vector with eight elements of type <code>i8</code>.\nReturns true for each element if its value is neither …\nReturns true for each element if its value is positive …\nReturns true for each element if its value is <code>NaN</code>.\nReturns true for each negative element and false if it is …\nReturns true for each element if its value is neither …\nReturns <code>true</code> for each element that is null.\nReturns <code>true</code> for each element that is null.\nReturns true for each positive element and false if it is …\nReturns true for each element if it has a negative sign, …\nReturns true for each element if it has a positive sign, …\nReturns true for each element if its value is subnormal.\nA SIMD vector with one element of type <code>isize</code>.\nA SIMD vector with 16 elements of type <code>isize</code>.\nA SIMD vector with two elements of type <code>isize</code>.\nA SIMD vector with 32 elements of type <code>isize</code>.\nA SIMD vector with four elements of type <code>isize</code>.\nA SIMD vector with 64 elements of type <code>isize</code>.\nA SIMD vector with eight elements of type <code>isize</code>.\nReturns the number of leading ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of leading zeros in the binary …\nReturns the number of leading zeros in the binary …\nA SIMD mask with one element for vectors with 16-bit …\nA SIMD mask with 16 elements for vectors with 16-bit …\nA SIMD mask with two elements for vectors with 16-bit …\nA SIMD mask with 32 elements for vectors with 16-bit …\nA SIMD mask with four elements for vectors with 16-bit …\nA SIMD mask with 64 elements for vectors with 16-bit …\nA SIMD mask with eight elements for vectors with 16-bit …\nA SIMD mask with one element for vectors with 32-bit …\nA SIMD mask with 16 elements for vectors with 32-bit …\nA SIMD mask with two elements for vectors with 32-bit …\nA SIMD mask with 32 elements for vectors with 32-bit …\nA SIMD mask with four elements for vectors with 32-bit …\nA SIMD mask with 64 elements for vectors with 32-bit …\nA SIMD mask with eight elements for vectors with 32-bit …\nA SIMD mask with one element for vectors with 64-bit …\nA SIMD mask with 16 elements for vectors with 64-bit …\nA SIMD mask with two elements for vectors with 64-bit …\nA SIMD mask with 32 elements for vectors with 64-bit …\nA SIMD mask with four elements for vectors with 64-bit …\nA SIMD mask with 64 elements for vectors with 64-bit …\nA SIMD mask with eight elements for vectors with 64-bit …\nA SIMD mask with one element for vectors with 8-bit …\nA SIMD mask with 16 elements for vectors with 8-bit …\nA SIMD mask with two elements for vectors with 8-bit …\nA SIMD mask with 32 elements for vectors with 8-bit …\nA SIMD mask with four elements for vectors with 8-bit …\nA SIMD mask with 64 elements for vectors with 8-bit …\nA SIMD mask with eight elements for vectors with 8-bit …\nA SIMD mask with one element for vectors with …\nA SIMD mask with 16 elements for vectors with …\nA SIMD mask with two elements for vectors with …\nA SIMD mask with 32 elements for vectors with …\nA SIMD mask with four elements for vectors with …\nA SIMD mask with 64 elements for vectors with …\nA SIMD mask with eight elements for vectors with …\nTakes the reciprocal (inverse) of each element, <code>1/x</code>.\nReturns the cumulative bitwise “and” across the …\nReturns the cumulative bitwise “and” across the …\nReturns the maximum element in the vector.\nReturns the maximum element in the vector.\nReturns the maximum element in the vector.\nReturns the minimum element in the vector.\nReturns the minimum element in the vector.\nReturns the minimum element in the vector.\nReturns the cumulative bitwise “or” across the …\nReturns the cumulative bitwise “or” across the …\nReducing multiply.  Returns the product of the elements of …\nReturns the product of the elements of the vector, with …\nReturns the product of the elements of the vector, with …\nReturns the sum of the elements of the vector.\nReturns the sum of the elements of the vector, with …\nReturns the sum of the elements of the vector, with …\nReturns the cumulative bitwise “xor” across the …\nReturns the cumulative bitwise “xor” across the …\nReverses the order of bits in each elemnent. The least …\nReverses the order of bits in each elemnent. The least …\nLanewise saturating absolute value, implemented in Rust. …\nLanewise saturating add.\nLanewise saturating add.\nLanewise saturating negation, implemented in Rust. As …\nLanewise saturating subtract.\nLanewise saturating subtract.\nReplaces each element with a number that represents its …\nReturns numbers representing the sign of each element.\nRestrict each element to a certain interval unless it is …\nRestrict each element to a certain interval.\nTest if each element is equal to the corresponding element …\nTest if each element is greater than or equal to the …\nTest if each element is greater than the corresponding …\nTest if each element is less than or equal to the …\nTest if each element is less than the corresponding …\nReturns the maximum of each element.\nReturns the element-wise maximum with <code>other</code>.\nReturns the minimum of each element.\nReturns the element-wise minimum with <code>other</code>.\nTest if each element is not equal to the corresponding …\nConstructs a new SIMD vector by copying elements from …\nReverses the byte order of each element.\nReverses the byte order of each element.\nRaw transmutation to an unsigned integer vector type with …\nConverts each element from radians to degrees.\nRounds toward zero and converts to the same-width integer …\nConverts each element from degrees to radians.\nReturns the number of trailing ones in the binary …\nReturns the number of trailing ones in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of trailing zeros in the binary …\nA SIMD vector with one element of type <code>u16</code>.\nA SIMD vector with 16 elements of type <code>u16</code>.\nA SIMD vector with two elements of type <code>u16</code>.\nA SIMD vector with 32 elements of type <code>u16</code>.\nA SIMD vector with four elements of type <code>u16</code>.\nA SIMD vector with 64 elements of type <code>u16</code>.\nA SIMD vector with eight elements of type <code>u16</code>.\nA SIMD vector with one element of type <code>u32</code>.\nA SIMD vector with 16 elements of type <code>u32</code>.\nA SIMD vector with two elements of type <code>u32</code>.\nA SIMD vector with 32 elements of type <code>u32</code>.\nA SIMD vector with four elements of type <code>u32</code>.\nA SIMD vector with 64 elements of type <code>u32</code>.\nA SIMD vector with eight elements of type <code>u32</code>.\nA SIMD vector with one element of type <code>u64</code>.\nA SIMD vector with 16 elements of type <code>u64</code>.\nA SIMD vector with two elements of type <code>u64</code>.\nA SIMD vector with 32 elements of type <code>u64</code>.\nA SIMD vector with four elements of type <code>u64</code>.\nA SIMD vector with 64 elements of type <code>u64</code>.\nA SIMD vector with eight elements of type <code>u64</code>.\nA SIMD vector with one element of type <code>u8</code>.\nA SIMD vector with 16 elements of type <code>u8</code>.\nA SIMD vector with two elements of type <code>u8</code>.\nA SIMD vector with 32 elements of type <code>u8</code>.\nA SIMD vector with four elements of type <code>u8</code>.\nA SIMD vector with 64 elements of type <code>u8</code>.\nA SIMD vector with eight elements of type <code>u8</code>.\nA SIMD vector with one element of type <code>usize</code>.\nA SIMD vector with 16 elements of type <code>usize</code>.\nA SIMD vector with two elements of type <code>usize</code>.\nA SIMD vector with 32 elements of type <code>usize</code>.\nA SIMD vector with four elements of type <code>usize</code>.\nA SIMD vector with 64 elements of type <code>usize</code>.\nA SIMD vector with eight elements of type <code>usize</code>.\nCreates a new pointer with the given address.\nCreates a new pointer with the given address.\nConverts an address back to a pointer, picking up a …\nConverts an address back to a pointer, picking up a …\nConverts an address to a pointer without giving it any …\nConverts an address to a pointer without giving it any …\nCalculates the offset from a pointer using wrapping …\nCalculates the offset from a pointer using wrapping …\nWrapping negation.\nCalculates the offset from a pointer using wrapping …\nCalculates the offset from a pointer using wrapping …\nCalculates the offset from a pointer using wrapping …\nCalculates the offset from a pointer using wrapping …\nVector of const pointers with the same number of elements.\nVector of const pointers with the same number of elements.\nVector of constant pointers to the same type.\nVector of <code>isize</code> with the same number of elements.\nVector of <code>isize</code> with the same number of elements.\nMask type used for manipulating this SIMD vector type.\nMask type used for manipulating this SIMD vector type.\nVector of mutable pointers to the same type.\nOperations on SIMD vectors of constant pointers.\nOperations on SIMD vectors of mutable pointers.\nVector of <code>usize</code> with the same number of elements.\nVector of <code>usize</code> with the same number of elements.\nGets the “address” portion of the pointer.\nGets the “address” portion of the pointer.\nCasts to a pointer of another type.\nCasts to a pointer of another type.\nChanges constness without changing the type.\nChanges constness without changing the type.\nExposes the “provenance” part of the pointer for …\nExposes the “provenance” part of the pointer for …\nReturns <code>true</code> for each element that is null.\nReturns <code>true</code> for each element that is null.\nCreates a new pointer with the given address.\nCreates a new pointer with the given address.\nConverts an address back to a pointer, picking up a …\nConverts an address back to a pointer, picking up a …\nConverts an address to a pointer without giving it any …\nConverts an address to a pointer without giving it any …\nCalculates the offset from a pointer using wrapping …\nCalculates the offset from a pointer using wrapping …\nCalculates the offset from a pointer using wrapping …\nCalculates the offset from a pointer using wrapping …\nCalculates the offset from a pointer using wrapping …\nCalculates the offset from a pointer using wrapping …\nAn iterator over a slice in (non-overlapping) chunks (<code>N</code> …\nAn iterator over a slice in (non-overlapping) mutable …\nA windowed iterator over a slice in overlapping chunks (<code>N</code> …\nAn iterator over slice in (non-overlapping) chunks …\nAn iterator over slice in (non-overlapping) mutable chunks …\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over the escaped version of a byte slice.\nThe error type returned by <code>get_disjoint_mut</code>.\nA helper trait for <code>&lt;[T]&gt;::get_disjoint_mut()</code>.\nAn index provided was out-of-bounds for the slice.\nThe element type of the slice being matched on.\nImmutable slice iterator\nMutable slice iterator.\nThe output type returned by methods.\nTwo indices provided were overlapping.\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) chunks (…\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over a slice in (non-overlapping) mutable …\nAn iterator over subslices separated by elements that …\nAn iterator over the subslices of the vector which are …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nA helper trait used for indexing operations.\nPatterns in slices - currently, only used by <code>strip_prefix</code> …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over the mutable subslices of the vector which …\nAn iterator over subslices separated by elements that …\nAn iterator over subslices separated by elements that …\nAn iterator over overlapping subslices of length <code>size</code>.\nViews the underlying data as a mutable subslice of the …\nCurrently, the consumers of <code>SlicePattern</code> need a slice.\nViews the underlying data as a subslice of the original …\nViews the underlying data as a subslice of the original …\nReturns a slice which contains items not yet handled by …\nCreates an empty slice iterator.\nCreates an empty slice iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a reference to T into a slice of length 1 …\nForms a mutable slice from a pointer range.\nForms a slice from a pointer range.\nForms a slice from a pointer and a length.\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to T into a slice of length 1 …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nReturns a pointer to the output at this location, without …\nReturns a mutable pointer to the output at this location, …\nReturns a shared reference to the output at this location, …\nReturns a mutable reference to the output at this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the remainder of the original slice that is not …\nReturns the remainder of the original slice that is not …\nReturns the remainder of the original slice that is not …\nViews the underlying data as a subslice of the original …\nReturns <code>true</code> if <code>self</code> is in bounds for <code>len</code> slice elements.\nReturns <code>true</code> if <code>self</code> overlaps with <code>other</code>.\nPure Rust memchr implementation, taken from rust-memchr\nPerforms bounds checking of a range.\nReturns the remainder of the original slice that is not …\nReturns the remainder of the original slice that is not …\nReturns the remainder of the original slice that is not …\nPerforms bounds checking of a range without panicking.\nReturns the first index matching the byte <code>x</code> in <code>text</code>.\nReturns the last index matching the byte <code>x</code> in <code>text</code>.\nAn iterator over the bytes of a string slice.\nAn iterator over the <code>char</code>s of a string slice, and their …\nAn iterator over the <code>char</code>s of a string slice.\nAn iterator of <code>u16</code> over the string encoded as UTF-16.\nThe associated error which can be returned from parsing.\nThe return type of <code>str::escape_debug</code>.\nThe return type of <code>str::escape_default</code>.\nThe return type of <code>str::escape_unicode</code>.\nParse a value from a string\nAn iterator over the lines of a string, as string slices.\nCreated with the method <code>lines_any</code>.\nCreated with the method <code>match_indices</code>.\nCreated with the method <code>matches</code>.\nAn error returned when parsing a <code>bool</code> using <code>from_str</code> fails\nCreated with the method <code>rmatch_indices</code>.\nCreated with the method <code>rmatches</code>.\nCreated with the method <code>rsplit</code>.\nCreated with the method <code>rsplitn</code>.\nCreated with the method <code>rsplit_terminator</code>.\nCreated with the method <code>split</code>.\nAn iterator over the non-ASCII-whitespace substrings of a …\nAn iterator over the substrings of a string, terminated by …\nCreated with the method <code>splitn</code>.\nCreated with the method <code>split_terminator</code>.\nAn iterator over the non-whitespace substrings of a string,\nAn item returned by the <code>Utf8Chunks</code> iterator.\nAn iterator used to decode a slice of mostly UTF-8 bytes …\nErrors which can occur when attempting to interpret a …\nViews the underlying data as a subslice of the original …\nViews the underlying data as a subslice of the original …\nProvides more information about the failure:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>&amp;str</code> from a pointer and a length.\nCreates a <code>&amp;mut str</code> from a pointer and a length.\nParses a string <code>s</code> to return a value of this type.\nConverts a slice of bytes to a string slice.\nConverts a mutable slice of bytes to a mutable string …\nConverts a slice of bytes to a string slice without …\nConverts a slice of bytes to a string slice without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the invalid sequence that caused a failure.\nReads the next code point out of a byte iterator (assuming …\nReturns the byte position of the next character, or the …\nThe string Pattern API.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns remainder of the split string.\nReturns the remaining lines of the split string.\nReturns remainder of the split string\nReturns remainder of the split string.\nGiven a first byte, determines how many bytes are in this …\nReturns the next validated UTF-8 substring.\nReturns the index in the given string up to which valid …\nAssociated type for <code>&lt;&amp;[char; N] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;[char; N] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nType returned by char types.\nAssociated type for <code>&lt;F as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;char as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nAssociated type for <code>&lt;&amp;[char] as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nExpresses that every byte of the haystack has been …\nA marker trait to express that a <code>ReverseSearcher</code> can be …\nExpresses that a match of the pattern has been found at …\nA string pattern.\nExpresses that <code>haystack[a..b]</code> has been rejected as a …\nA reverse searcher for a string pattern.\nResult of calling <code>Searcher::next()</code> or …\nA searcher for a string pattern.\nAssociated searcher for this pattern\nAssociated type for <code>&lt;&amp;str as Pattern&gt;::Searcher&lt;&#39;a&gt;</code>.\nType returned by String and str types.\nResult of calling <code>Pattern::as_utf8_pattern()</code>. Can be used …\nReturns the pattern as utf-8 bytes if possible.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGetter for the underlying string to be searched in\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs the associated searcher from <code>self</code> and the …\nChecks whether the pattern matches anywhere in the haystack\nChecks whether the pattern matches at the front of the …\nChecks whether the pattern matches at the back of the …\nPerforms the next search step starting from the front.\nPerforms the next search step starting from the back.\nFinds the next <code>Match</code> result. See <code>next()</code>.\nFinds the next <code>Match</code> result. See <code>next_back()</code>.\nFinds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.\nFinds the next <code>Reject</code> result. See <code>next_back()</code>.\nRemoves the pattern from the front of haystack, if it …\nRemoves the pattern from the back of haystack, if it …\n<code>Exclusive</code> provides only <em>mutable</em> access, also referred to …\nAtomic types\nReturns the argument unchanged.\nBuild a <em>mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from a <em>mutable</em>…\nBuild a <em>pinned mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from a …\nGets exclusive access to the underlying value.\nGets pinned exclusive access to the underlying value.\nCalls <code>U::from(self)</code>.\nUnwrap the value contained in the <code>Exclusive</code>\nWrap a value in an <code>Exclusive</code>\nAn <code>AtomicBool</code> initialized to <code>false</code>.\nAn <code>AtomicIsize</code> initialized to <code>0</code>.\nAn <code>AtomicUsize</code> initialized to <code>0</code>.\nHas the effects of both <code>Acquire</code> and <code>Release</code> together: For …\nWhen coupled with a load, if the loaded value was written …\nA boolean type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nA raw pointer type which can be safely shared between …\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAtomic memory orderings\nNo ordering constraints, only atomic operations.\nWhen coupled with a store, all previous operations become …\nLike <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …\nReturns a mutable pointer to the underlying <code>bool</code>.\nReturns a mutable pointer to the underlying pointer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nA “compiler-only” atomic fence.\nCreates an <code>AtomicBool</code> initialized to <code>false</code>.\nCreates a null <code>AtomicPtr&lt;T&gt;</code>.\nAn atomic fence.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nLogical “and” with a boolean value.\nPerforms a bitwise “and” operation on the address of …\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nOffsets the pointer’s address by adding <code>val</code> <em>bytes</em>, …\nOffsets the pointer’s address by subtracting <code>val</code> <em>bytes</em>, …\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nLogical “nand” with a boolean value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nLogical “not” with a boolean value.\nLogical “or” with a boolean value.\nPerforms a bitwise “or” operation on the address of …\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nOffsets the pointer’s address by adding <code>val</code> (in units of …\nOffsets the pointer’s address by subtracting <code>val</code> (in …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nLogical “xor” with a boolean value.\nPerforms a bitwise “xor” operation on the address of …\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nConverts a <code>bool</code> into an <code>AtomicBool</code>.\nReturns the argument unchanged.\nConverts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i8</code> into an <code>AtomicI8</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>u8</code> into an <code>AtomicU8</code>.\nConverts an <code>i16</code> into an <code>AtomicI16</code>.\nReturns the argument unchanged.\nConverts an <code>u16</code> into an <code>AtomicU16</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> into an <code>AtomicI32</code>.\nReturns the argument unchanged.\nConverts an <code>u32</code> into an <code>AtomicU32</code>.\nConverts an <code>i64</code> into an <code>AtomicI64</code>.\nReturns the argument unchanged.\nConverts an <code>u64</code> into an <code>AtomicU64</code>.\nReturns the argument unchanged.\nConverts an <code>isize</code> into an <code>AtomicIsize</code>.\nReturns the argument unchanged.\nConverts an <code>usize</code> into an <code>AtomicUsize</code>.\nReturns the argument unchanged.\nGets atomic access to a <code>&amp;mut bool</code>.\nGets atomic access to a pointer.\nGet atomic access to a <code>&amp;mut i8</code>.\nGet atomic access to a <code>&amp;mut u8</code>.\nGet atomic access to a <code>&amp;mut i16</code>.\nGet atomic access to a <code>&amp;mut u16</code>.\nGet atomic access to a <code>&amp;mut i32</code>.\nGet atomic access to a <code>&amp;mut u32</code>.\nGet atomic access to a <code>&amp;mut i64</code>.\nGet atomic access to a <code>&amp;mut u64</code>.\nGet atomic access to a <code>&amp;mut isize</code>.\nGet atomic access to a <code>&amp;mut usize</code>.\nGets atomic access to a <code>&amp;mut [bool]</code> slice.\nGets atomic access to a slice of pointers.\nGet atomic access to a <code>&amp;mut [i8]</code> slice.\nGet atomic access to a <code>&amp;mut [u8]</code> slice.\nGet atomic access to a <code>&amp;mut [i16]</code> slice.\nGet atomic access to a <code>&amp;mut [u16]</code> slice.\nGet atomic access to a <code>&amp;mut [i32]</code> slice.\nGet atomic access to a <code>&amp;mut [u32]</code> slice.\nGet atomic access to a <code>&amp;mut [i64]</code> slice.\nGet atomic access to a <code>&amp;mut [u64]</code> slice.\nGet atomic access to a <code>&amp;mut [isize]</code> slice.\nGet atomic access to a <code>&amp;mut [usize]</code> slice.\nCreates a new <code>AtomicBool</code> from a pointer.\nCreates a new <code>AtomicPtr</code> from a pointer.\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nReturns a mutable reference to the underlying <code>bool</code>.\nReturns a mutable reference to the underlying pointer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nGets non-atomic access to a <code>&amp;mut [AtomicBool]</code> slice.\nGets non-atomic access to a <code>&amp;mut [AtomicPtr]</code> slice.\nGet non-atomic access to a <code>&amp;mut [AtomicI8]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU8]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI16]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU16]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI32]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU32]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI64]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU64]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicIsize]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicUsize]</code> slice\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nLoads a value from the bool.\nLoads a value from the pointer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nCreates a new <code>AtomicBool</code>.\nCreates a new <code>AtomicPtr</code>.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nSignals the processor that it is inside a busy-wait …\nStores a value into the bool.\nStores a value into the pointer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the bool, returning the previous value.\nStores a value into the pointer, returning the previous …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nFetches the value, applies a function to it that it return …\nThe context of an asynchronous task.\nA Builder used to construct a <code>Context</code> instance with …\nA <code>LocalWaker</code> is analogous to a <code>Waker</code>, but it does not …\nRepresents that a value is not ready yet.\nIndicates whether a value is available or if the current …\nA <code>RawWaker</code> allows the implementor of a task executor to …\nA virtual function pointer table (vtable) that specifies …\nRepresents that a value is immediately ready.\nA <code>Waker</code> is a handle for waking up a task by notifying its …\nBuilds the <code>Context</code>.\nAssigns a clone of <code>source</code> to <code>self</code>, unless …\nGets the <code>data</code> pointer used to create this <code>Waker</code>.\nGets the <code>data</code> pointer used to create this <code>LocalWaker</code>.\nReturns a reference to the extension data for the current …\nSets the value for the extension data on <code>Context</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUse a <code>Wake</code>-able type as a <code>Waker</code>.\nReturns the argument unchanged.\nUse a <code>Wake</code>-able type as a <code>LocalWaker</code>.\nReturns the argument unchanged.\nMoves the value into a <code>Poll::Ready</code> to make a <code>Poll&lt;T&gt;</code>.\nUse a <code>Wake</code>-able type as a <code>RawWaker</code>.\nUse a <code>Wake</code>-able type as a <code>RawWaker</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a ContextBuilder from an existing Context.\nCreates a new <code>Waker</code> from <code>RawWaker</code>.\nCreates a new <code>LocalWaker</code> from <code>RawWaker</code>.\nCreates a new <code>Context</code> from a <code>&amp;Waker</code>.\nCreates a ContextBuilder from a Waker.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the poll is a <code>Pending</code> value.\nReturns <code>true</code> if the poll is a <code>Poll::Ready</code> value.\nReturns a reference to the <code>LocalWaker</code> for the current task.\nSets the value for the local waker on <code>Context</code>.\nMaps a <code>Poll&lt;T&gt;</code> to <code>Poll&lt;U&gt;</code> by applying a function to a …\nMaps a <code>Poll::Ready&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …\nMaps a <code>Poll::Ready&lt;Result&lt;T, E&gt;&gt;</code> to …\nMaps a <code>Poll&lt;Option&lt;Result&lt;T, E&gt;&gt;&gt;</code> to …\nMaps a <code>Poll&lt;Result&lt;T, E&gt;&gt;</code> to <code>Poll&lt;Result&lt;U, E&gt;&gt;</code> by …\nCreates a new <code>Waker</code> from the provided <code>data</code> pointer and …\nCreates a new <code>LocalWaker</code> from the provided <code>data</code> pointer …\nCreates a new <code>RawWaker</code> from the provided <code>data</code> pointer and …\nCreates a new <code>RawWakerVTable</code> from the provided <code>clone</code>, <code>wake</code>,\nReturns a reference to a <code>Waker</code> that does nothing when used.\nReturns a reference to a <code>LocalWaker</code> that does nothing when …\nExtracts the successful type of a <code>Poll&lt;T&gt;</code>.\nGets the <code>vtable</code> pointer used to create this <code>Waker</code>.\nGets the <code>vtable</code> pointer used to create this <code>LocalWaker</code>.\nWakes up the task associated with this <code>Waker</code>.\nWakes up the task associated with this <code>LocalWaker</code>.\nWakes up the task associated with this <code>Waker</code> without …\nWakes up the task associated with this <code>LocalWaker</code> without …\nReturns a reference to the <code>Waker</code> for the current task.\nSets the value for the waker on <code>Context</code>.\nReturns <code>true</code> if this <code>Waker</code> and another <code>Waker</code> would awake …\nReturns <code>true</code> if this <code>LocalWaker</code> and another <code>LocalWaker</code> …\nA <code>Duration</code> type to represent a span of time, typically …\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nThe duration of one nanosecond.\nThe duration of one second.\nAn error which can be returned when converting a …\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f32</code>.\nDivides <code>Duration</code> by <code>Duration</code> and returns <code>f64</code>.\nDivides <code>Duration</code> by <code>f32</code>.\nDivides <code>Duration</code> by <code>f64</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of weeks.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this <code>Duration</code> spans no time.\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nCreates a new <code>Duration</code> from the specified number of whole …\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nChecks that the preconditions of an unsafe function are …\nReturns whether we should perform some UB-checking at …\nThe version of Unicode that the Unicode parts of <code>char</code> and …\nUnwrap an unsafe binder into its underlying type.\nWrap a type into an unsafe binder.\nThe largest value that can be represented by this integer …\nThe smallest value that can be represented by this integer …\nFlag for the <code>e_flags</code> field in the ELF header indicating a …\nFlag for the <code>e_flags</code> field in the ELF header indicating a …\nFiller for the <code>os_abi</code> field of the ELF header.\nThis is the name of the section in the final ELF image …\nA custom Wasmtime-specific section of our compilation …\nThis is the name of the section in the final ELF image …\nThis is the name of the section in the final ELF image …\nA custom binary-encoded section of wasmtime compilation …\nA custom section which consists of just 1 byte which is …\nThis is the name of the section in the final ELF image …\nA bincode-encoded section containing engine-specific …\nReturns the argument unchanged.\nReturns the libcall corresponding to the provided symbol …\nCalls <code>U::from(self)</code>.\nReturns the symbol name in object files associated with …\nPacked representation of <code>Option&lt;T&gt;</code>.\nTypes that have a reserved value which can’t be created …\nCreate a default packed option representing <code>None</code>.\nExpand the packed option into a normal <code>Option</code>.\nUnwrap a packed <code>Some</code> value or panic.\nConvert <code>t</code> into a packed <code>Some(x)</code>.\nConvert an option into its packed equivalent.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the packed option is a <code>None</code> value.\nChecks whether value is the reserved one.\nReturns <code>true</code> if the packed option is a <code>Some</code> value.\nMaps a <code>PackedOption&lt;T&gt;</code> to <code>Option&lt;U&gt;</code> by applying a function …\nCreate an instance of the reserved value.\nTakes the value out of the packed option, leaving a <code>None</code> …\nUnwrap a packed <code>Some</code> value or panic.\nThe data segment is active.\nThe element segment is active.\nThe component type declaration is for an alias.\nThe instance type declaration is for an alias.\nA binary reader of the WebAssembly structures and types.\nA binary reader for WebAssembly modules.\nA Wasm <code>block</code> control block.\nRepresents a block type.\nThe type is a boolean.\nA br_table entries representation.\nRepresents a canonical function in a WebAssembly component.\nRepresents options for component functions.\nA Wasm <code>catch</code> control block.\nA Wasm <code>catch_all</code> control block.\nThe type is a Unicode character.\nA successful return payload from <code>Parser::parse</code>.\nAn entry of the code section, a function, was parsed from …\nA reader for the code section of a WebAssembly module.\nIndicator of the start of the code section of a …\nThe string types in the function signature are compact …\nThe encoding format is a WebAssembly component.\nThe alias is to a component.\nThe external kind is a component.\nThe reference is to a component type.\nThe type is a component type.\nRepresents an alias in a WebAssembly component.\nA component alias section was received and the provided …\nSection reader for the component alias section\nA component canonical section was received and the …\nA reader for the canonical section of a WebAssembly …\nRepresents a defined type in a WebAssembly component.\nRepresents an export in a WebAssembly component.\nA component export section was received, and the provided …\nA reader for the export section of a WebAssembly component.\nRepresents the kind of an external items of a WebAssembly …\nRepresents the result type of a component function.\nRepresents a type of a function in a WebAssembly component.\nRepresents an import in a WebAssembly component\nA component import section was received and the provided …\nA reader for the import section of a WebAssembly component.\nRepresents an instance in a WebAssembly component.\nA component instance section was received and the provided …\nA reader for the component instance section of a …\nRepresents an argument to instantiating a WebAssembly …\nRepresents a name read from the names custom section.\nType used to iterate and parse the contents of the …\nRepresents the kind of an outer alias in a WebAssembly …\nA component section from a WebAssembly component was …\nRepresents the start function in a WebAssembly component.\nA component start section was received.\nRepresents a type in a WebAssembly component.\nRepresents part of a component type declaration in a …\nRepresents a reference to a component type.\nA component type section was received and the provided …\nA reader for the type section of a WebAssembly component.\nRepresents a value type in a WebAssembly component.\nRepresents an initialization expression.\nThe alias is to an export of a module instance.\nThe alias is to a core module.\nRepresents a core type in a WebAssembly component.\nThe alias is to a core type.\nThe component type declaration is for a core type.\nThe component type declaration is for a core type.\nA core type section was received and the provided parser …\nA reader for the core type section of a WebAssembly …\nA module or component custom section was received.\nA reader for custom sections of a WebAssembly module.\nRepresents a data segment in a core WebAssembly module.\nThe name is for the data segments.\nA module data count section was received.\nThe kind of data segment.\nA module data section was received and the provided reader …\nA reader for the data section of a WebAssembly module.\nThe element segment is declared.\nThe type is a component defined type.\nAlias for the wasm <code>externref</code> type.\nAlias for the wasm <code>externref</code> type.\nRepresents a core WebAssembly element segment.\nThe name is for the element segments.\nRepresents the items of an element segment.\nThe kind of element segment.\nA module element section was received and the provided …\nA reader for the element section of a WebAssembly module.\nA Wasm <code>else</code> control block.\nThe block produces consumes nor produces any values.\nThe supported encoding formats for the parser.\nThe end of the WebAssembly module or component was reached.\nThe end payload was validated and the types known to the …\nThe type is an enum with the given tags.\nThe type is bounded by equality.\nContains the error value\nThe tag is an exception type.\nRepresents an export in a WebAssembly module.\nThe module type definition is for an export.\nThe component type declaration is for an export.\nThe instance type declaration is for an export.\nA module export section was received, and the provided …\nA reader for the export section of a WebAssembly module.\nEach element in the table is initialized with the …\nThis element contains constant expressions used to …\nFrom reference types\nExternal types as defined here.\nThe value type is f32.\nThe value type is f64.\nAlias for the wasm <code>funcref</code> type.\nAlias for the wasm <code>funcref</code> type.\nThe type is flags with the given names.\nThe type is a 32-bit floating point number.\nThe type is a 64-bit floating point number.\nA Wasm control flow block on the control flow stack during …\nThe kind of a control flow <code>Frame</code>.\nThe instance is a from exporting local items.\nThe instance is a from exporting local items.\nA trait implemented for items that can be decoded directly …\nA function was found to be validate.\nThe external kind is a function.\nThe reference is to a function type.\nThe type is for a core function.\nThe type is a function type.\nThe external kind is a function.\nThe type is a function.\nFrom reference types\nThe type is for a function.\nResources necessary to perform validation of a function.\nRepresents a type of a function in a WebAssembly module.\nThe block is described by a function type.\nThe function type used for validation.\nValidation context for a WebAssembly function.\nExternal handle to the internal allocations used during …\nThe name is for the functions.\nRepresents a WebAssembly function body.\nA module function section was received and the provided …\nA reader for the function section of a WebAssembly module.\nThis element contains function indices.\nRepresents a core WebAssembly global.\nThe external kind is a global.\nThe type is a global.\nThe name is for the globals.\nA module global section was received and the provided …\nA reader for the global section of a WebAssembly module.\nRepresents a global’s type.\nA heap type from function references. When the proposal is …\nThe value type is i32.\nThe value type is i64.\nAn IEEE binary32 immediate floating point value, …\nAn IEEE binary64 immediate floating point value, …\nA Wasm <code>if</code> control block.\nRepresents an import in a WebAssembly module.\nThe module type definition is for an import.\nThe component type declaration is for an import.\nA module import section was received and the provided …\nA reader for the import section of a WebAssembly module.\nRepresents a reader for indirect names from the names …\nRepresents an indirect name in the names custom section.\nRepresents an instance of a WebAssembly module.\nThe external kind is an instance.\nThe reference is to an instance type.\nThe instantiation argument is a core instance.\nThe type is an instance type.\nThe alias is to an export of a component instance.\nA core instance section was received and the provided …\nA reader for the core instance section of a WebAssembly …\nRepresents an instance type declaration in a WebAssembly …\nThe instance is from instantiating a WebAssembly module.\nThe instance is from instantiating a WebAssembly component.\nRepresents an argument to instantiating a WebAssembly …\nRepresents the kind of an instantiation argument for a …\nThe name is for the function labels.\nThe function lifts a core WebAssembly function to the …\nThe type is a list of the given value type.\nThe name is for the function locals.\nAn iterator over locals in a function body.\nA reader for a function body’s locals.\nA Wasm <code>loop</code> control block.\nThe function lowers a canonical ABI function to a core …\nRepresents a memory immediate in a WebAssembly memory …\nThe memory to use if the lifting or lowering of a function …\nThe external kind is a memory.\nThe type is a memory.\nThe name is for the memories.\nA module memory section was received and the provided …\nA reader for the memory section of a WebAssembly module.\nRepresents a memory’s type.\nThe encoding format is a WebAssembly module.\nThe external kind is a core module.\nThe reference is to a core module type.\nThe type is for a core module.\nThe name is for the module.\nA core module section was received and the provided parser …\nRepresents a module type declaration in a WebAssembly …\nRepresents a name read from the names custom section.\nRepresents a name map from the names custom section.\nA reader for the name custom section of a WebAssembly …\nThe function returns zero or more named types.\nRepresents a name for an index from the names section.\nThis can be returned at any time and indicates that more …\nContains the success value\nThe payload validated, no further action need be taken.\nInstructions as defined here.\nAn iterator over a function’s operators.\nAn iterator over a function’s operators with offsets.\nA reader for a core WebAssembly function’s operators.\nThe type is an option of the given value type.\nThe alias is to an outer item.\nThe module type declaration is for an outer alias.\nRepresents the kind of an outer core alias in a …\nThe result type of the visitor.\nUsed as a performance optimization in HeapType. Call …\nA chunk was successfully parsed.\nAn incremental parser of a binary WebAssembly module or …\nThe payload validated, but it started a nested module or …\nThe data segment is passive.\nThe element segment is passive.\nValues that can be parsed from a WebAssembly module or …\nThe post-return function to use if the lifting of a …\nThe value type is a primitive type.\nThe type is one of the primitive value types.\nRepresents a primitive value type.\nA field from the producers custom section.\nRepresents a field value in the producers custom section.\nA reader for the producers custom section of a WebAssembly …\nThe realloc function to use if the lifting or lowering of …\nThe type is a record with the given fields.\nThe value type is a reference. Which type of reference is …\nThe table is initialized to all null elements.\nA reference type. When the function references feature is …\nThe result for <code>BinaryReader</code> operations.\nThe type is a result type.\nThe type is a signed 16-bit integer.\nThe type is a signed 32-bit integer.\nThe type is a signed 64-bit integer.\nThe type is a signed 8-bit integer.\nA generic structure for reading a section of a WebAssembly …\nA consuming iterator of a <code>SectionLimited</code>.\nAn iterator over a limited section iterator.\nA module start section was received.\nThe type is a string.\nA trait implemented for subsections of another outer …\nIterator/reader over the contents of a section which is …\nType information about a table defined in the table …\nThe external kind if a table.\nThe type is a table.\nThe name is for the tables.\nDifferent modes of initializing a table.\nA module table section was received and the provided …\nA reader for the table section of a WebAssembly module.\nRepresents a table’s type.\nThe external kind is a tag.\nThe type is a tag.\nRepresents a tag kind.\nA module tag section was received, and the provided reader …\nA reader for the tags section of a WebAssembly module.\nA tag’s type.\nA Wasm <code>try</code> control block.\nThe type is a tuple of the given value types.\nRepresents a type in a WebAssembly module.\nThe alias is to a component type.\nThe external kind is a type.\nThe reference is to a bounded type.\nThe alias is to a core type.\nThe module type definition is for a type.\nThe value type is a reference to a defined type.\nThe component type declaration is for a type.\nThe instance type declaration is for a type.\nThe name is for the types.\nThe block produces a singular value of the given type ([] …\nRepresents the type bounds for imports and exports.\nRepresents a reference to a type definition in a …\nA module type section was received and the provided reader …\nA reader for the type section of a WebAssembly module.\nFunction type index Note: PackedIndex may need to be …\nThe type is an unsigned 16-bit integer.\nThe type is an unsigned 32-bit integer.\nThe type is an unsigned 64-bit integer.\nThe type is an unsigned 8-bit integer.\nThe string types in the function signature are UTF-16 …\nThe string types in the function signature are UTF-8 …\nThe type is a union of the given value types.\nAn unknown name subsection.\nAn unknown name subsection.\nAn unknown section was found.\nThe function returns a singular, unnamed type.\nRepresents a 128-bit vector value.\nThe value type is v128.\nRepresents the types of values in a WebAssembly module.\nPossible return values from <code>Validator::payload</code>.\nValidator for a WebAssembly binary module or component.\nThe implementation of <code>WasmModuleResources</code> used by <code>Validator</code>…\nThe external kind is a value.\nThe reference is to a value type.\nThe type is a variant with the given cases.\nRepresents a case in a variant type.\nIndicates the header of a WebAssembly module or component.\nTrait implemented by types that can visit all <code>Operator</code> …\nFlags for features that are enabled for validation.\nTypes that qualify as Wasm function types for validation …\nIterator over the inputs of a Wasm function type.\nIterator over the outputs of a Wasm function type.\nTypes that qualify as Wasm validation database.\nAlignment, stored as <code>n</code> where the actual alignment is <code>2^n</code>\nWhether or not to allow 64-bit memory arguments in …\nWhether or not to allow 64-bit memory arguments in the …\nWhether or not to allow 64-bit memory arguments in the the …\nThe start function arguments.\nIf this <code>Payload</code> represents a section in the original wasm …\nGets the underlying bits of the 32-bit float.\nGets the underlying bits of the 64-bit float.\nThe type signature of this frame, represented as a …\nThe WebAssembly bulk memory operations proposal (enabled …\nGets the bytes of the vector value.\nReturns the number of bytes remaining in the <code>BinaryReader</code>.\nChecks that a <code>HeapType</code> is valid, notably its function …\nCheck a value type. This requires using func_type_at to …\nValidates <code>Payload::CodeSectionEntry</code>.\nValidates <code>Payload::CodeSectionStart</code>.\nValidates <code>Payload::ComponentAliasSection</code>.\nValidates <code>Payload::ComponentCanonicalSection</code>.\nValidates <code>Payload::ComponentExportSection</code>.\nValidates <code>Payload::ComponentImportSection</code>.\nValidates <code>Payload::ComponentInstanceSection</code>.\nThe WebAssembly component model proposal.\nValidates <code>Payload::ComponentSection</code>.\nValidates <code>Payload::ComponentStartSection</code>.\nValidates <code>Payload::ComponentTypeSection</code>.\nThe global’s type.\nReturns the number of frames on the control flow stack.\nValidates <code>Payload::CoreTypeSection</code>.\nReturns the count of total items within this section.\nReturns the <code>BinaryReader</code>’s current position.\nThe actual contents of the custom section.\nThe data of the data segment.\nReturns the number of bytes in the Wasm data section.\nValidates <code>Payload::DataCountSection</code>.\nThe offset, relative to the start of the original module …\nValidates <code>Payload::DataSection</code>.\nReturns the default target of this <code>br_table</code> instruction.\nDefines locals into this validator.\nReturns the number of elements.\nValidates <code>Payload::ElementSection</code>.\nThe table’s element type.\nReturns the element type at the given index.\nValidates <code>Payload::End</code>.\nEnsures the reader is at the end.\nReturns whether the <code>BinaryReader</code> has reached the end of …\nDetermines if the reader is at the end of the operators.\nThe WebAssembly exception handling proposal\nValidates <code>Payload::ExportSection</code>.\nThe WebAssembly extended_const proposal\nReturns the wasm features used for this validator.\nFunction that must be called after the last opcode has …\nWhether or not floating-point instructions are enabled.\nA helper macro to conveniently iterate over all opcodes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to read <code>Self</code> from the provided binary reader, …\nConverts the section identifier provided with the section …\nThe index to the start function.\nReturns the <code>FuncType</code> associated with the given type index.\nThe function type this tag uses.\nThe WebAssembly typed function references proposal\nValidates <code>Payload::FunctionSection</code>.\nGets a binary reader for this function body.\nGets a binary reader for the initialization expression.\nGets a binary reader from this operators reader.\nReturns a shared reference to the control flow <code>Frame</code> of the\nGets the count of locals in the function body.\nReturns the type of the local variable at the given <code>index</code> …\nGets the locals reader for this function body.\nReturns the optional value type of the value operand at …\nGets the operators reader for this function body.\nGets an operators reader for the initialization expression.\nReturns the global variable at given index.\nValidates <code>Payload::GlobalSection</code>.\nThe relevant heap type\nThe index, below which, this frame cannot modify the …\nGets a signed 128-bit integer value from the vector’s …\nValidates <code>Payload::ImportSection</code>.\nThe index of the function within the module’s function …\nThe index of the exported item.\nThe index of the argument item.\nThe index of the argument item.\nThe index of the exported item.\nThe index being named.\nThe indirect index of the name.\nGets the index type for the memory.\nThe initialization expression for the table.\nThe global’s initialization expression.\nThe number of initializations in the stack at the time of …\nInitial size of this table, in elements.\nInitial size of this memory, in wasm pages.\nReturns the type at given index if any.\nReturns the list of inputs as an iterator.\nValidates <code>Payload::InstanceSection</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this validator and returns the underlying …\nReads content of the code section.\nReturns an iterator which yields not only each item in …\nConverts to an iterator of operators paired with offsets.\nConverts this <code>FuncToValidate</code> into a <code>FuncValidator</code> using the\nWhether the type is defaultable according to function …\nReturns whether <code>BrTable</code> doesn’t have any labels apart …\nReturns whether the function index is referenced in the …\nReturns whether this value type is a “reference type”.\nDetermines if primitive value type <code>a</code> is a subtype of <code>b</code>.\nThe initial elements of the element segment.\nIterates over the types returned by the function.\nReturns the corresponding <code>ComponentExternalKind</code> for this …\nThe kind of the export.\nThe kind of the module argument.\nThe kind of the component argument.\nThe kind of data segment.\nThe kind of the element segment.\nThe kind of the export.\nThe kind of tag\nIndicator for what kind of instruction pushed this frame.\nReturns the number of <code>br_table</code> entries, not including the …\nReturns the number of input types.\nReturns the number of defined local variables in the …\nReturns the number of output types.\nUnder the function references proposal, returns whether t1 …\nMaximum alignment, stored as <code>n</code> where the actual alignment …\nOptional maximum size of the table, in elements.\nOptional maximum size of this memory, in wasm pages.\nThe index of the memory this immediate points to.\nWhether or not this is a 64-bit memory, using i64 as an …\nThe WebAssembly memory64 proposal\nReturns the linear memory at given index.\nThe WebAssembly memory control proposal\nValidates <code>Payload::MemorySection</code>.\nGet this error’s message.\nThe module being imported from.\nValidates <code>Payload::ModuleSection</code>.\nThe WebAssembly multi memory proposal\nThe WebAssembly multi-value proposal (enabled by default)\nWhether or not the global is mutable.\nThe WebAssembly <code>mutable-global</code> proposal (enabled by …\nThe name of the custom section.\nThe name of the exported item.\nThe name of the imported item.\nThe name of the module argument.\nThe name of the component argument.\nThe name of the variant case.\nThe name of the exported item.\nThe name of the imported item.\nThe name for the index.\nThe name of the field.\nThe field name.\nThe map of names within the <code>index</code> prior.\nCreates a new section reader from the provided contents.\nCreates a new reader for the specified section contents …\nCreates a new function to validate which will have the …\nConstructs <code>BinaryReader</code> type.\nCreates a new parser.\nConstructs a new <code>FunctionBody</code> for the given data and …\nConstructs a new <code>CustomSectionReader</code> for the given data …\nConstructs a new <code>ConstExpr</code> from the given data and offset.\nCreates a new <code>FuncType</code> from the given <code>params</code> and <code>results</code>.\nCreates a new <code>Validator</code> ready to validate a WebAssembly …\nCreates a new <code>Validator</code> which has the specified set of wasm\nConstructs a <code>BinaryReader</code> with an explicit starting offset.\nReads content of the code section with offsets.\nWhether it’s nullable\nGet the offset within the Wasm binary where the error …\nA fixed byte-offset that this memory immediate specifies.\nValidates the next operator in a function.\nGet the current height of the operand stack.\nGets the original position of the reader.\nReturns whether the original byte offset of this section.\nReturns the current byte offset of the section within this …\nReturns whether the original byte offset of this section.\nGets the original position of the binary reader.\nGets the original position of the reader.\nReturns the type at given index if any.\nReturns the list of outputs as an iterator.\nReturns a shared slice to the parameter types of the …\nThe function parameters.\nAttempts to parse a chunk of data.\nConvenience function that can be used to parse a module or …\nConvenience function to validate a single <code>Payload</code>.\nReturns the range, as byte offsets, of this section within …\nReturns the range, as byte offsets, of this section within …\nReturns a range from the starting offset to the end of the …\nGets the range of the function body.\nThe range of bytes that specify this whole custom section …\nThe range of the data segment.\nThe range of the the element segment.\nReads an item from the reader.\nReads a value of type <code>T</code> from this binary reader, advancing …\nReads an operator from the reader.\nAdvances the <code>BinaryReader</code> <code>size</code> bytes, and returns a slice …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nReads a variable-length 32-bit size from the byte stream …\nReads the local definitions from the given <code>BinaryReader</code>, …\nReads the next available <code>Operator</code>.\nReads a length-prefixed list of bytes from this reader and …\nReads a variable-length 32-bit size from the byte stream …\nReads a WebAssembly string from the module.\nAdvances the <code>BinaryReader</code> four bytes and returns a <code>u32</code>.\nAdvances the <code>BinaryReader</code> eight bytes and returns a <code>u64</code>.\nAdvances the <code>BinaryReader</code> a single byte.\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to eight bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nReads an operator with its offset.\nThe WebAssembly reference types proposal (enabled by …\nThe index of the variant case that is refined by this one.\nThe WebAssembly Relaxed SIMD proposal\nReturns the underlying module resources that this …\nReturns a shared slice to the result types of the <code>FuncType</code>.\nThe number of expected results for the start function.\nThe function result.\nThe WebAssembly <code>nontrapping-float-to-int-conversions</code> …\nWhether or not this is a “shared” memory, indicating …\nThe WebAssembly <code>sign-extension-ops</code> proposal (enabled by …\nThe WebAssembly SIMD proposal (enabled by default)\nExecutes <code>f</code> to skip some data in this binary reader and …\nSkip parsing the code section entirely.\nAdvances the <code>BinaryReader</code> past a WebAssembly string. This …\nValidates <code>Payload::StartSection</code>.\nReturns the table at given index if any.\nValidates <code>Payload::TableSection</code>.\nReturns the tag at given index.\nValidates <code>Payload::TagSection</code>.\nThe WebAssembly tail-call proposal\nReturns the list of targets that this <code>br_table</code> instruction …\nThe WebAssembly threads proposal\nAn optionally specified type ascribed to this export.\nThe type reference for the import.\nThe value type of the variant case.\nThe type of the elements.\nThe global’s type.\nThe type of the imported item.\nThe type of this table, including its element type and its …\nGets the count of types returned by the function.\nReturns the type index associated with the given function …\nReturns the <code>FuncType</code> associated with the given function …\nValidates <code>Payload::TypeSection</code>.\nTypes relating to type information provided by validation.\nGets the types known by the validator so far within the …\nValidates <code>Payload::UnknownSection</code>.\nWhether this frame is unreachable so far.\nThe optional URL of the exported item.\nThe optional URL of the imported item.\nTest whether the given buffer contains a valid WebAssembly …\nConvenience function to validate an entire function’s …\nValidates an entire in-memory module or component with …\nThe values specified for this field\nValidates <code>Payload::Version</code>.\nThe field version.\nVisits the <code>Operator</code> <code>op</code> using the given <code>offset</code>.\nVisit the next available operator with the specified …\nVisit a single operator with the specified <code>VisitOperator</code> …\nGet the operator visitor for the next operator in the …\nThe index of the core WebAssembly function to lift.\nThe index of the function to lower.\nThe canonical options for the function.\nThe canonical options for the function.\nThe index of the lifted function’s type.\nThis many bytes of the <code>data</code> input to <code>Parser::parse</code> were …\nThe value that we actually parsed.\nThe outward count, starting at zero for the current …\nThe index of the item within the outer component.\nThe instance index.\nThe instance index.\nThe alias kind.\nThe alias kind.\nThe alias kind.\nThe export name.\nThe export name.\nThe type returned for failure.\nThe type returned for success.\nThe component’s instantiation arguments.\nThe component index.\nThe contents of this subsection.\nThe range of bytes, relative to the start of the original …\nThe identifier for this subsection.\nThe name of the export.\nThe type reference for the export.\nThe optional URL of the export.\nThe memory index for the data segment.\nThe initialization expression for the data segment.\nThe initial expression of the element segment.\nThe index of the table being initialized.\nThe module’s instantiation arguments.\nThe module index.\nThe name of the export.\nThe type reference for the export.\nThe URL for the export.\nThe outward count, starting at zero for the current type.\nThe index of the item within the outer type.\nThe alias kind.\nThe name of the exported item.\nThe type reference of the export.\nThe contents of this subsection.\nThe specified name.\nThe byte range that <code>name</code> occupies in the original binary.\nThe range of bytes, relative to the start of the original …\nThe identifier for this subsection.\nThe contents of this section.\nThe number of data segments.\nThe number of functions in this section.\nThe encoding format being parsed.\nThe start function index\nThe 8-bit identifier for this section.\nThe version number found in the header.\nThe parser for the nested module.\nThe parser for the nested component.\nThe range of bytes that were parsed to consume the header …\nThe range of bytes that specify the <code>func</code> field, specified …\nThe range of bytes that specify the <code>count</code> field, specified …\nThe range of bytes that represent this section, specified …\nThe range of bytes that represent the nested module in the …\nThe range of bytes that represent the nested component in …\nThe range of bytes that specify the <code>start</code> field.\nThe range of bytes, relative to the start of the original …\nThe size, in bytes, of the remaining contents of this …\nThe start function description.\nThe definition is for a component type.\nThe entity is a component.\nRepresents a component defined type.\nThe entity type for imports and exports of a component.\nThe definition is for a component function type.\nRepresents a type of a component function.\nThe definition is for a component instance type.\nRepresents a type of a component instance.\nRepresents the kind of a component instance.\nRepresents a type of a component.\nA component value type.\nThe definition is for a component defined type.\nThe instance type is from a definition.\nThe entity type for imports and exports of a module.\nThe type is an enumeration.\nThe instance type is the result of instantiating from …\nThe instance type is the result of instantiating from …\nThe type is a set of flags.\nThe definition is for a core function type.\nThe entity is a function.\nThe entity is a function.\nThe entity is a global.\nThe definition is for a core module instance type.\nThe entity is a component instance.\nRepresents a module instance type.")