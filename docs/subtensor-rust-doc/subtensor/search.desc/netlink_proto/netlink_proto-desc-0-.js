searchState.loadedDescShard("netlink_proto", 0, "<code>netlink-proto</code> is an asynchronous implementation of the …\nConnection to a Netlink socket, running in the background.\nThe netlink connection is closed\nA handle to pass requests to a <code>Connection</code>.\nStandard implementation of <code>NetlinkMessageCodec</code>\nReceived an error message as a response\nProtocol to serialize and deserialize messages to and from …\nError while reading from or writing to the netlink socket\nDecode message of given type from datagram payload\nEncode message to (datagram) buffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the underlying I/O stream …\nReturns a reference to the underlying I/O stream wrapped …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Framed</code>, returning its underlying I/O stream.\nCreate a new <code>NetlinkFramed</code> backed by the given socket and …\nCreate a new Netlink connection for the given Netlink …\nVariant of <code>new_connection</code> that allows specifying a socket …\nVariant of <code>new_connection</code> that allows specifying a socket …\nSend a new request and get the response as a stream of …\nTrait to support different async backends\nSupport trait for <code>AsyncSocket</code>\nThe address of a netlink socket\nAn I/O object representing a Netlink socket.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the multicast groups of this socket\nWrapper for <code>Socket::new</code>\nCreate a new socket address for with th\nPolling wrapper for <code>Socket::recv</code>\nPolling wrapper for <code>Socket::recv_from</code>\nPolling wrapper for <code>Socket::recv_from_full</code>\nPolling wrapper for <code>Socket::send</code>\nPolling wrapper for <code>Socket::send_to</code>\nGet the unicast address of this socket\n…\n…\n…\n<code>async fn send(&amp;mut self, buf: &amp;[u8]) -&gt; io::Result&lt;usize&gt;</code>\n<code>async fn send(&amp;mut self, buf: &amp;[u8]) -&gt; io::Result&lt;usize&gt;</code>\nMutable access to underyling <code>Socket</code>\nMutable access to underyling <code>Socket</code>\nAccess underyling <code>Socket</code>\nAuditing.\nKernel connector. See <code>Documentation/connector/*</code> in the …\nNetlink interface to request information about ciphers …\nDECnet routing messages.\nAccess to FIB lookup from user space.\nTransport  IPv4  packets  from  netfilter  to  user  …\nGeneric netlink family for simplified netlink usage.\nTransport IPv6 packets from netfilter to user space.  Used …\nOpen-iSCSI.\nKernel messages to user space.\nNetfilter subsystem.\nNetfilter/iptables ULOG.\nInfiniband RDMA.\nReceives routing and link updates and may be used to …\nSCSI transpots\nSELinux event notifications.\nQuery information about sockets of various protocol …\nReserved for user-mode socket protocols.\nIPsec.")