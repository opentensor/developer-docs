searchState.loadedDescShard("netlink_packet_utils", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNlA(RTA) align size\nIdentify the bits that represent the “nested” flag of …\nIdentify the bits that represent the “byte order” flag …\nNlA(RTA) header size. (unsigned short rta_len) + (unsigned …\nIdentify the bits that represent the type of a netlink …\nAn iterator that iteratates over nlas without decoding …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a reference to the underlying buffer\nReturn a mutable reference to the underlying buffer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the buffer, returning the underlying buffer.\nReturn the <code>type</code> field\nReturn the <code>length</code> field. The <code>length</code> field corresponds to …\nSet the <code>type</code> field\nSet the <code>length</code> field\nReturn the <code>value</code> field\nReturn the length of the <code>value</code> field\nReturn the <code>value</code> field\nA type that implements <code>Emitable</code> can be serialized.\nA <code>Parseable</code> type can be used to deserialize data from the …\nA <code>Parseable</code> type can be used to deserialize data from the …\nReturn the length of the serialized data.\nSerialize this types and write the serialized data into …\nDeserialize the current type.\nDeserialize the current type.")