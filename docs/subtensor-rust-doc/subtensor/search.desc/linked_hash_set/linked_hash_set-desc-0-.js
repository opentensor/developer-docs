searchState.loadedDescShard("linked_hash_set", 0, "A linked hash set implementation based on the …\nA lazy iterator producing elements in the difference of …\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>LinkedHashSet</code>.\nAn iterator over the items of a <code>LinkedHashSet</code>.\nA linked hash set implemented as a …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of …\nGets the last entry.\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new …\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nReturns the number of elements the set can hold without …\nClears the set, removing all values.\nReturns <code>true</code> if the set contains a value.\nCreates an empty <code>LinkedHashSet&lt;T, S&gt;</code> with the <code>Default</code> …\nVisits the values representing the difference, i.e. the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the first entry.\nReturns a reference to the set’s <code>BuildHasher</code>.\nAdds a value to the set.\nAdds a value to the set, if not already present. The …\nVisits the values representing the intersection, i.e. the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns true if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e. <code>other</code> …\nReturns <code>true</code> if the set is a superset of another, i.e. <code>self</code>…\nAn iterator visiting all elements in insertion order. The …\nReturns the number of elements in the set.\nCreates an empty <code>LinkedHashSet</code>.\nRemoves the last entry.\nRemoves the first entry.\nIf already present, moves a value to the end of the …\nRemoves a value from the set. Returns <code>true</code> if the value was\nReserves capacity for at least <code>additional</code> more elements to …\nShrinks the capacity of the set as much as possible. It …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new …\nVisits the values representing the symmetric difference, …\nVisits the values representing the union, i.e. all the …\nCreates an empty <code>LinkedHashSet</code> with the specified capacity.\nCreates an empty <code>LinkedHashSet</code> with with the specified …\nCreates a new empty hash set which will use the given …")