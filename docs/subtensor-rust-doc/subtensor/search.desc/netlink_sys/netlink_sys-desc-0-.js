searchState.loadedDescShard("netlink_sys", 0, "Trait to support different async backends\nA netlink socket.\nThe address of a netlink socket\nAn I/O object representing a Netlink socket.\nBind the socket to the given address\nBind the socket to an address assigned by the kernel, and …\nConnect the socket to the given address. Netlink is a …\nThis module provides a lot of netlink constants for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the socket address\nGets socket receive buffer in bytes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the multicast groups of this socket\nWrapper for <code>Socket::new</code>\nOpen a new socket for the given netlink subsystem. <code>protocol</code>…\nCreate a new socket address for with th\nPolling wrapper for <code>Socket::recv</code>\nPolling wrapper for <code>Socket::recv_from</code>\nPolling wrapper for <code>Socket::recv_from_full</code>\nPolling wrapper for <code>Socket::send</code>\nPolling wrapper for <code>Socket::send_to</code>\nGet the unicast address of this socket\nFor a connected socket, <code>recv</code> reads a datagram from the …\nRead a datagram from the socket and return the number of …\nReceive a full message. Unlike <code>Socket::recv_from</code>, which …\nFor a connected socket, <code>send</code> sends the given buffer <code>buf</code> to …\nSend the given buffer <code>buf</code> to the remote peer with address …\n<code>NETLINK_BROADCAST_ERROR</code> (since Linux 2.6.30). When not set,\n<code>NETLINK_CAP_ACK</code> (since Linux 4.2). The kernel may fail to …\n<code>NETLINK_EXT_ACK</code> Extended ACK controls reporting of …\n<code>NETLINK_LISTEN_ALL_NSID</code> (since Linux 4.2). When set, this …\nSet strict input checking(<code>NETLINK_GET_STRICT_CHK</code>) in …\n<code>NETLINK_NO_ENOBUFS</code> (since Linux 2.6.30). This flag can be …\nMake this socket non-blocking\nSets socket receive buffer in bytes. The kernel doubles …\nMutable access to underyling <code>Socket</code>\nMutable access to underyling <code>Socket</code>\nAccess underyling <code>Socket</code>\nSupport trait for <code>AsyncSocket</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\n…\n…\n<code>async fn send(&amp;mut self, buf: &amp;[u8]) -&gt; io::Result&lt;usize&gt;</code>\n<code>async fn send(&amp;mut self, buf: &amp;[u8]) -&gt; io::Result&lt;usize&gt;</code>\nAuditing.\nKernel connector. See <code>Documentation/connector/*</code> in the …\nNetlink interface to request information about ciphers …\nDECnet routing messages.\nAccess to FIB lookup from user space.\nTransport  IPv4  packets  from  netfilter  to  user  …\nGeneric netlink family for simplified netlink usage.\nTransport IPv6 packets from netfilter to user space.  Used …\nOpen-iSCSI.\nKernel messages to user space.\nNetfilter subsystem.\nNetfilter/iptables ULOG.\nInfiniband RDMA.\nReceives routing and link updates and may be used to …\nSCSI transpots\nSELinux event notifications.\nQuery information about sockets of various protocol …\nReserved for user-mode socket protocols.\nIPsec.")