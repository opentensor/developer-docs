searchState.loadedDescShard("polkavm_common", 0, "This is an internal crate of PolkaVM; <strong>do not</strong> use it …\nA special hostcall number set by the <em>guest</em> to trigger a …\nA flag which will trigger the sandbox to unload its …\nA flag which will trigger the sandbox to reset its memory …\nA flag which will trigger the sandbox to reset its memory …\nEverything in this module affects the ABI of the guest …\nThis module defines the ABI boundary between the host and …\nThe memory map of a given guest program.\nThe address which, when jumped to, will return to the host.\nThe address at which the program’s stack starts inside …\nThe minimum required alignment of runtime code pointers.\nThe maximum number of functions the program can export.\nThe maximum number of functions the program can import.\nThe maximum number of VM instructions a program can be …\nThe maximum page size of the VM.\nThe minimum page size of the VM.\nCreates an empty memory map.\nReturns the argument unchanged.\nThe address at which the program’s heap starts.\nCalls <code>U::from(self)</code>.\nThe maximum size of the program’s heap.\nCalculates the memory map from the given parameters.\nThe page size of the program.\nThe address at where the program’s read-only data starts …\nThe range of addresses where the program’s read-only …\nThe size of the program’s read-only data.\nThe address at where the program’s read-write data …\nThe range of addresses where the program’s read-write …\nThe size of the program’s read-write data.\nThe address at where the program’s stack ends inside of …\nThe address at where the program’s stack starts inside …\nThe range of addresses where the program’s stack is …\nThe size of the program’s stack.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of all of the VM’s registers.\nList of all input/output argument registers.\nThe magic bytes with which every program blob must start …\nA line program state machine.\nA partially deserialized PolkaVM program.\nDebug information about a given region of bytecode.\nThe source location.\nReturns the original bytes from which this program blob …\nReturns the number of basic blocks the code section should …\nReturns the program code in its raw form.\nReturns the source code column of this location, if …\nThe column in the original source file.\nReturns the entry index of this region info within the …\nReturns the entry index of this line program object.\nReturns an iterator over program exports.\nReturns an iterator over the frames this region covers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the full name of the function.\nReturns the function name of location without the …\nReturns the line program for the given instruction.\nReturns the debug string for the given relative offset.\nReturns an iterator over program imports.\nReturns the number of instructions the code section should …\nThe range of instructions this region covers.\nReturns an iterator over program instructions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an owned program blob, possibly cloning it if it …\nReturns an iterator over the jump table entries, excluding …\nThe upper bound of how many entries there might be in this …\nReturns the source code line of this location, if …\nThe line in the original source file.\nReturns the source location of where this frame comes from.\nReturns the namespace of this location, if available.\nParses the given bytes into a program blob.\nReturns the source code path of this location, if …\nThe path to the original source file.\nReturns the offset into the debug strings section …\nReturns the contents of the read-only data section.\nReturns the size of the read-only data section.\nRuns the line program until the next region becomes …\nReturns the contents of the read-write data section.\nReturns the size of the read-write data section.\nReturns the initial size of the stack.\nA replacement for <code>alloc::borrow::Cow&lt;[u8]&gt;</code> which also …\nA gas value used for gas metering.\nThe maximum possible available gas.\nThe minimum possible available gas.\nAligns the <code>value</code> to the next <code>page_size</code>, or returns the …\nAligns the <code>value</code> to the next <code>page_size</code>, or returns the …\nAligns the <code>value</code> to the next <code>page_size</code>, or returns the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new gas value from an <code>i64</code>, checking whether it…\nConstructs a new gas value from an <code>u64</code>, checking whether it…\nGets the amount of gas remaining, or <code>None</code> if gas metering …\nGets the raw gas value.\nReturns the current size of the program’s heap.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether there is no gas remaining.\nConstructs a new gas value. Alias for <code>Gas::from_u64</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA special hostcall number set by the <em>host</em> to signal that …\nA special hostcall number set by the <em>host</em> to signal that …\nA sentinel value to indicate that the native program …\nA sentinel value to indicate that the instruction counter …\nThe memory configuration used by a given program and/or …\nThe VM is busy.\nThe VM has triggered a host call.\nThe VM is idle and is waiting for work.\nThe VM is ready to be initialized.\nThe VM has triggered a trap.\nThe address where the indirect jump table starts inside of …\nThe address where the return-to-host jump table vector …\nThe address where the native code starts inside of the VM.\nThe address of the top of the native stack.\nThe address of the native stack.\nThe size of the native stack.\nThe address of the signal stack.\nThe address of the global per-VM context struct.\nThe maximum number of native code bytes that can be …\nThe maximum number of native code bytes that can be …\nA flag which will trigger the sandbox to reload its …\nThe maximum number of bytes the jump table can be.\nThe maximum number of bytes the jump table can span in …\nThe maximum number of bytes the native code can be.\nThe virtual machine context.\nPerformance counters. Only for debugging.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe futex used to synchronize the sandbox with the host …\nThe current gas counter.\nThe state of the program’s heap.\nThe hostcall number that was triggered.\nOne-time args used during initialization.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the memory of the sandbox is dirty.\nThe memory configuration of the sandbox.\nA buffer used to marshal error messages.\nLength of the message in the message buffer.\nCreates a fresh VM context.\nThe number of the instruction just about to be executed.\nA dump of all of the registers of the VM.\nThe current RIP. Filled out in case of a trap or during …\nThe address of the native code to call inside of the VM, …\nFlags specifying what exactly the sandbox should do.\nThe amount of memory to allocate.\nCreates a zeroed VM context.")