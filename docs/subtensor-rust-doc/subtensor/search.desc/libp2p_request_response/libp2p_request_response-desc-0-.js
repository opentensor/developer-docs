searchState.loadedDescShard("libp2p_request_response", 0, "Generic request/response protocols.\nA request/response protocol for some message codec.\nA <code>Codec</code> defines the request and response types for a …\nThe configuration for a <code>Behaviour</code> protocol.\nThe connection closed before a response was received.\nThe connection closed before a response could be send.\nThe request could not be sent because a dialing attempt …\nThe events emitted by a request-response <code>Behaviour</code>.\nThe protocol is supported for inbound and outbound …\nThe protocol is only supported for inbound requests.\nPossible failures occurring in the context of receiving an …\nAn inbound request failed.\nAn inbound request or response.\nAn incoming message (request or response).\nThe protocol is only supported for outbound requests.\nPossible failures occurring in the context of sending an …\nAn outbound request failed.\nThe type of protocol(s) or protocol versions being …\nThe level of support for a particular protocol.\nA request message.\nThe type of inbound and outbound requests.\nThe ID of an inbound or outbound request.\nA response message.\nThe type of inbound and outbound responses.\nA channel for sending a response to an inbound request.\nThe local peer failed to respond to an inbound request due …\nA response to an inbound request has been sent.\nThe request timed out before a response was received.\nThe inbound request timed out, either while reading the …\nThe remote supports none of the requested protocols.\nThe local peer supports none of the protocols requested by …\nAdds a known address for a peer that can be used for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether inbound requests are supported.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether a peer is currently connected.\nChecks whether the response channel is still open, i.e. …\nChecks whether an inbound request from the peer with the …\nChecks whether an outbound request to the peer with the …\nCreates a new <code>Behaviour</code> for the given protocols and …\nWhether outbound requests are supported.\nReads a request from the given I/O stream according to the …\nReads a response from the given I/O stream according to the\nRemoves an address of a peer previously added via …\nInitiates sending a request.\nInitiates sending a response to an inbound request.\nSets the keep-alive timeout of idle connections.\nSets the timeout for inbound and outbound requests.\nCreates a new <code>Behaviour</code> for the given protocols, codec and …\nWrites a request to the given I/O stream according to the …\nWrites a response to the given I/O stream according to the …\nThe error that occurred.\nThe error that occurred.\nThe incoming message.\nThe peer who sent the message.\nThe peer to whom the request was sent.\nThe peer from whom the request was received.\nThe peer to whom the response was sent.\nThe (local) ID of the failed request.\nThe ID of the failed inbound request.\nThe ID of the inbound request whose response was sent.\nThe channel waiting for the response.\nThe request message.\nThe ID of this request.\nThe ID of the request that produced this response.\nThe response message.")