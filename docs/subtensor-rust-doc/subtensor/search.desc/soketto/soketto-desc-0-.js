searchState.loadedDescShard("soketto", 0, "An implementation of the RFC 6455 websocket protocol.\nParsing completed.\nParsing is incomplete and needs more data.\nAn owned byte buffer.\nA parsing result.\nA read-only shared byte slice.\nA buffer type used for implementing <code>Extension</code>s.\nA mutable byte slice.\nA websocket base frame codec.\nA persistent websocket connection after the handshake …\nTypes describing various forms of payload data.\nWebsocket extensions as per RFC 6455.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWebsocket handshakes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe offset into the byte slice that has been consumed.\nThe parsed value.\nA binary data frame.\nA close control frame.\nCodec for encoding/decoding websocket base frames.\nA continuation frame of a fragmented message.\nError cases the base frame decoder may encounter.\nA fragmented control frame (fin bit not set) has been …\nA websocket base frame header, i.e. everything but the …\nA control frame with an invalid length code has been …\nThe reserved bit is invalid.\nAn I/O error has been encountered.\nOperation codes defined in RFC 6455.\nThe payload length of a frame exceeded the configured …\nA ping control frame.\nA pong control frame.\nA reserved op code.\nA reserved op code.\nA reserved op code.\nA reserved op code.\nA reserved op code.\nA reserved op code.\nA reserved op code.\nA reserved op code.\nA reserved op code.\nA reserved op code.\nThe opcode decoded is reserved.\nA text data frame.\nError returned by <code>OpCode::try_from</code> if an unknown opcode …\nSome unknown opcode number has been decoded.\nAdd to the reserved bits in use.\nUse the given header’s mask and apply it to the data.\nReset the reserved bits.\nDecode a websocket frame header.\nEncode a websocket frame header.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a control opcode?\nIs the <code>fin</code> flag set?\nIs the <code>masked</code> flag set?\nIs this opcode reserved?\nIs the <code>rsv1</code> flag set?\nIs the <code>rsv2</code> flag set?\nIs the <code>rsv3</code> flag set?\nGet the <code>mask</code>.\nGet the configured maximum payload length.\nCreate a new frame header with a given <code>OpCode</code>.\nCreate a new base frame codec.\nGet the <code>opcode</code>.\nGet the payload length.\nThe reserved bits currently configured.\nSet the <code>fin</code> flag.\nSet the <code>mask</code>\nSet the <code>masked</code> flag.\nLimit the maximum size of payload data to <code>size</code> bytes.\nSet the <code>opcode</code>\nSet the payload length.\nSet the <code>rsv1</code> flag.\nSet the <code>rsv2</code> flag.\nSet the <code>rsv3</code> flag.\nA connection builder.\nClient-side of a connection (implies masking of payload …\nReason for closing the connection.\nThe connection is closed.\nThe base codec errored.\nErrors which may occur when sending or receiving messages.\nAn extension produced an error while encoding or decoding.\nAn I/O error was encountered.\nThe total message payload data size exceeds the configured …\nIs the connection used by a client or server?\nThe receiving half of a connection.\nThe sending half of a connection.\nServer-side of a connection.\nAn unexpected opcode was encountered.\nA close reason was not correctly UTF-8 encoded.\nAdd extensions to use with this connection.\nSend a close message and close the connection.\nCreate a configured <code>Sender</code>/<code>Receiver</code> pair.\nFlush the socket buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Builder</code> from the given async I/O resource and …\nReceive the next websocket message.\nReceive the next websocket message, skipping over control …\nSend some binary data over the websocket connection.\nSend some binary data over the websocket connection.\nPing the remote end.\nSend an unsolicited Pong to the remote.\nSend a text value over the websocket connection.\nSend a text value over the websocket connection.\nSet a custom buffer to use.\nSet the maximum size of a single websocket frame payload.\nSet the maximum size of a complete message.\nBinary data (number of bytes).\nWrapper type which restricts the length of its byte slice …\nThe other end closed the connection.\nText or binary data.\nData received from the remote end.\nData sent with a PONG control frame.\nError, if converting to <code>ByteSlice125</code> fails.\nTextual data (number of bytes).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this binary data?\nIs this binary data?\nIs this text or binary data?\nIs this a PONG?\nIs this text data?\nIs this text data?\nThe length of data (number of bytes).\nA websocket extension as per RFC 6455, section 9.\nExtension parameter (used for negotiation).\nTurn this parameter into one that owns its values.\nConfigure this extension with the parameters received from …\nDecode a frame.\nEncode a frame, given as frame header and payload data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs this extension enabled?\nThe name of this extension.\nAccess the parameter name.\nCreate a new parameter with the given name.\nThe parameters this extension wants to send for …\nThe reserved bits this extension uses.\nSet the parameter to the given value.\nAccess the optional parameter value.\nEnumeration of possible handshake errors.\nAn extension produced an error while encoding or decoding.\nAn HTTP header has not been present.\nThe HTTP entity could not be parsed successfully.\nAn incomplete HTTP request.\nThe handshake request was not a GET request.\nThe Sec-WebSocket-Accept header value did not match.\nAn I/O error has been encountered.\nThe value of the <code>Sec-WebSocket-Key</code> header is of unexpected …\nAn HTTP header value was not expected.\nThe server returned an extension we did not ask for.\nThe server returned a protocol we did not ask for.\nAn HTTP version =/= 1.1 was encountered.\nUTF-8 decoding failed.\nOwned value of the <code>Sec-WebSocket-Key</code> header.\nWebsocket client handshake.\nReturns the argument unchanged.\nThis module somewhat mirrors <code>crate::handshake::server</code>, …\nCalls <code>U::from(self)</code>.\nWebsocket server handshake.\nThe server has accepted our request.\nWebsocket client handshake.\nRepresents a parsed header.\nThe server is redirecting us to some other location.\nThe server rejected our request.\nHandshake response received from the server.\nAdd an extension to be included in the handshake.\nAdd a protocol to be included in the handshake.\nGet back all extensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitiate client handshake request to server and get back …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn this handshake into a <code>connection::Builder</code>.\nGet out the inner socket of the client.\nThe name portion of a header.\nCreate a new client handshake for some host and resource.\nOverride the buffer to use for request/response handling.\nSet connection headers to a slice. These headers are not …\nExtract the buffer.\nThe value portion of a header.\nThe location URL we should go to.\nThe protocol (if any) the server has selected.\nThe HTTP response status code.\nHTTP response status code.\nA re-export of <code>handshake::Error</code>.\nAn extension produced an error while encoding or decoding.\nAn HTTP header has not been present.\nThe HTTP entity could not be parsed successfully.\nAn incomplete HTTP request.\nThe handshake request was not a GET request.\nThe Sec-WebSocket-Accept header value did not match.\nAn I/O error has been encountered.\nThe value of the <code>Sec-WebSocket-Key</code> header is of unexpected …\nWebsocket handshake server. This is similar to …\nAn HTTP header value was not expected.\nThe server returned an extension we did not ask for.\nThe server returned a protocol we did not ask for.\nAn HTTP version =/= 1.1 was encountered.\nUTF-8 decoding failed.\nAdd an extension the server supports.\nGet back all extensions.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTurn this handshake into a <code>connection::Builder</code>.\nCheck if an <code>http::Request</code> looks like a valid websocket …\nCreate a new server handshake.\nAttempt to interpret the provided <code>http::Request</code> as a …\nOverride the buffer to use for request/response handling.\nExtract the buffer.\nThe server accepts the handshake request.\nHandshake request received from the client.\nThe server rejects the handshake request.\nSelect HTTP headers sent by the client.\nHandshake response the server sends back to the client.\nWebsocket handshake server.\nAdd an extension the server supports.\nAdd a protocol the server supports.\nGet back all extensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSelect HTTP headers sent by the client.\nThe <code>Host</code> header.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn this handshake into a <code>connection::Builder</code>.\nGet out the inner socket of the server.\nThe <code>Sec-WebSocket-Key</code> header nonce value.\nCreate a new server handshake.\nThe <code>Origin</code> header, if provided.\nThe path the client is requesting.\nThe protocols the client is proposing.\nAwait an incoming client handshake request.\nRespond to the client.\nOverride the buffer to use for request/response handling.\nExtract the buffer.")