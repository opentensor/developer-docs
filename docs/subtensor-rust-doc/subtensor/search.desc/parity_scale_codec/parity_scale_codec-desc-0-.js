searchState.loadedDescShard("parity_scale_codec", 0, "Parity SCALE Codec\nA compact-encodable type that should be used as the …\nTrait that allows zero-copy read/write of value-references …\nCompact-encoded variant of T. This is more space-efficient …\nAllow foreign structs to be wrap in Compact\nDerive <code>parity_scale_codec::Compact</code> and …\nSomething that can return the compact encoded length for a …\nCompact-encoded variant of &amp;’a T. This is more …\nTypes that have a constant encoded length. This implies …\nTrait that allows zero-copy read of value-references from …\nDerive <code>parity_scale_codec::Decode</code> and for struct and enum.\nExtension trait to <code>Decode</code> that ensures that the given …\nA zero-sized type signifying that the decoding finished.\nTrait that allows the length of a collection to be read, …\nExtension trait to <code>Decode</code> for decoding with a maximum …\nTrait that allows zero-copy write of value-references to …\nDerive <code>parity_scale_codec::Encode</code> and …\nTrait that allows to append items to an encoded …\nSomething that can be encoded as a reference.\nA marker trait that tells the compiler that a type encode …\nError type.\nTrait that bound <code>EncodeLike</code> along with <code>Codec</code>. Usefull for …\nTrait that bound <code>EncodeLike</code> along with <code>Encode</code>. Usefull for …\nTrait that tells you if a given type can be …\nTrait that allows reading of data into a slice.\nWrapper that implements Input for any <code>Read</code> type.\nThe item that will be appended.\nTrait to allow itself to be serialised into a value which …\nTrait to allow itself to be serialised and prepended by a …\nItems implementing <code>MaxEncodedLen</code> have a statically known …\nDerive <code>parity_scale_codec::MaxEncodedLen</code> for struct and …\nDerive macro for <code>MaxEncodedLen</code>.\nShim type because we can’t do a specialised …\nTrait that allows writing of data.\nReference wrapper that implement encode like any type that …\nThe reference type that is used for encoding.\nThe compact type; this can be\nA wrapped type.\nA marker trait for types that can be created solely from …\nA marker trait for types that wrap other encodable type.\nAppend encoding of value to <code>Self</code>.\nAppend all items in <code>iter</code> to the given <code>self_encoded</code> …\nAscend to previous structure level when decoding. This is …\nAscend to previous structure level when decoding. This is …\nAssert that the decoding has finished.\nChain error message with description.\nReturns the compact encoded length for the given value.\nAttempt to deserialise the value from input.\nDecode <code>Self</code> and consume all of the given input data.\nDecode <code>Self</code> and consume all of the given input data.\nDecode <code>Self</code> from the compact-decoded type.\nDecodes a given <code>T</code> from <code>Bytes</code>.\nAttempt to deserialize the value from input into a …\nAttempt to deserialize the value from input into a …\nDecode the vec (without a prepended len).\nDecode <code>Self</code> with the given maximum recursion depth and …\nDescend into nested reference when decoding. This is …\nDescend into nested reference when decoding. This is …\nConvert self to an owned vector.\nConvert self to an owned vector.\nReturns the compact-encodable type.\nConvert self to a slice and append it to the destination.\nConvert self to a slice and append it to the destination.\nReturns the fixed encoded size of the type.\nReturns the fixed encoded size of the type.\nCalculates the encoded size.\nCalculates the encoded size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the number of elements in <code>self_encoded</code>.\nUpper bound, in bytes, of the maximum encoded size of this …\nWrite a single byte to the output.\nWrite a single byte to the output.\nRead the exact number of bytes required to fill the given …\nRead a single byte from the input.\nRead a single byte from the input.\nShould return the remaining length of the input data. If …\nIf possible give a hint of expected size of the encoding.\nIf possible give a hint of expected size of the encoding.\nAttempt to skip the encoded value from input.\nAttempt to skip the encoded value from input.\nReturn an encoding of <code>Self</code> prepended by given slice.\nConvert self to a slice and then invoke the given closure …\nConvert self to a slice and then invoke the given closure …\nWrite to the output.")