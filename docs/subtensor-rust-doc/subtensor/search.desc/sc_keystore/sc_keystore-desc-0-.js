searchState.loadedDescShard("sc_keystore", 0, "Keystore (and session key management) for ed25519 based …\nContains the error value\nKeystore error.\nInvalid BIP39 phrase\nInvalid seed\nIO error.\nJSON error.\nPublic key type is not supported\nSomething that generates, stores and provides access to …\nA local based keystore that is either memory-based or …\nContains the success value\nInvalid password.\nKeystore Result\nKeystore unavailable\nGenerate a new ecdsa key pair for the given key type and …\nGenerate a new pair compatible with the ‘ecdsa’ …\nReturns all ecdsa public keys for the given key type.\nGenerate an ecdsa signature for a given message.\nGenerate an ecdsa signature for a given pre-hashed message.\nGenerate a new ed25519 key pair for the given key type and …\nGenerate a new pair compatible with the ‘sr25519’ …\nReturns all ed25519 public keys for the given key type.\nGenerate an ed25519 signature for a given message.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nChecks if the private keys for the given public key and …\nCreate a local keystore in memory.\nInsert a new secret key.\nInsert a new secret key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a key pair for the given public key.\nList all supported keys of a given type.\nCreate a local keystore from filesystem.\nConvenience method to sign a message using the given key …\nGenerate a new sr25519 key pair for the given key type and …\nGenerate a new pair compatible with the ‘ed25519’ …\nReturns all the sr25519 public keys for the given key type.\nGenerate an sr25519 signature for a given message.\nGenerate an sr25519 VRF pre-output for a given input data.\nGenerate an sr25519 VRF signature for the given data.")