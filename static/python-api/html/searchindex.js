Search.setIndex({"docnames": ["autoapi/bittensor/axon/index", "autoapi/bittensor/btlogging/index", "autoapi/bittensor/chain_data/index", "autoapi/bittensor/cli/index", "autoapi/bittensor/commands/delegates/index", "autoapi/bittensor/commands/identity/index", "autoapi/bittensor/commands/index", "autoapi/bittensor/commands/inspect/index", "autoapi/bittensor/commands/list/index", "autoapi/bittensor/commands/metagraph/index", "autoapi/bittensor/commands/misc/index", "autoapi/bittensor/commands/network/index", "autoapi/bittensor/commands/overview/index", "autoapi/bittensor/commands/register/index", "autoapi/bittensor/commands/root/index", "autoapi/bittensor/commands/senate/index", "autoapi/bittensor/commands/stake/index", "autoapi/bittensor/commands/transfer/index", "autoapi/bittensor/commands/unstake/index", "autoapi/bittensor/commands/wallets/index", "autoapi/bittensor/config/index", "autoapi/bittensor/dendrite/index", "autoapi/bittensor/errors/index", "autoapi/bittensor/extrinsics/delegation/index", "autoapi/bittensor/extrinsics/index", "autoapi/bittensor/extrinsics/log_utilities/index", "autoapi/bittensor/extrinsics/network/index", "autoapi/bittensor/extrinsics/prometheus/index", "autoapi/bittensor/extrinsics/registration/index", "autoapi/bittensor/extrinsics/root/index", "autoapi/bittensor/extrinsics/senate/index", "autoapi/bittensor/extrinsics/serving/index", "autoapi/bittensor/extrinsics/set_weights/index", "autoapi/bittensor/extrinsics/staking/index", "autoapi/bittensor/extrinsics/transfer/index", "autoapi/bittensor/extrinsics/unstaking/index", "autoapi/bittensor/index", "autoapi/bittensor/keyfile/index", "autoapi/bittensor/metagraph/index", "autoapi/bittensor/stream/index", "autoapi/bittensor/subtensor/index", "autoapi/bittensor/synapse/index", "autoapi/bittensor/tensor/index", "autoapi/bittensor/threadpool/index", "autoapi/bittensor/types/index", "autoapi/bittensor/wallet/index", "autoapi/index", "autoapi/miner/index", "autoapi/neurons/index", "autoapi/neurons/validators/index", "autoapi/neurons/validators/validator/index", "autoapi/prompting/baseminer/blacklist/index", "autoapi/prompting/baseminer/config/index", "autoapi/prompting/baseminer/index", "autoapi/prompting/baseminer/miner/index", "autoapi/prompting/baseminer/priority/index", "autoapi/prompting/baseminer/run/index", "autoapi/prompting/baseminer/set_weights/index", "autoapi/prompting/index", "autoapi/prompting/protocol/index", "autoapi/prompting/validators/config/index", "autoapi/prompting/validators/criteria/index", "autoapi/prompting/validators/dataset/index", "autoapi/prompting/validators/event/index", "autoapi/prompting/validators/forward/index", "autoapi/prompting/validators/gating/index", "autoapi/prompting/validators/index", "autoapi/prompting/validators/misc/index", "autoapi/prompting/validators/penalty/content_match/index", "autoapi/prompting/validators/penalty/index", "autoapi/prompting/validators/penalty/keyword_match/index", "autoapi/prompting/validators/penalty/penalty/index", "autoapi/prompting/validators/penalty/task_validation/index", "autoapi/prompting/validators/prompts/index", "autoapi/prompting/validators/reward/blacklist/index", "autoapi/prompting/validators/reward/config/index", "autoapi/prompting/validators/reward/dahoas/index", "autoapi/prompting/validators/reward/diversity/index", "autoapi/prompting/validators/reward/dpo/index", "autoapi/prompting/validators/reward/index", "autoapi/prompting/validators/reward/nsfw/index", "autoapi/prompting/validators/reward/open_assistant/index", "autoapi/prompting/validators/reward/prompt/index", "autoapi/prompting/validators/reward/reciprocate/index", "autoapi/prompting/validators/reward/relevance/index", "autoapi/prompting/validators/reward/reward/index", "autoapi/prompting/validators/tasks/index", "autoapi/prompting/validators/weights/index", "autoapi/validators/index", "autoapi/validators/reward/index", "autoapi/validators/reward/test_reward_event/index", "autoapi/validators/reward/test_task_validator/index", "autoapi/validators/test_dataset/index", "autoapi/validators/test_event/index", "index"], "filenames": ["autoapi/bittensor/axon/index.rst", "autoapi/bittensor/btlogging/index.rst", "autoapi/bittensor/chain_data/index.rst", "autoapi/bittensor/cli/index.rst", "autoapi/bittensor/commands/delegates/index.rst", "autoapi/bittensor/commands/identity/index.rst", "autoapi/bittensor/commands/index.rst", "autoapi/bittensor/commands/inspect/index.rst", "autoapi/bittensor/commands/list/index.rst", "autoapi/bittensor/commands/metagraph/index.rst", "autoapi/bittensor/commands/misc/index.rst", "autoapi/bittensor/commands/network/index.rst", "autoapi/bittensor/commands/overview/index.rst", "autoapi/bittensor/commands/register/index.rst", "autoapi/bittensor/commands/root/index.rst", "autoapi/bittensor/commands/senate/index.rst", "autoapi/bittensor/commands/stake/index.rst", "autoapi/bittensor/commands/transfer/index.rst", "autoapi/bittensor/commands/unstake/index.rst", "autoapi/bittensor/commands/wallets/index.rst", "autoapi/bittensor/config/index.rst", "autoapi/bittensor/dendrite/index.rst", "autoapi/bittensor/errors/index.rst", "autoapi/bittensor/extrinsics/delegation/index.rst", "autoapi/bittensor/extrinsics/index.rst", "autoapi/bittensor/extrinsics/log_utilities/index.rst", "autoapi/bittensor/extrinsics/network/index.rst", "autoapi/bittensor/extrinsics/prometheus/index.rst", "autoapi/bittensor/extrinsics/registration/index.rst", "autoapi/bittensor/extrinsics/root/index.rst", "autoapi/bittensor/extrinsics/senate/index.rst", "autoapi/bittensor/extrinsics/serving/index.rst", "autoapi/bittensor/extrinsics/set_weights/index.rst", "autoapi/bittensor/extrinsics/staking/index.rst", "autoapi/bittensor/extrinsics/transfer/index.rst", "autoapi/bittensor/extrinsics/unstaking/index.rst", "autoapi/bittensor/index.rst", "autoapi/bittensor/keyfile/index.rst", "autoapi/bittensor/metagraph/index.rst", "autoapi/bittensor/stream/index.rst", "autoapi/bittensor/subtensor/index.rst", "autoapi/bittensor/synapse/index.rst", "autoapi/bittensor/tensor/index.rst", "autoapi/bittensor/threadpool/index.rst", "autoapi/bittensor/types/index.rst", "autoapi/bittensor/wallet/index.rst", "autoapi/index.rst", "autoapi/miner/index.rst", "autoapi/neurons/index.rst", "autoapi/neurons/validators/index.rst", "autoapi/neurons/validators/validator/index.rst", "autoapi/prompting/baseminer/blacklist/index.rst", "autoapi/prompting/baseminer/config/index.rst", "autoapi/prompting/baseminer/index.rst", "autoapi/prompting/baseminer/miner/index.rst", "autoapi/prompting/baseminer/priority/index.rst", "autoapi/prompting/baseminer/run/index.rst", "autoapi/prompting/baseminer/set_weights/index.rst", "autoapi/prompting/index.rst", "autoapi/prompting/protocol/index.rst", "autoapi/prompting/validators/config/index.rst", "autoapi/prompting/validators/criteria/index.rst", "autoapi/prompting/validators/dataset/index.rst", "autoapi/prompting/validators/event/index.rst", "autoapi/prompting/validators/forward/index.rst", "autoapi/prompting/validators/gating/index.rst", "autoapi/prompting/validators/index.rst", "autoapi/prompting/validators/misc/index.rst", "autoapi/prompting/validators/penalty/content_match/index.rst", "autoapi/prompting/validators/penalty/index.rst", "autoapi/prompting/validators/penalty/keyword_match/index.rst", "autoapi/prompting/validators/penalty/penalty/index.rst", "autoapi/prompting/validators/penalty/task_validation/index.rst", "autoapi/prompting/validators/prompts/index.rst", "autoapi/prompting/validators/reward/blacklist/index.rst", "autoapi/prompting/validators/reward/config/index.rst", "autoapi/prompting/validators/reward/dahoas/index.rst", "autoapi/prompting/validators/reward/diversity/index.rst", "autoapi/prompting/validators/reward/dpo/index.rst", "autoapi/prompting/validators/reward/index.rst", "autoapi/prompting/validators/reward/nsfw/index.rst", "autoapi/prompting/validators/reward/open_assistant/index.rst", "autoapi/prompting/validators/reward/prompt/index.rst", "autoapi/prompting/validators/reward/reciprocate/index.rst", "autoapi/prompting/validators/reward/relevance/index.rst", "autoapi/prompting/validators/reward/reward/index.rst", "autoapi/prompting/validators/tasks/index.rst", "autoapi/prompting/validators/weights/index.rst", "autoapi/validators/index.rst", "autoapi/validators/reward/index.rst", "autoapi/validators/reward/test_reward_event/index.rst", "autoapi/validators/reward/test_task_validator/index.rst", "autoapi/validators/test_dataset/index.rst", "autoapi/validators/test_event/index.rst", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.axon</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.btlogging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.chain_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.cli</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.delegates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.identity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.inspect</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.list</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.metagraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.network</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.overview</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.register</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.root</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.senate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.stake</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.transfer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.unstake</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.commands.wallets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.dendrite</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.errors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.delegation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.log_utilities</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.network</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.prometheus</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.registration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.root</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.senate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.serving</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.set_weights</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.staking</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.transfer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.extrinsics.unstaking</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.keyfile</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.metagraph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.stream</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.subtensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.synapse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.tensor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.threadpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.types</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bittensor.wallet</span></code>", "API Reference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">miner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neurons</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neurons.validators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neurons.validators.validator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.blacklist</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.miner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.priority</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.run</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.baseminer.set_weights</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.protocol</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.event</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.forward</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.gating</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty.content_match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty.keyword_match</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty.penalty</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.penalty.task_validation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.prompts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.blacklist</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.dahoas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.diversity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.dpo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.nsfw</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.open_assistant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.prompt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.reciprocate</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.relevance</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.reward.reward</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.tasks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">prompting.validators.weights</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">validators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">validators.reward</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">validators.reward.test_reward_event</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">validators.reward.test_task_validator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">validators.test_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">validators.test_event</span></code>", "Welcome to Bittensor API Documentation"], "terms": {"creat": [0, 2, 3, 5, 6, 11, 19, 20, 21, 36, 37, 38, 39, 40, 41, 45, 46, 52, 59, 61, 65, 68, 69, 71, 72, 75, 77, 79, 84, 86, 92, 93], "init": 0, "whcih": 0, "servic": [0, 36, 40], "forward": [0, 6, 10, 21, 36, 46, 56, 58, 65, 66, 76, 77, 79, 84, 93], "backward": [0, 65], "request": [0, 6, 15, 21, 25, 36, 39, 40, 41, 47, 54, 56], "from": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 47, 52, 54, 59, 62, 64, 73, 74, 78, 79, 91], "other": [0, 2, 5, 6, 9, 11, 14, 15, 17, 21, 36, 38, 40, 41, 43, 54, 56, 57, 73], "neuron": [0, 2, 6, 7, 9, 11, 12, 13, 14, 16, 18, 19, 21, 22, 25, 32, 36, 38, 40, 41, 46, 94], "fastapithreadedserv": 0, "config": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 36, 38, 39, 40, 41, 42, 43, 45, 46, 47, 50, 53, 54, 58, 59, 65, 66, 79], "base": [0, 2, 4, 6, 11, 13, 14, 19, 20, 21, 22, 28, 36, 38, 39, 40, 41, 42, 43, 44, 47, 54, 59, 61, 62, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 90, 91, 92, 93], "uvicorn": 0, "server": [0, 21, 25, 36, 39], "The": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 28, 31, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 52, 54, 56, 57, 59, 65, 73, 74, 77, 79, 84, 85, 90, 91], "i": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 54, 56, 57, 59, 64, 65, 73, 74, 77, 78, 79, 84, 90, 91, 92, 93], "special": [0, 36, 38, 39, 40, 59, 73], "implement": [0, 3, 11, 20, 21, 36, 39, 40, 41, 43, 45, 47, 54, 59, 92, 93], "network": [0, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 25, 27, 29, 31, 36, 38, 39, 40, 41, 45, 46, 54, 56, 57, 59, 65], "It": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 36, 37, 38, 39, 40, 41, 43, 45, 52, 54, 59, 65, 73, 74, 77, 79, 84, 85, 92, 93], "extend": [0, 47, 59], "function": [0, 5, 6, 9, 11, 14, 21, 25, 39, 40, 54, 59, 65, 74, 79, 85], "run": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 28, 36, 40, 41, 43, 46, 50, 52, 53, 54, 58, 65, 77, 79, 84, 92, 93], "fastapi": [0, 21, 36], "applic": [0, 4, 5, 6, 21, 36, 38, 39, 41], "separ": [0, 6, 14, 19, 36, 41, 45, 54], "thread": [0, 6, 13, 28, 36, 43, 54], "allow": [0, 4, 5, 6, 11, 13, 14, 15, 16, 18, 19, 25, 36, 37, 38, 39, 40, 41, 59], "handl": [0, 3, 4, 5, 6, 21, 25, 36, 38, 39, 40, 41, 45, 47, 54, 56, 59], "http": [0, 21, 36, 40, 41, 74, 79], "concurr": [0, 21, 36, 43], "non": [0, 22, 28, 36, 37, 41, 45, 54], "block": [0, 2, 6, 9, 13, 15, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 54, 56, 63], "thi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 34, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 52, 54, 56, 57, 59, 65, 73, 74, 77, 79, 84, 85, 90, 91, 92, 93, 94], "design": [0, 4, 5, 6, 11, 21, 36, 37, 39, 40, 41, 54, 59], "facilit": [0, 4, 6, 10, 11, 19, 36, 38, 40, 41, 45, 54], "integr": [0, 36, 38, 40, 41, 73], "": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 28, 33, 36, 37, 38, 39, 40, 41, 45, 47, 54, 56, 57, 59, 73, 74, 77, 78, 79, 84, 85, 92, 93], "asynchron": [0, 21, 36, 39, 59], "architectur": [0, 36, 38, 40], "ensur": [0, 4, 6, 10, 11, 13, 17, 19, 21, 36, 38, 39, 40, 41, 47, 52, 56, 59, 73, 74, 77, 79, 84, 85], "effici": [0, 6, 13, 21, 36, 38, 40, 41], "scalabl": [0, 36, 40], "import": [0, 6, 10, 13, 14, 18, 19, 21, 36, 38, 40, 41, 54, 92, 93], "execut": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 33, 35, 36, 38, 40, 43, 92, 93], "enabl": [0, 6, 13, 17, 19, 21, 36, 38, 40, 41, 57], "which": [0, 4, 5, 6, 7, 8, 11, 13, 14, 15, 16, 19, 20, 21, 29, 32, 36, 38, 39, 40, 41, 45, 47, 54, 56, 59, 73, 78, 79, 92, 93], "crucial": [0, 6, 11, 14, 15, 17, 19, 21, 36, 38, 40, 41, 45, 59], "perform": [0, 4, 5, 6, 7, 10, 11, 13, 19, 21, 36, 38, 39, 40, 41, 54, 56, 57, 59], "seamless": 0, "By": [0, 36, 40, 41, 74, 79, 92, 93], "manner": [0, 11, 36, 38], "capabl": [0, 6, 13, 36, 40], "multi": [0, 6, 13], "control": [0, 36, 40, 41], "manag": [0, 3, 6, 12, 18, 19, 20, 21, 36, 38, 39, 40, 41, 45, 56, 57, 59], "method": [0, 2, 6, 11, 13, 21, 36, 38, 39, 40, 41, 43, 45, 47, 52, 54, 57, 59, 61, 65, 69, 71, 74, 75, 77, 79, 84, 85, 90, 91, 92, 93], "start": [0, 6, 13, 19, 25, 36, 40, 41, 47, 54, 56, 61, 91], "stop": [0, 36, 54, 56], "provid": [0, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 19, 21, 36, 37, 38, 39, 40, 41, 47, 54, 59, 68, 69, 71, 72, 73, 86, 94], "lifecycl": 0, "can": [0, 2, 4, 6, 7, 12, 13, 16, 17, 18, 19, 21, 36, 38, 39, 40, 41, 43, 45, 47, 52, 54, 59, 61, 69, 71, 73, 75, 79, 92, 93], "need": [0, 6, 11, 13, 14, 15, 19, 36, 37, 38, 40, 41, 59, 92, 93], "vital": [0, 6, 15, 21, 36, 38, 40, 41], "maintain": [0, 6, 19, 36, 38, 40, 41, 47, 73], "reliabl": [0, 36, 38, 40, 41, 73], "avail": [0, 4, 6, 8, 11, 16, 36, 38, 40, 52, 54, 64], "signal": [0, 21, 36], "overrid": [0, 36, 40, 41, 47, 59, 92, 93], "default": [0, 4, 5, 6, 8, 9, 13, 20, 21, 33, 35, 36, 37, 38, 40, 41, 45, 52, 54, 57, 65, 74, 75, 79, 92, 93], "handler": 0, "prevent": [0, 4, 6, 21, 36, 40], "potenti": [0, 4, 6, 11, 19, 36, 40, 59], "conflict": [0, 20, 36], "main": [0, 36, 40, 50, 56, 73], "flow": [0, 36, 41], "stabl": 0, "oper": [0, 3, 4, 6, 10, 11, 13, 14, 16, 18, 19, 21, 36, 37, 38, 40, 41, 45, 47, 54, 56, 57], "variou": [0, 4, 5, 6, 11, 12, 14, 15, 16, 36, 38, 40, 52, 54, 73], "condit": [0, 36, 40], "us": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 28, 31, 33, 35, 36, 37, 38, 39, 40, 41, 43, 45, 47, 54, 57, 59, 65, 68, 69, 71, 72, 73, 74, 77, 78, 79, 84, 85, 86, 92, 93], "case": [0, 11, 21, 36, 40, 59, 92, 93], "when": [0, 6, 10, 13, 15, 16, 18, 19, 21, 22, 36, 38, 41, 43, 47, 54, 59, 62, 73, 74, 79, 91, 92, 93], "initi": [0, 2, 4, 6, 11, 13, 14, 21, 36, 38, 39, 40, 43, 47, 52, 56, 59, 74, 79], "begin": [0, 36, 40], "immedi": [0, 36, 40], "dure": [0, 6, 11, 13, 19, 21, 36, 38, 40, 41, 45, 56, 59], "shutdown": [0, 36, 43, 56], "mainten": [0, 36, 40], "gracefulli": [0, 36], "all": [0, 4, 6, 7, 8, 9, 11, 12, 13, 15, 16, 18, 19, 20, 21, 25, 28, 33, 35, 36, 38, 40, 43, 52, 57, 73, 74, 75, 77, 79, 84, 90, 93], "resourc": [0, 6, 11, 13, 21, 36, 38, 40, 43, 54], "ar": [0, 4, 6, 8, 10, 11, 13, 14, 15, 19, 20, 21, 22, 36, 37, 38, 40, 41, 42, 43, 45, 47, 52, 54, 56, 59, 65, 73, 74, 77, 79, 84, 85, 90, 92, 93], "properli": [0, 21, 36, 38, 47], "releas": [0, 21, 36, 38], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 50, 51, 52, 54, 55, 57, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "should_exit": [0, 56], "flag": [0, 4, 6, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 57], "indic": [0, 4, 6, 8, 9, 11, 12, 20, 21, 36, 37, 38, 40, 41, 54, 65, 73, 77, 84], "whether": [0, 6, 8, 13, 14, 16, 18, 20, 36, 38, 40, 45, 54, 73, 92, 93], "should": [0, 4, 5, 6, 10, 11, 13, 15, 17, 19, 21, 28, 36, 38, 39, 41, 45, 47, 54, 59, 61, 73, 75, 79, 92, 93], "type": [0, 1, 2, 3, 4, 6, 7, 12, 15, 16, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 51, 52, 54, 55, 57, 59, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "bool": [0, 1, 2, 6, 13, 16, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 45, 51, 54, 57, 61, 63, 67, 73, 74, 79, 87], "is_run": 0, "current": [0, 4, 6, 10, 11, 13, 14, 15, 17, 20, 21, 25, 36, 37, 38, 40, 41, 57, 59], "interfer": 0, "install_signal_handl": 0, "run_in_thread": 0, "_wrapper_run": 0, "wrap": [0, 73], "alreadi": [0, 4, 6, 15], "fals": [0, 1, 2, 6, 7, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 45, 57, 61, 67, 73, 76, 79], "essenti": [0, 3, 6, 11, 14, 15, 16, 19, 21, 36, 38, 40, 41, 47, 54, 73], "doe": [0, 4, 5, 6, 7, 8, 11, 12, 13, 36, 37, 41, 45, 73, 91], "especi": [0, 6, 12, 13, 21, 36, 41, 59], "complex": [0, 36, 38, 40, 41], "environ": [0, 4, 6, 13, 21, 36, 37, 38, 40, 41, 74, 77, 79, 84, 85, 92, 93], "like": [0, 3, 11, 21, 36, 38, 40, 41, 45, 54, 73], "without": [0, 2, 6, 13, 21, 36, 37, 40, 41, 54, 73], "kei": [0, 2, 3, 5, 6, 8, 9, 11, 15, 17, 19, 21, 29, 32, 34, 36, 37, 38, 40, 41, 45], "compon": [0, 36, 38, 40, 45], "yield": [0, 21, 36], "none": [0, 1, 3, 4, 6, 14, 19, 20, 21, 23, 25, 27, 28, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 54, 57, 63, 64, 65, 76, 79], "back": [0, 1, 4, 6, 10, 11, 18, 21, 36, 39, 41, 54], "caller": 0, "while": [0, 36, 38, 40, 47, 57, 59, 73], "background": [0, 54], "A": [0, 4, 6, 13, 14, 19, 20, 21, 36, 38, 39, 40, 41, 43, 47, 52, 54, 59, 73, 74, 79, 92, 93], "wrapper": [0, 36, 41, 54], "context": [0, 11, 21, 36, 37, 38, 40, 41, 47, 54, 59, 73], "intern": [0, 21, 36, 38, 39, 40, 45, 54, 59], "set": [0, 1, 3, 5, 6, 7, 10, 11, 13, 14, 16, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 45, 47, 52, 54, 56, 57, 59, 64, 74, 79, 90, 91, 92, 93], "up": [0, 4, 6, 10, 19, 25, 36, 38, 40, 43, 52, 56, 75, 79, 90, 91, 92, 93], "incom": [0, 21, 36, 40, 47, 54, 56, 59], "continu": [0, 6, 19, 28, 36, 38, 56, 59], "its": [0, 2, 4, 6, 10, 11, 21, 36, 38, 40, 41, 47, 54, 56, 57, 59, 65, 73, 77, 84], "seamlessli": [0, 59], "true": [0, 1, 2, 6, 7, 10, 11, 14, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 56, 59, 73, 74, 78, 79], "ceas": [0, 36], "exit": [0, 6, 13, 21, 28, 36, 54], "redeploi": 0, "updat": [0, 5, 6, 9, 10, 11, 12, 13, 19, 21, 28, 36, 37, 38, 40, 45, 54, 56, 57, 59, 65, 74, 77, 79, 84, 85], "configur": [0, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 16, 19, 20, 36, 38, 40, 41, 45, 47, 52, 54, 56, 59, 65, 75, 79, 92, 93], "wallet": [0, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 46, 50, 52, 54, 57], "port": [0, 2, 6, 12, 21, 27, 31, 36, 40, 41, 44], "ip": [0, 2, 6, 12, 21, 27, 31, 36, 38, 40, 41, 44], "external_ip": [0, 21, 25, 36], "external_port": [0, 36], "max_work": [0, 36, 43], "fundament": [0, 36, 38, 40, 41, 45], "serv": [0, 2, 6, 13, 24, 27, 36, 38, 40, 41, 44, 45, 46, 56], "side": [0, 4, 5, 6, 36], "interfac": [0, 3, 4, 36, 37, 38, 39, 40, 56, 65], "within": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 59, 73], "respons": [0, 6, 13, 14, 15, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 47, 54, 59, 61, 69, 71, 73, 79, 85], "mechan": [0, 6, 13, 14, 36, 38, 40, 41], "secur": [0, 6, 11, 13, 16, 19, 36, 38, 40, 41, 45], "interact": [0, 4, 5, 6, 11, 21, 36, 38, 40, 41, 45, 47, 59], "an": [0, 2, 3, 5, 6, 9, 11, 12, 13, 14, 15, 17, 19, 21, 22, 27, 31, 35, 36, 37, 38, 39, 40, 41, 42, 45, 47, 54, 56, 57, 59, 63, 65, 68, 69, 71, 72, 73, 74, 79, 86, 91, 92, 93], "reli": [0, 4, 21, 36, 73], "router": [0, 36], "endpoint": [0, 2, 6, 9, 21, 25, 27, 31, 36, 40, 41], "differ": [0, 1, 3, 5, 6, 11, 12, 14, 16, 17, 18, 19, 20, 21, 36, 38, 40, 41, 45, 59, 73, 74, 77, 79, 84, 85, 90, 91], "messag": [0, 1, 6, 13, 21, 36, 40, 41, 45, 47, 52, 54, 59, 65, 77, 79, 84, 92, 93], "These": [0, 4, 6, 11, 13, 36, 38, 40, 41, 59], "might": [0, 36, 54, 59, 73], "receiv": [0, 6, 9, 12, 21, 36, 38, 39, 40, 41, 54, 73], "flexibl": [0, 6, 13, 18, 36, 40], "customiz": [0, 36], "user": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 45, 47, 59], "specifi": [0, 4, 6, 7, 9, 11, 13, 14, 15, 16, 17, 18, 19, 21, 23, 33, 35, 36, 38, 40, 41, 59, 92, 93], "custom": [0, 6, 12, 13, 36, 38, 40, 41, 47, 52, 54, 59, 65], "rule": [0, 36, 40], "blacklist": [0, 36, 41, 46, 47, 53, 54, 56, 58, 66, 75, 79], "priorit": [0, 36, 54], "verifi": [0, 4, 6, 13, 17, 36, 37, 40, 41], "also": [0, 4, 5, 6, 9, 11, 13, 19, 21, 36, 39, 40, 41, 45, 47, 52, 54, 59], "includ": [0, 4, 5, 6, 7, 9, 11, 12, 13, 15, 19, 21, 25, 26, 30, 33, 35, 36, 38, 39, 40, 41, 54, 59, 61, 73, 92, 93], "pool": [0, 36, 65, 77, 84], "support": [0, 4, 6, 13, 19, 36, 37, 40, 74, 79], "defin": [0, 11, 36, 37, 40, 41, 47, 54, 56, 59, 61, 65], "prioriti": [0, 36, 43, 45, 46, 47, 53, 54, 56, 58], "level": [0, 5, 6, 11, 15, 36, 38, 40, 57], "equip": [0, 36], "deal": [0, 36, 59], "scenario": [0, 21, 36, 37, 59, 90, 91], "face": [0, 36, 40], "accept": [0, 1, 36, 43, 45], "multipl": [0, 4, 6, 12, 13, 19, 21, 36, 40, 45, 54, 65, 77, 84], "argument": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 36, 40, 43, 45, 47, 52, 54, 65, 92, 93], "address": [0, 4, 5, 6, 8, 11, 12, 14, 15, 16, 17, 18, 19, 21, 23, 33, 34, 35, 36, 38, 40, 41, 45, 73], "bind": [0, 36], "extern": [0, 21, 36, 56], "max": [0, 36, 47], "worker": [0, 36, 43], "involv": [0, 6, 10, 11, 15, 36, 40, 41, 45, 59], "attach": [0, 36, 41, 56], "featur": [0, 36, 40, 41, 47], "creation": [0, 5, 6, 11, 19, 36, 40, 41, 45], "verif": [0, 4, 6, 13, 36, 41], "against": [0, 6, 13, 25, 36, 37, 59], "command": [0, 3, 20, 36, 46, 47, 52, 54, 65], "line": [0, 3, 4, 5, 6, 20, 36, 40, 47, 52, 54, 65], "friendli": [0, 11, 36], "program": [0, 36], "exampl": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 36, 38, 40, 41, 45, 54, 59, 61, 69, 71, 73, 75, 79], "usag": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 36, 38, 40, 41, 45], "python": [0, 4, 21, 36, 59, 94], "your": [0, 6, 13, 21, 36, 40, 41, 45, 59, 61, 73], "synaps": [0, 21, 25, 36, 39, 46, 47, 51, 54, 55, 59, 69, 71, 79, 85], "mysyanps": [0, 36], "input": [0, 2, 5, 6, 21, 36, 37, 40, 41, 45, 65, 73], "int": [0, 1, 2, 4, 6, 12, 13, 14, 16, 19, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 38, 40, 41, 42, 44, 45, 57, 61, 63, 64, 65, 67, 73, 74, 79, 86], "1": [0, 2, 5, 6, 9, 10, 11, 13, 14, 20, 21, 25, 36, 38, 40, 41, 43, 46, 56, 57, 58, 61, 66, 67, 69, 71, 74, 75, 77, 79, 84, 85, 91], "output": [0, 4, 6, 8, 12, 13, 14, 36, 38, 59, 65, 77, 84], "def": [0, 36, 41, 54], "appli": [0, 36, 38, 40, 41, 65, 77, 79, 84, 85], "logic": [0, 36, 39, 41, 47, 54, 59], "return": [0, 1, 2, 3, 4, 6, 7, 11, 12, 15, 16, 19, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 51, 52, 54, 55, 57, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91], "2": [0, 2, 6, 10, 11, 14, 20, 36, 40, 41, 56, 57, 61, 66, 69, 71, 75, 79], "verify_my_synaps": [0, 36], "option": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 33, 35, 36, 37, 38, 40, 41, 42, 45, 47, 56, 57, 74, 79], "rais": [0, 21, 22, 23, 33, 35, 36, 37, 40, 41, 42, 43, 45, 52, 54, 56, 57, 62, 92, 93], "except": [0, 1, 5, 6, 11, 20, 21, 22, 28, 36, 37, 42, 43, 52, 54, 56, 57, 92, 93], "assert": [0, 36, 73, 92, 93], "fucntion": [0, 36], "blacklist_my_synaps": [0, 36], "prioritize_my_synap": [0, 36], "float": [0, 2, 6, 14, 16, 17, 18, 21, 23, 25, 29, 32, 33, 34, 35, 36, 40, 41, 54, 55, 61, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 84, 85, 90], "0": [0, 2, 6, 9, 11, 14, 21, 28, 29, 31, 32, 36, 40, 41, 57, 58, 61, 65, 73, 74, 75, 77, 79, 84, 85, 91], "object": [0, 1, 2, 3, 4, 11, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 52, 54, 57, 59, 60, 63, 65, 73, 92, 93], "my_axon": [0, 36], "my_config": [0, 36], "my_wallet": [0, 4, 6, 16, 36, 45], "9090": [0, 36], "192": [0, 27, 31, 36], "203": [0, 36], "113": [0, 36], "7070": [0, 36], "forward_fn": [0, 36], "forward_my_synaps": [0, 36], "verify_fn": [0, 36], "blacklist_fn": [0, 36], "priority_fn": [0, 36], "netuid": [0, 2, 6, 7, 9, 11, 12, 13, 14, 25, 26, 27, 28, 29, 31, 32, 36, 38, 40, 44, 57], "subtensor": [0, 4, 5, 6, 9, 11, 13, 14, 19, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 46, 50, 52, 54, 57], "If": [0, 4, 5, 6, 7, 9, 10, 11, 13, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 47, 54, 56, 57, 64, 73, 92, 93], "you": [0, 6, 14, 21, 22, 36, 38, 40, 41, 59, 73, 92, 93], "have": [0, 2, 4, 5, 6, 11, 13, 14, 16, 36, 38, 40, 41, 43, 61, 69, 71, 74, 75, 79, 92, 93], "chain": [0, 4, 5, 6, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 44, 57], "them": [0, 2, 6, 13, 15, 18, 21, 36, 39, 40, 41, 45, 59, 61, 69, 71, 75, 79], "forward_my_synapse_2": [0, 36], "verify_my_synapse_2": [0, 36], "blacklist_my_synapse_2": [0, 36], "prioritize_my_synape_2": [0, 36], "hotkei": [0, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 18, 19, 22, 23, 29, 32, 33, 35, 36, 38, 40, 41, 45, 54, 65], "coldkeypub": [0, 6, 19, 36, 45], "str": [0, 1, 2, 3, 4, 6, 7, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 47, 51, 59, 61, 63, 65, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "broadcast": [0, 36], "number": [0, 4, 6, 9, 11, 13, 15, 19, 25, 27, 28, 31, 36, 38, 40, 41, 45, 57, 61, 64, 65, 74, 79], "activ": [0, 2, 4, 6, 7, 9, 12, 13, 15, 16, 21, 36, 38, 40, 56], "instanc": [0, 21, 36, 38, 40, 41, 43, 54, 59, 92, 93], "per": [0, 4, 6, 7, 13, 16, 25, 28, 36, 38, 40], "core": [0, 36, 38], "part": [0, 4, 5, 6, 7, 9, 14, 19, 36, 38, 39, 40, 41, 73, 92, 93], "decentr": [0, 6, 13, 36, 38, 40, 41], "machin": [0, 36, 38, 40, 41], "intellig": [0, 36, 38, 40], "commun": [0, 6, 15, 36, 38, 40, 41], "effect": [0, 4, 5, 6, 15, 19, 36, 40, 73, 74, 79], "registr": [0, 2, 6, 11, 13, 16, 22, 24, 36, 40, 46, 56], "dynam": [0, 6, 13, 14, 36, 38, 40], "regist": [0, 4, 6, 11, 12, 14, 15, 22, 23, 26, 28, 29, 30, 33, 35, 36, 40, 46, 54], "api": [0, 36, 40], "respond": [0, 36, 37, 54, 73], "specif": [0, 1, 4, 6, 11, 12, 13, 14, 15, 19, 21, 25, 26, 36, 38, 39, 40, 41, 43, 45, 47, 54, 59, 61, 73], "how": [0, 2, 6, 14, 25, 36, 38, 40, 54, 56, 59, 61, 69, 71, 73, 75, 79], "make": [0, 4, 5, 6, 11, 12, 14, 15, 21, 34, 36, 38, 40, 41, 47, 56, 73], "adapt": [0, 36, 38, 40], "contribut": [0, 6, 11, 12, 13, 15, 36, 38, 40], "both": [0, 4, 6, 7, 11, 12, 16, 19, 36, 40, 45, 47, 59], "via": [0, 2, 36, 40, 54], "abil": [0, 36, 38], "aspect": [0, 6, 14, 36, 38, 40, 41], "great": [0, 36, 73], "tailor": [0, 36, 38, 41, 47, 59], "error": [0, 1, 6, 11, 13, 17, 21, 33, 35, 36, 40, 41, 42, 45, 46, 56, 57, 65, 74, 77, 79, 84, 85, 92, 93], "valid": [0, 4, 5, 6, 9, 12, 13, 25, 29, 32, 36, 37, 38, 39, 40, 41, 46, 48, 52, 58, 59, 94], "meet": [0, 6, 13, 36, 37], "requir": [0, 4, 6, 11, 13, 14, 17, 19, 22, 25, 36, 37, 38, 39, 40, 41, 45, 54, 59, 92, 93], "signatur": [0, 36, 39, 41, 92, 93], "runtim": [0, 36, 38, 40], "issu": [0, 11, 21, 36, 40, 59], "info": [0, 1, 2, 5, 6, 25, 36], "associ": [0, 2, 5, 6, 7, 8, 12, 15, 16, 18, 21, 36, 38, 40, 41, 43, 61], "axoninfo": [0, 2, 21, 36, 40], "behavior": [0, 6, 11, 15, 36, 38, 40, 41, 54, 59], "therebi": [0, 36, 40, 45], "name": [0, 2, 4, 5, 6, 7, 9, 11, 14, 15, 16, 18, 19, 21, 25, 26, 36, 37, 38, 40, 41, 45, 47, 59, 61, 63, 65, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 91, 92, 93], "first": [0, 6, 10, 11, 19, 21, 33, 36, 38, 41, 54, 65, 73, 74, 77, 79, 84, 85], "framework": [0, 21, 36, 41, 45, 75, 79, 92, 93], "callabl": [0, 36, 39, 43, 51, 55], "call": [0, 4, 5, 6, 9, 11, 15, 21, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 54, 79, 85, 92, 93], "access": [0, 2, 6, 11, 19, 21, 36, 38, 40, 41, 45, 59, 61, 69, 71, 75, 79], "least": [0, 36], "one": [0, 2, 5, 6, 16, 17, 18, 19, 20, 21, 36, 38, 40, 43, 52], "filter": [0, 1, 6, 12, 36], "out": [0, 1, 6, 10, 36], "undesir": [0, 36], "take": [0, 2, 20, 36, 39, 40], "same": [0, 25, 36, 37, 38, 41, 45, 73], "boolean": [0, 20, 36, 38, 90], "valu": [0, 2, 4, 5, 6, 11, 13, 14, 19, 20, 26, 29, 32, 36, 38, 40, 41, 42, 45, 54, 57, 59, 61, 65, 69, 71, 73, 74, 75, 77, 79, 84, 85, 90], "mean": [0, 36, 41, 54, 59, 65, 73, 74, 77, 79, 84, 85], "rank": [0, 2, 5, 6, 9, 12, 36, 38, 40, 73], "numer": [0, 4, 36, 38, 73], "repres": [0, 6, 9, 21, 36, 37, 38, 40, 41, 42, 43, 59, 73], "sort": [0, 4, 6, 12, 25, 36, 74, 79], "self": [0, 2, 4, 6, 20, 21, 25, 36, 37, 38, 40, 41, 51, 54, 55, 56, 64, 67, 69, 71, 73, 79, 85, 87], "default_verifi": [0, 36], "note": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 36, 40, 41, 45, 59, 64, 65, 73, 74, 75, 77, 79, 84, 85], "assertionerror": [0, 36], "yoursynaps": [0, 36], "axonserv": [0, 36], "forward_custom": [0, 36], "mycustomsynaps": [0, 36], "process": [0, 4, 6, 11, 13, 14, 15, 16, 18, 19, 21, 28, 36, 38, 39, 40, 41, 42, 47, 54, 56, 59, 73], "blacklist_custom": [0, 36], "tupl": [0, 2, 6, 12, 36, 40, 41, 45, 51, 74, 79], "priority_custom": [0, 36], "verify_custom": [0, 36], "pass": [0, 11, 20, 21, 23, 29, 32, 33, 36, 37, 39, 40, 45, 65, 77, 79, 84, 92, 93], "particip": [0, 6, 7, 9, 13, 14, 15, 16, 17, 19, 36, 38, 40, 45], "offer": [0, 6, 12, 14, 21, 36, 40, 45, 59], "develop": [0, 36, 39, 41, 47, 59], "classmethod": [0, 1, 2, 6, 11, 15, 16, 18, 20, 36, 40, 41, 43, 45, 47, 50, 54, 65], "pars": [0, 20, 21, 36, 39, 41], "form": [0, 6, 17, 20, 36, 38, 40, 41, 47], "help": [0, 1, 4, 6, 15, 19, 36, 40, 41, 45, 52, 59], "print": [0, 1, 4, 6, 8, 9, 12, 20, 21, 25, 36, 37, 38, 40, 41, 45, 52, 59, 92, 93], "text": [0, 1, 25, 36, 61, 65, 73, 74, 77, 79, 84, 91], "list": [0, 2, 3, 4, 6, 7, 11, 12, 14, 15, 16, 18, 19, 20, 21, 25, 28, 29, 32, 33, 35, 36, 38, 40, 41, 42, 45, 46, 47, 59, 61, 63, 64, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86], "descript": [0, 4, 6, 36, 38, 41], "stdout": [0, 1, 36, 40, 45], "add_arg": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 36, 40, 43, 45, 47, 50, 54, 60, 65], "parser": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 36, 40, 43, 45, 47, 50, 54, 60, 65], "prefix": [0, 1, 36, 40, 41, 43, 45], "add": [0, 3, 6, 13, 16, 20, 33, 36, 40, 41, 47, 54, 65, 74, 75, 79], "argpars": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 36, 40, 43, 45, 47, 54, 65], "argumentpars": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 36, 40, 43, 45, 47, 54, 65], "ad": [0, 2, 6, 11, 16, 36, 47, 54, 61, 65, 69, 71, 75, 79], "variabl": [0, 21, 36, 37, 41], "async": [0, 21, 36, 39, 51, 59, 64], "verify_body_integr": [0, 36], "middlewar": [0, 36], "bodi": [0, 6, 14, 15, 21, 36, 39, 40, 41], "compar": [0, 25, 36, 74, 77, 79, 84, 85], "hash": [0, 6, 15, 36, 40, 41, 59], "field": [0, 5, 6, 36, 41, 47, 54, 59], "correspond": [0, 5, 6, 14, 21, 29, 32, 36, 38, 40, 47], "header": [0, 21, 36, 39, 41, 54, 59], "critic": [0, 6, 11, 13, 16, 19, 36, 38, 40, 41, 45, 73], "payload": [0, 36, 41], "ha": [0, 2, 4, 5, 6, 7, 11, 12, 20, 21, 36, 38, 39, 40, 54, 59, 74, 79], "been": [0, 20, 21, 36, 39, 40, 41, 43, 54, 59, 74, 79], "alter": [0, 11, 36], "tamper": [0, 36, 41], "transmiss": [0, 36, 41], "establish": [0, 6, 19, 21, 36, 40, 41], "trust": [0, 2, 5, 6, 9, 12, 36, 38, 40, 56, 57], "between": [0, 6, 17, 21, 28, 36, 38, 40, 41, 65, 73], "sender": [0, 36], "contain": [0, 6, 9, 19, 21, 36, 38, 39, 40, 41, 45, 46, 47, 54, 59, 61, 65, 73, 74, 77, 79, 84, 90, 91], "dictionari": [0, 2, 25, 36, 38, 40, 41, 59, 63, 74, 79], "comparison": [0, 36], "match": [0, 36, 65, 73, 77, 84], "intact": [0, 36], "dict": [0, 2, 20, 21, 25, 36, 38, 39, 40, 41, 45, 59, 63, 74, 79, 85], "jsonrespons": [0, 36], "400": [0, 36], "statu": [0, 4, 6, 9, 12, 15, 19, 21, 25, 36, 38, 40, 41], "code": [0, 4, 6, 7, 9, 21, 36, 41, 92, 93], "ani": [0, 2, 4, 6, 7, 8, 10, 11, 16, 18, 19, 20, 21, 22, 26, 33, 35, 36, 38, 39, 40, 41, 42, 54, 61, 73, 92, 93], "fail": [0, 11, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 43, 92, 93], "detail": [0, 2, 4, 5, 6, 7, 9, 11, 12, 13, 15, 16, 19, 21, 36, 38, 40, 41, 45, 47, 52, 54, 59, 61, 69, 71, 75, 79], "mismatch": [0, 36], "sever": [0, 4, 6, 11, 36, 43], "decod": [0, 2, 36, 40, 41, 59], "load": [0, 36, 37, 38, 40, 45], "inspect": [0, 6, 36, 46], "gather": [0, 6, 7, 25, 36], "3": [0, 2, 6, 10, 11, 14, 25, 28, 36, 40, 41, 56, 57, 61, 69, 71, 74, 75, 79], "4": [0, 2, 4, 6, 10, 11, 13, 14, 25, 27, 31, 36, 56, 57, 66, 75, 79], "reconstruct": [0, 36, 41], "recomput": [0, 36], "log": [0, 1, 6, 13, 21, 25, 28, 36, 38, 52, 54, 56, 57, 78, 79, 93], "5": [0, 2, 6, 11, 14, 20, 36, 56, 74, 79], "step": [0, 6, 11, 14, 15, 19, 25, 36, 38, 40, 57, 74, 79], "data": [0, 4, 6, 7, 10, 11, 12, 14, 15, 19, 21, 25, 36, 37, 38, 39, 40, 41, 42, 54, 59], "exchang": [0, 36, 38, 41], "manipul": [0, 36, 73], "transit": [0, 36], "check_config": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 36, 50, 52, 60, 65], "check": [0, 1, 3, 4, 6, 10, 11, 13, 15, 16, 17, 18, 19, 21, 36, 37, 40, 41, 45, 52, 54, 56, 59, 60, 73, 90], "hold": [0, 6, 14, 15, 19, 36, 38, 40, 45, 52, 57], "rang": [0, 36, 40, 73, 74, 77, 79, 84, 85], "1024": [0, 36], "65535": [0, 2, 36], "to_str": [0, 2, 20, 36], "human": [0, 6, 12, 36, 38, 59], "readabl": [0, 6, 11, 12, 22, 36, 37, 38], "represent": [0, 2, 6, 12, 21, 31, 36, 37, 38, 41, 45, 65, 77, 84], "__str__": [0, 2, 20, 21, 36, 37, 38, 40, 45, 69, 71, 79, 85], "__repr__": [0, 2, 20, 21, 36, 37, 38, 40, 45, 69, 71, 79, 85], "unambigu": [0, 36, 38], "made": [0, 21, 36, 40], "ident": [0, 6, 22, 36, 40, 41, 46], "__del__": [0, 21, 36], "magic": [0, 36], "about": [0, 6, 9, 11, 12, 21, 36, 38, 39, 40, 41, 59, 73], "destroi": [0, 21, 36], "shut": [0, 36], "down": [0, 6, 15, 36], "underli": [0, 21, 36, 38, 40], "state": [0, 4, 5, 6, 7, 8, 9, 11, 12, 21, 36, 38, 40, 41, 56, 59, 65, 73], "trigger": [0, 36], "listen": [0, 36, 54], "setup": [0, 6, 13, 19, 36, 90, 91, 92, 93], "etc": [0, 36, 38, 41], "after": [0, 21, 36, 38, 39, 41, 43, 65, 77, 84], "invok": [0, 21, 36, 38, 54, 59], "readi": [0, 36, 38, 39], "grpc": [0, 36, 40], "new": [0, 2, 5, 6, 11, 13, 19, 21, 26, 36, 38, 40, 41, 45, 47, 56], "remov": [0, 6, 15, 18, 30, 35, 36, 40, 74, 79], "presenc": [0, 6, 12, 19, 36, 40], "exist": [0, 3, 5, 6, 8, 13, 19, 21, 36, 37, 40, 45, 52], "connect": [0, 5, 6, 11, 21, 22, 36, 38, 40, 41, 57], "termin": [0, 5, 6, 13, 36, 41], "typic": [0, 4, 6, 13, 16, 36, 38, 39, 40, 41, 52, 54, 59], "being": [0, 6, 15, 21, 31, 36, 39, 40, 73], "temporarili": [0, 36], "go": [0, 36], "offlin": [0, 36, 38], "advis": [0, 21, 36], "ongo": [0, 6, 15, 36], "complet": [0, 6, 19, 21, 36, 38, 43, 47, 54, 59, 61, 63, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 91], "befor": [0, 4, 6, 10, 13, 15, 16, 17, 18, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 54, 65, 90, 91], "subnet": [0, 2, 4, 5, 6, 7, 11, 13, 14, 28, 33, 35, 36, 40, 57], "identifi": [0, 6, 7, 9, 11, 12, 14, 16, 25, 36, 38, 40, 41, 45, 57, 73], "link": [0, 6, 16, 36, 40, 45], "broader": [0, 36, 40], "inform": [0, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 21, 28, 36, 38, 39, 40, 41, 57, 59, 73], "uniqu": [0, 4, 6, 7, 9, 11, 12, 14, 16, 36, 38, 40, 41, 57], "id": [0, 6, 13, 28, 36, 41], "correctli": [0, 36, 38, 52, 73, 93], "posit": [0, 6, 16, 36], "itself": [0, 36, 39, 41, 59, 73, 92, 93], "topologi": [0, 36, 40], "now": [0, 36, 38, 41], "bt": [0, 21, 36, 38, 52, 54, 57, 65], "local": [0, 3, 4, 6, 10, 21, 36, 38, 40], "authent": [0, 11, 36, 38, 41], "digit": [0, 36, 38, 40, 41], "wa": [0, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 54, 73], "sent": [0, 21, 36, 39, 41, 54], "expect": [0, 21, 36, 38, 39, 59, 73, 90, 91], "confirm": [0, 4, 6, 10, 13, 16, 17, 18, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40], "inde": [0, 36], "claim": [0, 36, 40, 73], "plai": [0, 6, 15, 36, 38, 40, 41], "pivot": [0, 36, 38, 40, 41], "role": [0, 6, 11, 15, 19, 36, 38, 40, 41, 47, 54, 59], "trustworthi": [0, 36, 38, 40], "assur": [0, 36], "guard": [0, 36], "unauthor": [0, 36, 41], "replai": [0, 36], "attack": [0, 36], "increas": [0, 4, 6, 13, 14, 36, 40, 41], "nonc": [0, 6, 13, 28, 36, 41], "adversari": [0, 36], "reus": [0, 21, 36], "delai": [0, 36], "deceiv": [0, 36], "come": [0, 36, 38], "hasn": [0, 36], "t": [0, 20, 36, 37, 38, 73, 90], "foster": [0, 36], "node": [0, 6, 8, 9, 36, 38, 40, 41, 56, 57], "confid": [0, 36], "know": [0, 2, 36, 40, 61, 69, 71, 75, 79], "thei": [0, 2, 6, 11, 14, 15, 36, 37, 38, 40, 41, 47, 54, 59, 61, 69, 71, 74, 75, 77, 79, 84, 85, 90], "genuin": [0, 36], "cryptograph": [0, 36, 38, 40, 57], "techniqu": [0, 36], "relianc": [0, 36], "asymmetr": [0, 36], "encrypt": [0, 6, 8, 19, 36, 37, 45], "cornerston": [0, 36, 41], "modern": [0, 6, 19, 36], "onli": [0, 5, 6, 7, 8, 10, 11, 12, 21, 36, 38, 40, 41, 45, 59, 73, 74, 79], "entiti": [0, 36, 38, 40, 54, 59], "correct": [0, 4, 6, 36, 38, 41, 59, 73], "receiver_hotkei": [0, 36], "doesn": [0, 36, 73], "larger": [0, 36, 64, 73], "than": [0, 36, 64, 73, 92, 93], "previou": [0, 4, 6, 36, 38, 65], "success": [0, 1, 4, 5, 6, 13, 14, 15, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 90], "given": [0, 25, 29, 32, 36, 38, 40, 41, 42, 43, 52, 59, 73, 74, 77, 78, 79, 84, 85], "assum": [0, 36, 38, 40], "algorithm": [0, 36, 38, 40, 74, 77, 79, 84, 85], "where": [0, 4, 6, 7, 11, 13, 21, 36, 37, 38, 40, 45, 52, 65, 73, 77, 84, 90], "sign": [0, 21, 36, 38, 40], "privat": [0, 36], "public": [0, 6, 8, 9, 17, 19, 34, 36, 38, 40, 45], "axonmiddlewar": 0, "app": 0, "starlett": [0, 36, 39, 59], "basehttpmiddlewar": 0, "task": [0, 25, 36, 40, 41, 45, 46, 56, 58, 59, 61, 64, 66, 68, 69, 70, 71, 72, 73, 91], "addition": [0, 36, 40, 41, 47, 52, 59, 73], "act": [0, 21, 36, 38, 40, 54], "intermediari": [0, 54], "layer": [0, 6, 14, 36, 38, 40, 54, 65], "each": [0, 4, 5, 6, 8, 9, 11, 12, 14, 15, 16, 18, 20, 21, 25, 33, 35, 36, 38, 40, 41, 45, 47, 56, 59, 61, 65, 79, 85], "accord": [0, 1, 6, 13, 36, 38, 39, 41], "protocol": [0, 2, 3, 6, 15, 19, 31, 36, 40, 41, 46, 51, 55, 58], "intercept": 0, "necessari": [0, 6, 11, 13, 21, 36, 38, 40, 41, 52, 92, 93], "preprocess": [0, 21, 36, 74, 79], "assess": [0, 36, 38, 40, 73], "through": [0, 21, 36, 40, 45, 65, 73, 77, 79, 84], "postprocess": 0, "dispatch": 0, "call_next": 0, "central": [0, 36, 38], "unit": [0, 36, 40, 61, 73, 90, 91], "requestresponseendpoint": 0, "gener": [0, 6, 19, 21, 36, 39, 40, 45, 46, 47, 59, 65, 77, 84, 91], "fill": [0, 21, 36, 47, 54], "evalu": [0, 25, 61, 73], "assign": [0, 6, 9, 14, 36, 38, 40, 41, 56, 57, 59], "6": [0, 2, 6, 14, 36, 56, 73, 74, 75, 79], "next": [0, 6, 13, 62], "7": [0, 2, 6, 14, 36, 73], "end": [0, 2, 6, 15, 25, 36, 41, 61], "occur": [0, 21, 36, 56, 59], "stage": [0, 36, 40], "appropri": [0, 6, 13, 21, 36, 38, 39, 59], "client": [0, 21, 36, 39], "extract": [0, 21, 36, 39, 59, 73, 74, 79], "relev": [0, 6, 15, 36, 38, 46, 58, 59, 66, 73, 75, 79], "url": [0, 4, 5, 6, 21, 36, 40], "path": [0, 4, 6, 7, 8, 16, 19, 36, 37, 38, 40, 45, 76, 79], "dendrit": [0, 36, 41, 46, 59], "foundat": [0, 6, 14, 19, 36, 40], "subsequ": [0, 21, 36, 54], "encapsul": [0, 21, 36, 38, 39, 41, 54, 59, 65], "predefin": [0, 36, 40], "criteria": [0, 6, 12, 36, 40, 46, 58, 66, 86], "due": [0, 4, 6, 19, 25, 73], "unmet": 0, "concern": 0, "retriev": [0, 4, 5, 6, 9, 11, 14, 15, 36, 37, 38, 39, 40, 45, 52], "aris": 0, "proce": [0, 6, 10, 13], "further": [0, 6, 13, 59], "pipelin": 0, "failur": [0, 4, 6, 36, 41, 92, 93], "result": [0, 4, 6, 7, 36, 37, 40, 41, 59, 65, 77, 84], "disallow": 0, "sourc": [0, 36, 40, 45], "malici": [0, 36, 41, 73], "intent": 0, "extrem": 0, "spam": 0, "abus": 0, "prohibit": 0, "certain": [0, 36, 40, 59, 73], "found": [0, 36, 37, 40, 54], "halt": 0, "determin": [0, 4, 6, 11, 13, 21, 36, 38, 40, 41, 54, 57, 73, 92, 93], "urgenc": 0, "queue": [0, 36, 43, 74, 79], "encount": [0, 11, 36, 42], "timeout": [0, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 59, 64], "promptli": 0, "origin": [0, 25, 36, 41, 47], "actual": [0, 36, 37, 39, 40, 45, 47, 54, 59], "place": [0, 6, 13, 20, 21, 36, 38, 40, 92, 93], "lead": 0, "start_tim": [0, 25, 43], "final": [0, 6, 14, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 59], "send": [0, 4, 6, 11, 17, 21, 36, 38, 39, 40, 41], "timestamp": [0, 36, 38], "last": [0, 4, 6, 9, 12, 20, 36, 38], "format": [0, 1, 4, 5, 6, 8, 11, 12, 14, 19, 21, 25, 36, 38, 39, 40, 41, 59, 61, 73], "standard": [1, 6, 19, 36, 38, 40, 41, 68, 69, 71, 72, 74, 77, 79, 84, 85, 86], "logger": [1, 23, 25, 29, 32, 40], "_remove_loguru_ansi_direct": 1, "__has_been_inited__": [1, 36], "__debug_on__": [1, 36], "__trace_on__": [1, 36], "__std_sink__": [1, 36], "__file_sink__": [1, 36], "get": [1, 6, 11, 14, 19, 20, 21, 28, 36, 38, 40, 41, 43, 45, 74, 79], "fro": [1, 36], "set_debug": [1, 36], "debug_on": [1, 36], "debug": [1, 21, 36, 38, 41, 59], "cl": [1, 36, 52, 60], "set_trac": [1, 36], "trace_on": [1, 36], "trace": [1, 36, 54], "get_level": [1, 36], "log_filt": [1, 36], "record": [1, 36, 38], "log_save_filt": [1, 36], "log_formatt": [1, 36], "extra": [1, 36, 73], "log_save_formatt": [1, 36], "_format": [1, 36], "sufix": [1, 36], "warn": [1, 36, 45, 93], "traceback": [1, 21, 36, 54], "custom_rpc_type_registri": [2, 36], "properti": [2, 21, 36, 37, 38, 40, 41, 43, 45, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "is_serv": [2, 36], "version": [2, 6, 10, 29, 32, 36, 37, 38, 40, 41, 44, 65], "ip_typ": [2, 36, 44], "coldkei": [2, 3, 4, 5, 6, 7, 8, 9, 12, 16, 18, 19, 33, 35, 36, 38, 40, 45], "placeholder1": [2, 31, 36, 40], "placeholder2": [2, 31, 36, 40], "ip_str": [2, 36], "whole": [2, 36], "string": [2, 5, 6, 19, 20, 21, 25, 36, 37, 38, 40, 41, 42, 45, 59, 73, 74, 79], "__eq__": [2, 36], "repr": [2, 20, 36, 37, 38, 40, 69, 71, 79, 85, 92, 93], "convert": [2, 5, 6, 36, 38, 41, 59, 63, 93], "json": [2, 6, 19, 21, 36, 39, 41, 45, 59], "from_str": [2, 36], "from_neuron_info": [2, 36], "neuron_info": [2, 36], "axon_info": [2, 36], "to_parameter_dict": [2, 36], "torch": [2, 21, 25, 29, 32, 36, 38, 40, 42, 61, 64, 65, 68, 69, 70, 71, 72, 74, 77, 79, 80, 84, 85], "tensor": [2, 6, 14, 25, 36, 38, 41, 46, 61, 65, 77, 84], "nn": [2, 21, 25, 36, 38, 65], "parameterdict": [2, 36], "from_parameter_dict": [2, 36], "parameter_dict": [2, 36], "chaindatatyp": [2, 36], "arg": [2, 3, 20, 21, 25, 36, 43, 47, 61, 65, 69, 71, 73, 74, 75, 77, 79, 84, 85], "kwd": [2, 36, 61, 69, 71, 75, 79], "enum": [2, 36, 61, 69, 71, 75, 79], "collect": [2, 20, 36, 38, 40, 61, 62, 69, 71, 75, 79], "pair": [2, 6, 7, 36, 40, 41, 61, 69, 71, 75, 79], "enumer": [2, 6, 8, 36, 61, 69, 71, 75, 79], "color": [2, 36, 61, 69, 71, 75, 79], "red": [2, 4, 6, 36, 61, 69, 71, 73, 75, 79], "blue": [2, 36, 61, 69, 71, 75, 79], "green": [2, 4, 6, 36, 61, 69, 71, 73, 75, 79], "lookup": [2, 36, 61, 69, 71, 75, 79], "iter": [2, 21, 36, 38, 40, 41, 61, 62, 69, 71, 75, 79], "over": [2, 4, 6, 11, 21, 36, 38, 41, 61, 69, 71, 75, 79], "mani": [2, 25, 36, 61, 69, 71, 73, 75, 79, 92, 93], "member": [2, 6, 14, 15, 36, 40, 61, 69, 71, 75, 79], "len": [2, 36, 61, 69, 71, 75, 79], "own": [2, 4, 6, 36, 38, 40, 41, 47, 54, 61, 69, 71, 73, 75, 79, 92, 93], "see": [2, 6, 11, 15, 36, 40, 61, 69, 71, 75, 79], "document": [2, 36, 40, 46, 61, 69, 71, 75, 79], "neuroninfo": [2, 36, 40], "subnetinfo": [2, 36, 40], "delegateinfo": [2, 4, 15, 36, 40], "neuroninfolit": [2, 6, 12, 36, 40], "delegatedinfo": [2, 36], "stakeinfo": [2, 36, 40], "ipinfo": [2, 36, 40], "subnethyperparamet": [2, 36, 40], "8": [2, 6, 11, 14, 36, 41, 59, 73], "raopertao": [2, 36], "1000000000": [2, 11, 36], "u16_max": [2, 36], "u64_max": [2, 36], "18446744073709551615": [2, 36], "from_scale_encod": [2, 36], "type_nam": [2, 36], "is_vec": [2, 36], "is_opt": [2, 36], "union": [2, 21, 23, 25, 28, 29, 32, 33, 34, 35, 36, 40, 42, 45, 51, 79, 85], "byte": [2, 5, 6, 36, 37, 40, 41, 45], "scalecodec": [2, 36], "scalebyt": [2, 36], "from_scale_encoding_using_type_str": [2, 36], "type_str": [2, 36], "dataclass": [2, 36], "metadata": [2, 36, 38, 41, 59], "uid": [2, 6, 9, 12, 14, 16, 25, 26, 27, 29, 31, 32, 33, 35, 36, 38, 40, 57, 63, 64, 65], "stake": [2, 4, 5, 6, 7, 9, 12, 14, 18, 19, 22, 23, 24, 34, 35, 36, 38, 40, 45, 46, 54], "util": [2, 6, 19, 21, 23, 33, 34, 35, 36, 38, 40, 45, 47], "balanc": [2, 4, 6, 7, 12, 13, 16, 17, 19, 23, 33, 34, 35, 36, 40, 45], "stake_dict": [2, 36], "total_stak": [2, 36, 38, 40], "emiss": [2, 6, 7, 9, 11, 12, 36, 38, 40], "incent": [2, 6, 9, 12, 36, 38, 40], "consensu": [2, 6, 9, 12, 15, 36, 38, 40], "validator_trust": [2, 36, 38], "dividend": [2, 6, 9, 12, 36, 38], "last_upd": [2, 25, 36, 38], "validator_permit": [2, 36, 38], "weight": [2, 6, 14, 25, 29, 32, 36, 38, 40, 45, 46, 56, 57, 58, 66, 75, 79], "bond": [2, 36, 38, 40], "prometheus_info": [2, 36], "prometheusinfo": [2, 36], "pruning_scor": [2, 36], "is_nul": [2, 36], "fix_decoded_valu": [2, 36], "neuron_info_decod": [2, 36], "fix": [2, 36, 40], "from_vec_u8": [2, 36], "vec_u8": [2, 36], "list_from_vec_u8": [2, 36], "static": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 36, 38, 40, 42, 63, 73, 76, 79, 85], "_null_neuron": [2, 36, 40], "from_weights_bonds_and_neuron_lit": [2, 36], "neuron_lit": [2, 36], "weights_as_dict": [2, 36], "bonds_as_dict": [2, 36], "_neuron_dict_to_namespac": [2, 36], "neuron_dict": [2, 36], "prometheu": [2, 24, 25, 36, 40, 44, 46], "prometheus_info_decod": [2, 36], "deleg": [2, 5, 6, 7, 11, 15, 16, 22, 24, 33, 36, 38, 39, 40, 46], "hotkey_ss58": [2, 6, 12, 33, 35, 36, 40], "nomin": [2, 4, 6, 22, 36, 40], "owner_ss58": [2, 36], "return_per_1000": [2, 36], "total_daily_return": [2, 36], "delegated_list_from_vec_u8": [2, 36], "amount": [2, 4, 6, 7, 11, 12, 13, 14, 16, 17, 18, 23, 33, 34, 35, 36, 38, 40, 73], "coldkey_ss58": [2, 36, 40], "list_of_tuple_from_vec_u8": [2, 36], "rho": [2, 6, 9, 11, 12, 36, 40], "kappa": [2, 11, 36, 40], "difficulti": [2, 6, 9, 11, 36, 40], "immunity_period": [2, 11, 36, 40], "max_allowed_valid": [2, 36, 40], "min_allowed_weight": [2, 11, 25, 36, 40], "max_weight_limit": [2, 11, 25, 36, 40], "scaling_law_pow": [2, 36, 40], "subnetwork_n": [2, 36, 40], "max_n": [2, 11, 36, 40], "blocks_since_epoch": [2, 36, 40], "tempo": [2, 11, 36, 40], "modal": [2, 36], "connection_requir": [2, 36], "emission_valu": [2, 36], "burn": [2, 6, 11, 13, 36, 40], "hyperparamet": [2, 11, 26, 36, 40], "min_difficulti": [2, 11, 36], "max_difficulti": [2, 11, 36], "weights_vers": [2, 11, 36], "weights_rate_limit": [2, 11, 36], "adjustment_interv": [2, 11, 36], "activity_cutoff": [2, 11, 36], "registration_allow": [2, 11, 36], "target_regs_per_interv": [2, 11, 36], "min_burn": [2, 11, 36], "max_burn": [2, 11, 36], "bonds_moving_avg": [2, 11, 36], "max_regs_per_block": [2, 11, 36], "encod": [2, 36, 40, 41, 54, 59, 65, 77, 79, 84], "proposalvotedata": [2, 15, 36, 40], "typeddict": [2, 36, 40, 44], "empti": [2, 36, 37, 40], "map": [2, 36, 40], "d": [2, 20, 21, 36, 38, 40], "k": [2, 36, 40, 64], "v": [2, 36, 40], "kwarg": [2, 20, 21, 36, 39, 40, 43, 47], "keyword": [2, 36, 40, 91], "For": [2, 6, 13, 21, 36, 38, 40, 41, 56, 59], "two": [2, 11, 20, 36, 40, 45], "index": [2, 4, 6, 36, 40, 74, 79, 86], "threshold": [2, 6, 15, 36, 40], "ay": [2, 6, 15, 36], "nai": [2, 6, 15, 36], "proposalcalldata": [2, 15, 36, 40], "consol": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 25], "alias_to_command": 3, "token": [3, 4, 6, 13, 16, 17, 18, 36, 39, 40, 45, 47, 59, 65, 77, 78, 79, 84], "transfer": [3, 6, 18, 22, 24, 36, 40, 45, 46], "__create_parser__": [3, 36], "create_config": [3, 36], "executor": [3, 36, 43], "under": [3, 6, 19, 25, 36, 37, 40, 45], "_get_coldkey_wallets_for_path": [4, 7, 16, 19], "show_deleg": 4, "prev_deleg": 4, "width": 4, "displai": [4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 36, 38, 45], "tabl": [4, 5, 6, 7, 9, 11, 14, 16, 25], "statist": [4, 6, 9, 13, 25, 74, 77, 79, 84, 85], "total": [4, 6, 9, 11, 25, 36, 38, 40, 41, 57], "descend": [4, 6, 12], "order": [4, 6, 36, 41, 45, 61, 92, 93], "snapshot": [4, 6, 9, 36, 38, 40], "decis": [4, 6, 11, 14, 15, 36, 38, 40, 73], "helper": [4, 36, 41, 68, 69, 71, 72, 86], "list_deleg": [4, 6], "my_deleg": [4, 6], "intend": [4, 6, 7, 8, 9, 10, 11, 15, 36, 38, 39, 40, 41, 59], "directli": [4, 6, 10, 14, 21, 36, 39, 40, 41, 45, 54, 59, 73], "unless": [4, 21, 36], "calcul": [4, 6, 11, 13, 25, 36, 38, 40, 41, 65, 74, 77, 78, 79, 84], "chang": [4, 5, 6, 7, 10, 11, 36, 40, 92, 93], "expand": [4, 11, 65, 77, 84], "maximum": [4, 5, 6, 11, 16, 18, 21, 25, 28, 36, 40, 41, 92, 93], "follow": [4, 5, 6, 9, 10, 11, 12, 14, 36, 41, 56, 57, 61], "column": [4, 6, 7, 9, 11, 12, 13, 25, 93], "ss58": [4, 5, 6, 8, 11, 12, 16, 17, 18, 19, 23, 33, 35, 36, 40, 45], "truncat": [4, 6], "\u03c4": [4, 6, 9, 12, 14], "held": [4, 6, 7, 36, 38, 40], "4h": [4, 6], "percentag": [4, 6, 36, 40], "past": [4, 6, 36, 38], "hour": [4, 6], "vpermit": [4, 6, 12], "permit": [4, 6, 12, 36, 40], "24h": [4, 6], "k\u03c4": [4, 6], "earn": [4, 6, 7, 9, 12, 36, 38, 40], "1000": [4, 6], "24": [4, 6, 14, 19, 36, 45], "desc": [4, 6], "brief": [4, 6, 73], "cli": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 36, 40, 46], "show": [4, 6, 14, 15, 16, 19, 25, 73], "who": [4, 6, 11, 13, 15, 16, 18, 19, 36, 40, 41, 73], "consid": [4, 6, 11, 15, 47], "current_deleg": 4, "previous_deleg": 4, "80": 4, "primarili": [4, 5, 6, 10, 14, 36, 38, 40, 59], "purpos": [4, 5, 6, 11, 19, 21, 36, 38, 40, 45, 59], "rich": 4, "librari": 4, "render": 4, "delegatestakecommand": [4, 6], "tao": [4, 5, 6, 11, 12, 13, 16, 17, 18, 23, 28, 33, 34, 35, 36, 40, 45], "action": [4, 5, 6, 11, 36, 40], "alloc": [4, 6, 14, 16, 36, 38, 40], "reward": [4, 6, 7, 13, 14, 36, 38, 40, 46, 58, 63, 65, 66, 88, 93], "delegate_ss58kei": [4, 6], "entir": [4, 6, 9, 21, 36, 73], "must": [4, 5, 6, 9, 11, 29, 32, 36, 38, 39, 40, 45, 47, 54, 61, 92, 93], "transact": [4, 5, 6, 7, 13, 17, 19, 22, 23, 36, 38, 40, 41, 45], "chosen": [4, 6], "prompt": [4, 5, 6, 10, 11, 13, 16, 17, 18, 19, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 46, 47, 94], "btcli": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "ss58_address": [4, 6, 19, 34, 36, 40, 45], "modifi": [4, 6, 8, 11, 12, 36, 39, 40], "blockchain": [4, 5, 6, 36, 38, 40, 57], "mai": [4, 6, 11, 13, 36, 38, 54, 73, 90, 92, 93], "incur": [4, 5, 6], "fee": [4, 5, 6, 36, 40], "delegateunstakecommand": [4, 6], "undeleg": [4, 6, 36, 40], "withdraw": [4, 6, 18, 36, 40], "known": [4, 6, 15, 36, 40, 73], "revers": [4, 6], "free": [4, 6, 19], "attempt": [4, 6, 13, 28, 36, 38, 41, 73], "proceed": [4, 6, 13, 16, 17, 18, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40], "care": [4, 6, 13], "affect": [4, 6, 10, 13, 36, 40], "listdelegatescommand": [4, 6], "comprehens": [4, 6, 7, 11, 12, 14, 16, 19, 36, 40, 73], "overview": [4, 6, 7, 8, 11, 14, 16, 36, 40, 46], "count": [4, 6, 19, 74, 79], "cumul": [4, 6, 36, 38, 40, 74, 77, 79, 84, 85], "four": [4, 6], "done": [4, 6], "highlight": [4, 6], "decreas": [4, 6, 14], "entri": [4, 6, 21, 36, 40], "mark": [4, 6], "na": [4, 6], "hyperlink": [4, 6], "respect": [4, 6, 8, 15, 19, 36, 38, 45, 92, 93], "root": [4, 5, 6, 8, 9, 15, 24, 36, 38, 40, 41, 46], "finnei": [4, 6, 11, 36, 38, 40], "test": [4, 6, 9, 13, 14, 28, 36, 37, 38, 40, 90, 91, 92, 93], "tool": [4, 6, 14, 36, 40, 41], "nominatecommand": [4, 6], "becom": [4, 6, 23, 36, 40], "unlock": [4, 6, 36, 45], "redund": [4, 6], "tri": [4, 6, 73], "report": [4, 6, 7], "upon": [4, 5, 6, 8, 10, 11, 14, 21, 36, 38, 40, 54], "To": [4, 6, 21, 36], "my_hotkei": [4, 6, 16], "outcom": [4, 6, 36, 41], "programmat": [4, 5, 6], "natur": [4, 6, 21, 36, 38, 40, 73], "mydelegatescommand": [4, 6], "insight": [4, 6, 14, 15, 36, 40, 59, 73], "aggreg": [4, 6, 36, 40], "across": [4, 6, 11, 14, 16, 18, 36, 38, 40, 41, 45, 74, 77, 79, 84, 85], "owner": [4, 6, 11, 13, 36, 40], "nom": [4, 6], "sum": [4, 6, 36, 40, 41, 65, 77, 84], "suit": [4, 6, 13], "singl": [4, 6, 7, 14, 21, 36, 40, 59, 73, 92, 93], "present": [4, 6, 8, 12, 36, 40, 41], "setidentitycommand": [5, 6], "set_ident": [5, 6], "attribut": [5, 21, 38, 41, 59, 61, 69, 71, 75, 79, 90, 92, 93], "legal": [5, 6], "web": [5, 6], "pgp": [5, 6], "fingerprint": [5, 6, 36, 41], "contact": [5, 6], "among": [5, 6, 14, 16, 36, 38, 40, 45], "riot": [5, 6], "email": [5, 6], "pgp_fingerprint": [5, 6], "imag": [5, 6], "twitter": [5, 6], "size": [5, 6, 21, 25, 36, 38, 41, 65, 77, 84], "consent": [5, 6], "cost": [5, 6, 11, 13, 36, 40], "64": [5, 6], "20": [5, 6, 14], "enter": [5, 6, 11, 14, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 45, 54], "hex": [5, 6, 19, 36, 40, 45], "willing": [5, 6], "high": [5, 6, 19, 36, 40, 73], "script": [5, 6], "getidentitycommand": [5, 6], "get_ident": [5, 6], "queri": [5, 6, 9, 11, 21, 22, 25, 36, 38, 40, 41, 57], "structur": [5, 6, 8, 10, 11, 13, 14, 15, 36, 38, 39, 40, 41, 47, 54, 59], "item": [5, 6, 20, 36, 41, 43, 62], "btli": [5, 6], "s58_address": [5, 6], "metagraph": [6, 21, 25, 36, 40, 45, 46, 50, 54, 56, 64, 65], "misc": [6, 36, 46, 58, 66], "senat": [6, 14, 24, 36, 40, 46], "unstak": [6, 22, 23, 24, 36, 40, 45, 46], "munch": [6, 20, 36], "stakecommand": [6, 16], "more": [6, 9, 16, 18, 28, 36, 38, 40, 54, 73], "influenc": [6, 14, 16, 36, 38, 40, 73], "either": [6, 16, 18, 19, 36, 40, 45], "suffici": [6, 13, 16, 17, 18, 36, 40], "max_stak": [6, 16, 18], "all_hotkei": [6, 16, 18], "exclud": [6, 16, 18, 64], "100": [6, 11, 14, 16, 17, 18, 36, 38, 61, 74, 79], "wish": [6, 11, 13, 14, 15, 16, 18, 19], "distribut": [6, 11, 12, 14, 16, 36, 38, 40, 41, 74, 77, 79, 84, 85], "strateg": [6, 16, 36, 40], "enhanc": [6, 16, 19, 36, 38, 40, 41], "stakeshow": [6, 16], "account": [6, 12, 16, 17, 29, 32, 33, 34, 36, 40], "view": [6, 11, 12, 15, 16, 19, 36, 40, 59], "directori": [6, 8, 10, 12, 16, 19, 36, 37, 38, 52], "rate": [6, 11, 16, 36, 38, 40, 65], "instead": [6, 16, 36, 39, 54], "just": [6, 16, 36, 38, 59, 73], "compil": [6, 7, 11, 12, 16], "shown": [6, 16, 25, 73], "dai": [6, 11, 16, 36, 40], "monitor": [6, 12, 15, 16, 19, 21, 36, 40, 41, 57], "clear": [6, 11, 16, 36, 38, 39], "unstakecommand": [6, 18], "previous": [6, 18], "hotkey_ss58address": [6, 18], "remain": [6, 18, 21, 36, 38, 56], "hk1": [6, 18], "hk2": [6, 18], "realloc": [6, 18, 36, 40], "command_pars": [6, 18], "overviewcommand": [6, 12], "seek": [6, 11, 12, 14, 15], "summari": [6, 12, 25, 73, 91], "choos": [6, 12], "tabular": [6, 12], "score": [6, 9, 12, 36, 38, 65, 73, 74, 79, 80], "p": [6, 8, 9, 12, 36, 40], "vtrust": [6, 9, 12], "time": [6, 9, 12, 19, 25, 36, 38, 40, 41, 43, 73], "sinc": [6, 9, 12, 36, 37, 92, 93], "axon": [6, 9, 12, 13, 21, 31, 36, 38, 40, 41, 44, 46, 52, 54, 56, 59], "sort_bi": [6, 12], "sort_ord": [6, 12], "read": [6, 8, 11, 12, 36, 37, 41, 52, 59], "quick": [6, 8, 12, 36, 40, 41], "ideal": [6, 12, 19], "overal": [6, 12, 36, 40], "colkei": [6, 12, 36, 45], "_get_neurons_for_netuid": [6, 12], "args_tupl": [6, 12], "_get_de_registered_stake_for_coldkey_wallet": [6, 12], "powregistercommand": [6, 13], "pow_regist": [6, 13], "proof": [6, 11, 13], "work": [6, 11, 13, 21, 36, 43, 59], "pow": [6, 11, 13, 28, 36, 40], "altern": [6, 13, 36, 40], "leverag": [6, 13, 36, 38, 40, 56], "comput": [6, 13, 36, 38, 40, 41], "On": [6, 13, 36, 40], "solv": [6, 13, 28], "puzzl": [6, 13], "mandatori": [6, 13, 59], "target": [6, 13, 21, 36, 40, 79, 80], "num_process": [6, 13, 28, 36, 40], "processor": [6, 13], "system": [6, 13, 21, 36, 37, 38, 40, 45, 47, 59, 73], "update_interv": [6, 13, 28, 36, 40], "frequenc": [6, 13], "no_output_in_plac": [6, 13], "disabl": [6, 13, 19, 36, 40], "cleaner": [6, 13], "verbos": [6, 13], "cuda": [6, 13, 28, 36, 40], "use_cuda": [6, 13], "gpu": [6, 13], "acceler": [6, 13], "compat": [6, 13, 36, 38, 40, 41], "no_cuda": [6, 13], "cpu": [6, 13], "dev_id": [6, 13, 28, 36, 40], "devic": [6, 8, 13, 28, 36, 37, 45, 76, 77, 78, 79, 80, 81, 82, 83, 84], "tpb": [6, 13, 28, 36, 40], "addit": [6, 11, 13, 19, 36, 38, 41, 92, 93], "adequ": [6, 13], "sound": [6, 13], "understand": [6, 11, 13, 14, 15, 21, 36, 38, 40, 59], "hardwar": [6, 13], "softwar": [6, 13, 36, 38], "particularli": [6, 11, 13, 14, 15, 19, 36, 38, 40, 41, 73], "opt": [6, 13], "direct": [6, 13, 25, 36, 38, 40, 78, 79], "perman": [6, 13], "registercommand": [6, 13], "recycl": [6, 11, 13, 28, 36, 40], "some": [6, 13, 21, 36, 73], "nativ": [6, 13, 36, 40, 41], "robust": [6, 13, 36, 41], "cover": [6, 13, 21, 36, 38, 40, 90, 91], "insuffici": [6, 13, 36, 40], "precondit": [6, 13], "met": [6, 13, 36, 40], "no_prompt": [6, 10, 11, 13, 19, 36, 37], "consider": [6, 13], "select": [6, 13, 36, 40], "fund": [6, 7, 13, 17, 34, 36, 40], "runfaucetcommand": [6, 13], "faucet": [6, 13, 28, 36, 40], "obtain": [6, 13, 36, 38, 65, 77, 84], "testnet": [6, 13, 36, 40], "effort": [6, 13, 36, 40], "real": [6, 13, 36, 40], "higher": [6, 13, 36, 38, 40, 54], "chanc": [6, 13], "impact": [6, 11, 13, 14, 36, 38, 40], "visibl": [6, 13, 14], "suitabl": [6, 13, 36, 38, 41], "prefer": [6, 13, 54, 78, 79], "meant": [6, 13, 54], "experi": [6, 13], "swaphotkeycommand": [6, 13], "swap": [6, 13, 36, 40], "newcoldkeycommand": [6, 19], "new_coldkei": [6, 19, 36, 45], "word": [6, 19, 36, 45, 61], "mnemon": [6, 19, 36, 45], "password": [6, 19, 22, 36, 37, 45], "protect": [6, 19, 36, 38, 40, 45], "overwrit": [6, 19, 36, 37, 45], "n_word": [6, 19, 36, 45, 61], "phrase": [6, 19, 25], "use_password": [6, 19, 36, 45], "overwrite_coldkei": [6, 19], "15": [6, 14, 19, 36, 41], "newhotkeycommand": [6, 19], "new_hotkei": [6, 19, 36, 45], "overwrite_hotkei": [6, 19], "miner": [6, 19, 36, 38, 46, 52, 53, 56, 57, 58, 94], "hotk": [6, 19], "regencoldkeycommand": [6, 19], "regen_coldkei": [6, 19, 36, 45], "regener": [6, 19, 36, 45], "seed": [6, 19, 36, 45, 73], "file": [6, 19, 36, 37, 38, 45, 74, 79], "backup": [6, 19, 36, 45], "json_password": [6, 19], "decrypt": [6, 19, 22, 36, 37, 45], "word1": [6, 19], "word2": [6, 19], "word12": [6, 19], "possibli": [6, 19, 36, 45], "recoveri": [6, 19], "reason": [6, 19], "caution": [6, 10, 19], "avoid": [6, 17, 19, 54, 73], "unintention": [6, 19], "regencoldkeypubcommand": [6, 19], "regen_coldkeypub": [6, 19, 36, 45], "recreat": [6, 19, 36, 45], "hexadecim": [6, 19, 36, 41], "public_key_hex": [6, 19], "overwrite_coldkeypub": [6, 19], "5dkq4": [6, 19], "perhap": [6, 19], "corrupt": [6, 19, 22, 36, 37, 45], "loss": [6, 17, 19, 25, 65], "focus": [6, 19, 36, 40, 59], "regenhotkeycommand": [6, 19], "regen_hotkei": [6, 19, 36, 45], "similar": [6, 11, 19, 21, 36, 38], "0x1234": [6, 19], "upgrad": [6, 19], "cautious": [6, 19], "accident": [6, 19], "updatewalletcommand": [6, 19], "legaci": [6, 10, 19, 36, 37], "choic": [6, 19, 36, 40], "highest": [6, 19, 36, 40], "recommend": [6, 10, 19, 21, 36, 45], "period": [6, 11, 19, 36, 40, 54, 74, 79], "date": [6, 19, 56], "latest": [6, 10, 19, 36, 38, 40, 56, 65], "practic": [6, 19, 36, 38], "walletcreatecommand": [6, 19], "cold": [6, 7, 19, 36, 37], "21": [6, 14, 19], "those": [6, 19, 21, 36, 73], "renew": [6, 19], "fresh": [6, 19], "walletbalancecommand": [6, 19], "fetch": [6, 7, 11, 14, 19, 36, 38], "financi": [6, 19, 36, 40, 45], "keep": [6, 19, 34, 36, 41, 45], "track": [6, 19, 36, 38, 40, 41], "asset": [6, 19, 36, 38], "health": [6, 19, 36, 40], "transfercommand": [6, 17], "anoth": [6, 17, 20, 36, 38, 40], "destin": [6, 17, 32, 34, 36, 40], "dest": [6, 17, 34, 36, 40], "ed2519": [6, 17], "transpar": [6, 14, 15, 17, 36, 41], "accuraci": [6, 17, 36, 40], "5dp8": [6, 17], "inspectcommand": [6, 7], "locat": [6, 7, 36, 38], "standalon": [6, 7, 9], "hot": [6, 7], "metagraphcommand": [6, 9], "tau": [6, 9], "align": [6, 9, 36, 38, 40], "val": [6, 9, 36, 40], "partial": [6, 9, 73], "wide": [6, 9, 36, 38, 40], "issuanc": [6, 9, 36, 40], "analysi": [6, 9, 36, 38, 40, 41], "diagnost": [6, 9], "listcommand": [6, 8], "organ": [6, 8], "tree": [6, 8], "along": [6, 8, 11, 15, 21, 36, 40], "hierarch": [6, 8], "child": [6, 8], "invoc": [6, 8, 10, 11], "scan": [6, 8], "denot": [6, 8, 36, 38], "unavail": [6, 8], "filesystem": [6, 8, 36, 37], "updatecommand": [6, 10], "seri": [6, 10], "instal": [6, 10], "master": [6, 10], "branch": [6, 10], "github": [6, 10], "repositori": [6, 10], "pull": [6, 10], "reinstal": [6, 10], "explicitli": [6, 10, 21, 36, 38, 73], "y": [6, 10, 14], "pip": [6, 10], "ff": [6, 10], "fast": [6, 10], "easi": [6, 10, 36, 41], "senatecommand": [6, 15], "govern": [6, 14, 15, 36, 38, 40], "interest": [6, 14, 15, 36, 40], "propos": [6, 15, 36, 40], "proposalscommand": [6, 15], "vote": [6, 15, 30, 36, 40], "showvotescommand": [6, 15], "proposal_vot": [6, 15], "breakdown": [6, 15], "cast": [6, 15, 36, 42], "particular": [6, 11, 15, 36, 40], "proposal_hash": [6, 15, 30, 36, 40], "disagr": [6, 15], "deprec": [6, 15], "pleas": [6, 15, 73], "senateregistercommand": [6, 15], "senate_regist": [6, 15], "signific": [6, 14, 15, 36, 38, 40, 74, 79], "toward": [6, 15, 36, 38, 40], "engag": [6, 14, 15, 36, 40], "senateleavecommand": [6, 15], "senate_leav": [6, 15], "discard": [6, 15], "membership": [6, 15, 36, 40], "voluntarili": [6, 15], "leav": [6, 15, 73], "futur": [6, 15, 31, 36, 38, 40, 43], "longer": [6, 15, 21, 36], "desir": [6, 15, 36, 40, 41, 59], "votecommand": [6, 15], "senate_vot": [6, 15], "shape": [6, 15, 36, 40, 42, 65], "want": [6, 11, 14, 15], "exercis": [6, 15, 90, 91], "right": [6, 15], "evolut": [6, 15, 36, 38], "rootregistercommand": [6, 14], "formal": [6, 14, 36, 38], "acknowledg": [6, 14], "advanc": [6, 11, 14, 36, 40], "deepli": [6, 14], "relat": [6, 14, 22, 36, 40, 47, 59, 73], "straightforward": [6, 14], "rootlist": [6, 14], "constitut": [6, 14], "5cacupsssdkwcmjbmdmjdnwva15fjquz5hssggvdzffphaua": [6, 14], "27086": [6, 14], "37070": [6, 14], "ye": [6, 14], "raok9": [6, 14], "5gmaak7frpxnaxjbqvxcoezmgzfkrdee76egmkob3wxubur": [6, 14], "520": [6, 14], "24199": [6, 14], "No": [6, 14, 36, 37], "open\u03c4ensor": [6, 14], "founda\u03c4ion": [6, 14], "5f4tqywrhfgvcnhoqeinsr6kjd4wmz2kfhlj4ohyuyhbzac3": [6, 14], "1275437": [6, 14], "45895": [6, 14], "roundtable21": [6, 14], "5ffapas75bv5pjhfap2fvlbj9zaxufdjeypsabnc1wcfe52v": [6, 14], "84718": [6, 14], "42095": [6, 14], "5hk5tp6t2s59dywmhrwpbvjej86t61kjuryqeooqj8srepen": [6, 14], "168897": [6, 14], "40859": [6, 14], "rizzo": [6, 14], "5cxrfp2ekfhe62r7q3vpprajjmghti7vwvb2yr79jvez282w": [6, 14], "53383": [6, 14], "34400": [6, 14], "\u03c4aos\u03c4a\u03c4": [6, 14], "bitapai": [6, 14], "5hddm3ibfd2glt5ik7lznt3xjunrnn8poecfggqgawuvknm8": [6, 14], "646944": [6, 14], "73569": [6, 14], "composit": [6, 14, 36, 40], "rootsetweightscommand": [6, 14], "comma": [6, 14], "power": [6, 14, 36, 40], "rootgetweightscommand": [6, 14], "get_weight": [6, 14], "9": [6, 14, 20, 36, 65, 77, 84], "11": [6, 14], "13": [6, 14], "18": [6, 14], "19": [6, 14], "00": [6, 14], "40": [6, 14], "10": [6, 11, 14, 21, 36, 41, 73, 74, 79], "25": [6, 14], "30": [6, 14, 36, 41], "60": [6, 14], "49": [6, 14], "35": [6, 14], "59": [6, 14], "14": [6, 14, 74, 79], "53": [6, 14], "12": [6, 14, 21, 36, 45], "06": [6, 14], "03": [6, 14], "rootsetboostcommand": [6, 14], "boost": [6, 14], "coorespond": [6, 14], "01": [6, 14, 65, 74, 79], "e": [6, 11, 14, 27, 31, 36, 38, 40, 41, 45, 47, 54], "g": [6, 11, 14, 36, 40, 41, 47], "normal": [6, 14, 36, 40, 65, 74, 77, 79, 84, 85], "0000": [6, 14], "5455": [6, 14], "4545": [6, 14], "do": [6, 14, 36, 37], "16": [6, 14], "17": [6, 14], "22": [6, 14], "23": [6, 14, 36, 41], "26": [6, 14], "27": [6, 14], "28": [6, 14], "29": [6, 14], "31": [6, 14, 27, 31], "32": [6, 14], "33": [6, 14], "34": [6, 14], "36": [6, 14], "37": [6, 14], "38": [6, 14], "39": [6, 14], "n": [6, 11, 14, 36, 38, 65, 74, 79], "2023": [6, 14], "09": [6, 14], "001": [6, 14, 74, 79], "rootsetslashcommand": [6, 14], "slash": [6, 14], "4318": [6, 14], "5682": [6, 14], "_get_hotkey_wallets_for_wallet": [7, 16], "packag": [10, 41, 94], "registersubnetworkcommand": 11, "register_subnetwork": [11, 36, 40], "subnetwork": [11, 26, 36, 40], "credenti": 11, "successfulli": 11, "copi": [11, 20, 36, 38], "prepar": [11, 73], "awar": 11, "implic": 11, "ecosystem": [11, 36, 38, 40, 41], "subnetlockcostcommand": 11, "lock_cost": 11, "lock": [11, 36, 40], "piec": [11, 21, 36], "anyon": 11, "infrastructur": [11, 36, 38, 40], "anneal": 11, "unapp": 11, "reach": 11, "amenbl": 11, "get_subnet_burn_cost": [11, 36, 40], "In": [11, 20, 21, 25, 36, 38, 41, 59], "problem": 11, "catch": 11, "plan": [11, 36, 40], "invest": [11, 36, 38, 40], "subnetlistcommand": 11, "capac": [11, 36, 40], "basic": [11, 36, 38, 41, 59], "construct": [11, 21, 25, 36, 37, 38, 40, 41, 74, 79, 92, 93], "sudo": 11, "footer": 11, "summar": [11, 73, 91], "ownership": 11, "hyperparam": 11, "subnetsudocommand": 11, "theirs": 11, "param": [11, 20, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 64, 65, 77, 79, 84], "familiar": 11, "subnethyperparamscommand": 11, "32767": 11, "7200": [11, 36, 40], "455": 11, "99": 11, "1000000000000000000": 11, "2013": 11, "112": 11, "5000": 11, "100000000000": 11, "900000": 11, "subnetgethyperparamscommand": 11, "whose": [11, 36, 40, 92, 93], "format_call_data": 15, "call_data": 15, "display_vot": 15, "vote_data": 15, "delegate_info": 15, "_get_coldkey_ss58_addresses_for_path": 19, "invalidconfigfil": [20, 36], "yamlerror": [20, 36], "strict": [20, 36], "defaultmunch": [20, 36], "__is_set": [20, 36], "translat": [20, 36], "nest": [20, 36], "strictli": [20, 36], "undefin": [20, 36], "__split_params__": [20, 36], "_config": [20, 36], "namespac": [20, 36, 60], "__parse_args__": [20, 36], "__deepcopy__": [20, 36], "memo": [20, 36], "invert": [20, 36], "b": [20, 36, 37, 38, 40], "foo": [20, 36], "lol": [20, 36], "hello": [20, 36, 41, 59], "42": [20, 36, 54, 59], "poni": [20, 36], "pretti": [20, 36], "eval": [20, 36], "with_spac": [20, 36], "c": [20, 36, 38], "simpl": [20, 36, 38, 41, 54], "so": [20, 21, 36, 41, 73, 92, 93], "long": [20, 36, 40, 92, 93], "_remove_private_kei": [20, 36], "shallow": [20, 36], "update_with_kwarg": [20, 36], "_merg": [20, 36], "merg": [20, 21, 36], "recurs": [20, 36, 41], "second": [20, 21, 36, 67, 73], "preced": [20, 36, 73], "merge_al": [20, 36], "is_set": [20, 36], "param_nam": [20, 36], "still": [20, 36], "defaultconfig": [20, 36], "abstract": [20, 21, 36, 38, 39, 47, 54, 61, 65, 69, 71, 79, 85, 86], "inherit": [21, 36, 41, 59, 68, 69, 71, 72, 86], "pytorch": [21, 36, 38, 65], "brain": [21, 36], "analogi": [21, 36], "here": [21, 36, 38, 40, 47, 59], "reciev": [21, 34, 36, 54], "keypair": [21, 36, 37, 45], "synapse_histori": [21, 36], "histor": [21, 36, 38, 77], "fallback": [21, 36], "synchron": [21, 36, 38, 40], "streamingsynaps": [21, 36, 39, 59], "deseri": [21, 36, 37, 39, 41, 42, 54, 59], "run_async": [21, 36], "stream": [21, 36, 46, 59], "collat": [21, 36], "asyncgener": [21, 36], "bittenst": [21, 36], "target_axon": [21, 36], "call_stream": [21, 36], "chunk": [21, 36, 39, 59], "element": [21, 36, 38, 42, 65, 77, 84], "preprocess_synapse_for_request": [21, 36], "target_axon_info": [21, 36], "build": [21, 36, 40], "process_server_respons": [21, 36], "server_respons": [21, 36], "json_respons": [21, 36], "local_synaps": [21, 36], "close_sess": [21, 36], "close": [21, 36], "aiohttp": [21, 36], "session": [21, 36, 38], "aclose_sess": [21, 36], "aysnc": [21, 36], "ping": [21, 36], "howev": [21, 36, 38, 59], "abl": [21, 36], "safe": [21, 36, 41, 43, 45], "clientsess": [21, 36], "wai": [21, 36, 40, 41, 45, 68, 69, 71, 72, 86], "lazili": [21, 36], "benefit": [21, 36, 38], "absolut": [21, 36], "adher": [21, 36], "await": [21, 36, 39], "post": [21, 36], "durat": [21, 36, 40, 41], "proper": [21, 36, 38, 41, 47], "closur": [21, 36], "cleanup": [21, 36], "open": [21, 36, 79, 82], "buffer": [21, 36, 42], "leakag": [21, 36], "asyncio": [21, 36], "event": [21, 36, 39, 46, 58, 66, 90], "loop": [21, 36, 56], "feasibl": [21, 36], "finish": [21, 36, 43], "dendrite_inst": [21, 36], "counterpart": [21, 36], "automat": [21, 36, 38, 41, 92, 93], "abov": [21, 34, 36, 74, 79], "_get_endpoint_url": [21, 36], "request_nam": [21, 36], "full": [21, 36, 38], "differenti": [21, 36], "_handle_request_error": [21, 36], "interpret": [21, 23, 33, 34, 35, 36, 41], "common": [21, 28, 33, 35, 36, 74, 79], "caught": [21, 36], "_log_outgoing_request": [21, 36], "outgo": [21, 36, 56], "turn": [21, 36], "bittensor_debug": [21, 36], "_log_incoming_respons": [21, 36], "troubleshoot": [21, 36], "bridg": [21, 36], "sequenti": [21, 36], "off": [21, 36], "unifi": [21, 36], "dendrt": [21, 36], "individu": [21, 36, 40, 59, 92, 93], "wait": [21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 43, 56], "otherwis": [21, 36, 40, 41, 43, 74, 79], "larg": [21, 36, 79, 81], "transmit": [21, 36, 41], "arbitrari": [21, 36], "exhaust": [21, 36, 62], "silent": [21, 36], "ignor": [21, 36, 37, 54], "user_wallet_address": [21, 36], "__aenter__": [21, 36], "statement": [21, 36, 54, 73], "some_async_method": [21, 36], "__aexit__": [21, 36], "exc_typ": [21, 36, 54], "exc_valu": [21, 36, 54], "ti": [21, 36], "baseexcept": [21, 22, 36], "tracebacktyp": [21, 36], "stack": [21, 36, 54], "point": [21, 36, 38, 40, 61], "destructor": [21, 36], "fulli": [21, 36, 73], "unpredict": [21, 36], "del": [21, 36], "implicitli": [21, 36], "chainerror": [22, 36], "chainconnectionerror": [22, 36], "chaintransactionerror": [22, 36], "chainqueryerror": [22, 36], "stakeerror": [22, 33, 35, 36, 40], "unstakeerror": [22, 36], "identityerror": [22, 36], "nominationerror": [22, 36], "transfererror": [22, 36], "registrationerror": [22, 36], "notregisterederror": [22, 23, 33, 35, 36], "notdelegateerror": [22, 23, 33, 36], "try": [22, 36, 73], "keyfileerror": [22, 36, 37, 45], "thrown": [22, 36], "keyfil": [22, 36, 45, 46], "writabl": [22, 36, 37], "invalid": [22, 36, 42], "nominate_extrins": 23, "wait_for_fin": [23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40], "wait_for_inclus": [23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40], "delegate_extrins": 23, "delegate_ss58": [23, 36, 40], "unclud": [23, 27, 28, 29, 31, 32, 33, 34, 35], "we": [23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "did": [23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "inclus": [23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40], "undelegate_extrins": 23, "un": 23, "log_util": [24, 36, 46], "set_weight": [24, 36, 40, 46, 53, 58, 63, 87], "validatorlogg": 25, "style": [25, 78, 79], "print_response_t": 25, "batch_predict": 25, "stat": 25, "sort_col": 25, "task_repeat": 25, "tasks_per_serv": 25, "top": 25, "predict": 25, "probabl": [25, 78, 79], "batch": [25, 36, 40, 74, 77, 79], "prob": 25, "length": [25, 36, 41, 92, 93], "neuron_stats_column": 25, "print_synergy_t": 25, "syn_loss_diff": 25, "synergi": 25, "diff": [25, 92, 93], "matrix": [25, 36, 38], "pairwis": 25, "reduct": 25, "diagon": 25, "print_stats_t": 25, "titl": 25, "caption": 25, "mark_uid": 25, "print_synapse_t": 25, "shaplei": 25, "print_weights_t": 25, "neuron_stat": 25, "metagraph_n": 25, "sample_uid": 25, "sample_weight": 25, "include_uid": 25, "num_row": 25, "minimum": [25, 36, 40, 65, 77, 84], "inculd": 25, "print_console_validator_identifi": 25, "print_console_metagraph_statu": 25, "current_block": 25, "start_block": 25, "print_console_query_summari": 25, "blocks_per_epoch": 25, "epoch_step": 25, "epoch": [25, 56], "responsive_uid": 25, "queried_uid": 25, "step_tim": 25, "epoch_responsive_uid": 25, "epoch_queried_uid": 25, "print_console_subtensor_weight": 25, "epoch_start_tim": 25, "validatorprometheu": 25, "promethei": 25, "log_run_info": 25, "log_epoch_start": 25, "batch_siz": 25, "sequence_length": 25, "validation_len": 25, "epochs_until_reset": 25, "log_step": 25, "log_epoch_end": 25, "register_subnetwork_extrins": 26, "set_hyperparameter_extrins": 26, "prometheus_extrins": 27, "subscrib": [27, 31, 36, 45], "substensor": [27, 31], "host": [27, 31], "122": [27, 31], "9221": [27, 31], "register_extrins": 28, "max_allowed_attempt": [28, 36, 40], "output_in_plac": [28, 36, 40], "256": [28, 36, 40, 41], "log_verbos": [28, 36, 40], "burned_register_extrins": 28, "maxsuccessexcept": 28, "class": [28, 52], "maxattemptsexcept": 28, "run_faucet_extrins": 28, "net": 28, "swap_hotkey_extrins": 28, "new_wallet": [28, 36, 40], "root_register_extrins": 29, "set_root_weights_extrins": 29, "version_kei": [29, 32, 36, 40], "subent": [29, 32], "floattensor": [29, 32, 36, 38, 40, 61, 65, 68, 69, 70, 71, 72, 74, 77, 79, 80, 84, 85], "longtensor": [29, 32, 36, 40, 64], "register_senate_extrins": 30, "leave_senate_extrins": 30, "vote_senate_extrins": 30, "proposal_idx": [30, 36, 40], "serve_extrins": 31, "placehold": [31, 36, 40], "serve_axon_extrins": 31, "set_weights_extrins": 32, "uint64": 32, "add_stake_extrins": 33, "add_stake_multiple_extrins": 33, "__do_add_stake_singl": 33, "transfer_extrins": 34, "keep_al": 34, "ed25519": 34, "aliv": 34, "existenti": [34, 36, 40], "deposit": [34, 36, 40], "__do_remove_stake_singl": 35, "unstake_extrins": 35, "unstake_multiple_extrins": 35, "extrins": [36, 40, 46], "btlog": [36, 46], "chain_data": [36, 40, 46], "threadpool": [36, 46], "__version__": [36, 58, 66], "version_split": [36, 58, 66], "__version_as_int__": [36, 40], "__new_signature_version__": 36, "360": 36, "__console__": 36, "__use_console__": 36, "turn_console_off": 36, "turn_console_on": 36, "__blocktime__": 36, "__pipaddress__": 36, "pypi": 36, "org": 36, "__delegates_details_url__": 36, "raw": [36, 38, 41, 42], "githubusercont": 36, "com": [36, 43], "opentensor": 36, "__ss58_format__": 36, "__ss58_address_length__": 36, "48": 36, "__networks__": 36, "archiv": [36, 38, 40], "__finney_entrypoint__": 36, "wss": 36, "entrypoint": 36, "ai": [36, 38, 40], "443": 36, "__finney_test_entrypoint__": 36, "__archive_entrypoint__": 36, "__bellagene_entrypoint__": 36, "parachain": 36, "__local_entrypoint__": 36, "w": [36, 38, 40, 74, 79], "127": [36, 41], "9944": 36, "__tao_symbol__": 36, "__rao_symbol__": 36, "__network_explorer_map__": 36, "__type_registry__": 36, "modul": [36, 94], "nacl_salt": [36, 37], "x13q": [36, 37], "x83": [36, 37], "xdf": [36, 37], "xf1z": [36, 37], "xbc": [36, 37], "x9c": [36, 37], "x90": [36, 37], "xb5q": [36, 37], "x879": [36, 37], "xe9": [36, 37], "xb1": [36, 37], "serialized_keypair_to_keyfile_data": [36, 37], "serial": [36, 37, 41, 42], "deserialize_keypair_from_keyfile_data": [36, 37], "keyfile_data": [36, 37], "cannot": [36, 37, 41], "validate_password": [36, 37], "polici": [36, 37], "ask_password_to_encrypt": [36, 37], "rtype": [36, 37, 40, 45], "keyfile_data_is_encrypted_nacl": [36, 37], "nacl": [36, 37], "ansibl": [36, 37], "is_nacl": [36, 37], "keyfile_data_is_encrypted_ans": [36, 37], "is_ans": [36, 37], "keyfile_data_is_encrypted_legaci": [36, 37], "is_legaci": [36, 37], "keyfile_data_is_encrypt": [36, 37], "is_encrypt": [36, 37], "keyfile_data_encryption_method": [36, 37], "encryption_method": [36, 37], "legacy_encrypt_keyfile_data": [36, 37], "encrypt_keyfile_data": [36, 37], "vault": [36, 37], "ask": [36, 37, 73], "encrypted_data": [36, 37], "get_coldkey_password_from_environ": [36, 37], "coldkey_nam": [36, 37], "decrypt_keyfile_data": [36, 37], "decrypted_data": [36, 37], "incorrect": [36, 37, 45, 73], "substrat": [36, 37, 40], "store": [36, 37, 38, 41, 45, 59], "set_keypair": [36, 37], "write": [36, 37], "forc": [36, 37, 74, 79], "get_keypair": [36, 37], "make_dir": [36, 37], "exists_on_devic": [36, 37], "on_devic": [36, 37], "is_read": [36, 37], "is_writ": [36, 37], "_may_overwrit": [36, 37], "okai": [36, 37], "may_overwrit": [36, 37], "check_and_update_encrypt": [36, 37], "print_result": [36, 37], "skip": [36, 37], "most": [36, 37, 38, 40, 74, 79], "els": [36, 37], "_read_keyfile_data_from_fil": [36, 37], "_write_keyfile_data_to_fil": [36, 37], "permiss": [36, 37], "mockkeyfil": [36, 37], "mock": [36, 37, 73], "simul": [36, 37, 40], "treat": [36, 37], "noth": [36, 37], "although": [36, 37], "alwai": [36, 37, 73, 92, 93], "written": [36, 37, 73], "valueerror": [36, 37, 54], "anyth": [36, 37], "display_mnemonic_msg": [36, 45], "key_typ": [36, 45], "primari": [36, 41, 45, 56], "contrast": [36, 45], "safer": [36, 45], "regular": [36, 45], "hotkey_str": [36, 45], "_hotkei": [36, 45], "_coldkei": [36, 45], "_coldkeypub": [36, 45], "create_if_non_exist": [36, 45], "get_coldkei": [36, 45], "get_hotkei": [36, 45], "get_coldkeypub": [36, 45], "set_coldkei": [36, 45], "set_hotkei": [36, 45], "set_coldkeypub": [36, 45], "hotkey_fil": [36, 45], "coldkey_fil": [36, 45], "coldkeypub_fil": [36, 45], "regenerate_coldkei": [36, 45], "regenerate_hotkei": [36, 45], "regenerate_coldkeypub": [36, 45], "assist": [36, 40, 45, 59], "cryptokeyerror": [36, 45], "incorrec": [36, 45], "txt": [36, 45], "colkeypub": [36, 45], "coldkey_use_password": [36, 45], "hotkey_use_password": [36, 45], "create_coldkey_from_uri": [36, 45], "uri": [36, 45], "suppress": [36, 45], "suri": [36, 45], "alic": [36, 45], "bob": [36, 45], "Will": [36, 45], "newli": [36, 45], "create_hotkey_from_uri": [36, 45], "save": [36, 38, 45], "disk": [36, 38, 45], "create_new_coldkei": [36, 45], "create_new_hotkei": [36, 45], "public_kei": [36, 45], "re": [36, 41, 45, 74, 77, 79, 84, 85], "space": [36, 45, 73], "restor": [36, 38, 45], "json_data": [36, 45], "passphras": [36, 45], "_mock": [36, 40], "learn": [36, 38, 40, 41, 65], "inter": [36, 38, 40], "ledger": [36, 38, 40], "peer": [36, 38, 40, 57], "themselv": [36, 40], "gatewai": [36, 40], "fair": [36, 40], "major": [36, 38, 40], "8203": [36, 40], "oaicit": [36, 40], "introduc": [36, 40, 47, 54], "specul": [36, 38, 40], "accumul": [36, 38, 39, 40, 59], "market": [36, 40], "incentiv": [36, 38, 40], "judici": [36, 40], "chain_endpoint": [36, 40], "finney_subtensor": [36, 40], "collabor": [36, 38, 40], "promis": [36, 40], "other_neuron_ss58": [36, 40], "bond_amount": [36, 40], "instrument": [36, 38, 40], "envis": [36, 40], "principl": [36, 38, 40, 73], "describ": [36, 40, 47], "neurip": [36, 38, 40], "paper": [36, 38, 40], "get_proposal_vote_data": [36, 40], "determine_chain_endpoint_and_network": [36, 40], "300": [36, 38, 40], "setup_config": [36, 40], "until": [36, 40, 43, 56], "reduc": [36, 38, 40], "reflect": [36, 38, 40], "adjust": [36, 40, 47], "percept": [36, 40], "81": [36, 40], "_do_set_weight": [36, 40], "submit": [36, 40, 43], "retri": [36, 40], "observ": [36, 40], "growth": [36, 40], "swap_hotkei": [36, 40], "old": [36, 40, 74, 79], "run_faucet": [36, 40], "newcom": [36, 40], "small": [36, 40], "onboard": [36, 40], "journei": [36, 40], "burned_regist": [36, 40], "deflationari": [36, 40], "circul": [36, 40], "conserv": [36, 40], "_do_pow_regist": [36, 40], "pow_result": [36, 40], "powsolut": [36, 40], "_do_burned_regist": [36, 40], "_do_swap_hotkei": [36, 40], "move": [36, 40, 74, 77, 79, 84, 85], "fluid": [36, 40], "movement": [36, 40], "econom": [36, 40], "get_transfer_fe": [36, 40], "estim": [36, 40], "rao": [36, 40], "_do_transf": [36, 40], "transfer_bal": [36, 40], "block_hash": [36, 40], "wait_for_": [36, 40], "get_existential_deposit": [36, 40], "below": [36, 40, 54], "reap": [36, 40], "storag": [36, 40], "prolifer": [36, 40], "dust": [36, 40], "segment": [36, 40], "expans": [36, 40], "diversif": [36, 40], "set_hyperparamet": [36, 40], "characterist": [36, 40], "fine": [36, 40], "tune": [36, 40], "announc": [36, 40], "extens": [36, 40, 59], "serve_axon": [36, 40], "_do_serve_axon": [36, 40], "call_param": [36, 40], "axonservecallparam": [36, 40, 44], "serve_prometheu": [36, 40], "_do_serve_prometheu": [36, 40], "prometheusservecallparam": [36, 40, 44], "_do_associate_ip": [36, 40], "ip_info_list": [36, 40], "add_stak": [36, 40], "add_stake_multipl": [36, 40], "bulk": [36, 40], "_do_stak": [36, 40], "unstake_multipl": [36, 40], "withdrawn": [36, 40], "accrual": [36, 40], "_do_unstak": [36, 40], "register_sen": [36, 40], "leave_sen": [36, 40], "vote_sen": [36, 40], "is_senate_memb": [36, 40], "overse": [36, 40], "approv": [36, 40], "get_vote_data": [36, 40], "get_senate_memb": [36, 40], "grasp": [36, 40], "author": [36, 38, 40, 73, 92, 93], "get_proposal_call_data": [36, 40], "analyz": [36, 38, 40, 73], "get_proposal_hash": [36, 40], "review": [36, 40], "get_propos": [36, 40], "thorough": [36, 40], "recept": [36, 40], "holist": [36, 40], "root_regist": [36, 40], "influenti": [36, 40], "signifi": [36, 38, 40], "commit": [36, 40], "_do_root_regist": [36, 40], "root_set_weight": [36, 40], "query_ident": [36, 40], "update_ident": [36, 40], "currenc": [36, 40], "query_subtensor": [36, 40], "valuabl": [36, 38, 40, 41], "query_map_subtensor": [36, 40], "querymapresult": [36, 40], "relationship": [36, 38, 40, 73], "query_const": [36, 40], "module_nam": [36, 40], "constant_nam": [36, 40], "constant": [36, 40, 73], "inflat": [36, 40], "deeper": [36, 40], "query_modul": [36, 40], "divers": [36, 40, 46, 58, 66, 75, 79], "versatil": [36, 40], "query_map": [36, 40], "state_cal": [36, 40], "query_runtime_api": [36, 40], "runtime_api": [36, 40], "scale": [36, 40, 73, 74, 77, 79, 84, 85], "paramwithtyp": [36, 40], "_encode_param": [36, 40], "call_definit": [36, 40], "global": [36, 40, 56], "model": [36, 38, 39, 40, 41, 47, 59, 65, 74, 77, 78, 79, 81, 84, 85], "emmit": [36, 40], "mathemat": [36, 40], "economi": [36, 40], "formula": [36, 40, 73], "staking_target": [36, 40], "staking_actu": [36, 40], "inflation_target": [36, 40], "goal": [36, 40], "\u03ba": [36, 40], "share": [36, 38, 40], "deriv": [36, 40], "softmax": [36, 40], "\u03ba_i": [36, 40], "exp": [36, 40], "w_i": [36, 40], "\u03c3": [36, 40], "w_j": [36, 40], "denomin": [36, 40], "exponenti": [36, 40], "probabilist": [36, 40], "rel": [36, 40, 73], "challeng": [36, 40], "suppli": [36, 38, 40], "immunityperiod": [36, 40], "penalti": [36, 40, 46, 58, 61, 66], "restrict": [36, 40], "grace": [36, 40, 56], "punit": [36, 40], "validator_batch_s": [36, 40], "validatorbatchs": [36, 40], "hyper": [36, 40], "validator_prune_len": [36, 40], "validatorprunelen": [36, 40], "validator_logits_diverg": [36, 40], "validatorlogitsdiverg": [36, 40], "validator_sequence_length": [36, 40], "validatorsequencelength": [36, 40], "validator_epochs_per_reset": [36, 40], "validatorepochsperreset": [36, 40], "validator_epoch_length": [36, 40], "validatorepochlen": [36, 40], "validator_exclude_quantil": [36, 40], "maxallowedvalid": [36, 40], "minallowedweight": [36, 40], "maxweightslimit": [36, 40], "scalinglawpow": [36, 40], "synergy_scaling_law_pow": [36, 40], "synergyscalinglawpow": [36, 40], "subnetworkn": [36, 40], "maxalloweduid": [36, 40], "blockssincelaststep": [36, 40], "get_total_stake_for_hotkei": [36, 40], "get_total_stake_for_coldkei": [36, 40], "get_stake_for_coldkey_and_hotkei": [36, 40], "get_stak": [36, 40], "does_hotkey_exist": [36, 40], "get_hotkey_own": [36, 40], "get_axon_info": [36, 40], "get_prometheus_info": [36, 40], "total_issu": [36, 40], "mine": [36, 40], "inflationari": [36, 40], "trend": [36, 40], "metric": [36, 38, 40, 41], "factor": [36, 40], "serving_rate_limit": [36, 40], "limit": [36, 40], "frame": [36, 40], "overus": [36, 40], "tx_rate_limit": [36, 40], "stabil": [36, 38, 40], "congest": [36, 40], "subnet_exist": [36, 40], "get_all_subnet_netuid": [36, 40], "get_total_subnet": [36, 40], "extent": [36, 40], "get_subnet_mod": [36, 40], "get_subnet_connection_requir": [36, 40], "netuid_0": [36, 40], "netuid_1": [36, 40], "get_emission_value_by_subnet": [36, 40], "emit": [36, 40], "look": [36, 40, 92, 93], "complianc": [36, 40], "get_subnet": [36, 40], "get_all_subnets_info": [36, 40], "gain": [36, 40, 59], "get_subnet_info": [36, 40], "stakehold": [36, 40], "get_subnet_hyperparamet": [36, 40], "comprehend": [36, 40], "get_subnet_own": [36, 40], "is_hotkey_deleg": [36, 40], "Being": [36, 40], "get_delegate_tak": [36, 40], "get_nominators_for_hotkei": [36, 40], "get_delegate_by_hotkei": [36, 40], "get_deleg": [36, 40], "popul": [36, 40, 52], "holder": [36, 40], "get_stake_info_for_coldkei": [36, 40], "coldkey_ss58_list": [36, 40], "pattern": [36, 40, 73], "simultan": [36, 40], "perspect": [36, 40], "strategi": [36, 40], "is_hotkey_registered_ani": [36, 40], "is_hotkey_registered_on_subnet": [36, 40], "area": [36, 40], "is_hotkey_regist": [36, 40], "aid": [36, 40, 41], "elig": [36, 40], "get_uid_for_hotkey_on_subnet": [36, 40], "get_all_uids_for_hotkei": [36, 40], "get_netuids_for_hotkei": [36, 40], "illustr": [36, 40], "get_neuron_for_pubkey_and_subnet": [36, 40], "get_all_neurons_for_pubkei": [36, 40], "neuron_has_validator_permit": [36, 40], "regard": [36, 40, 73], "neuron_for_wallet": [36, 40], "neuron_for_uid": [36, 40], "neuron_for_uid_lit": [36, 40], "lightweight": [36, 40], "lite": [36, 38, 40], "simplifi": [36, 38, 40, 73], "analys": [36, 38, 40], "neurons_lit": [36, 40], "streamlin": [36, 40], "sync": [36, 38, 40], "interconnect": [36, 40], "motiv": [36, 40], "driver": [36, 40], "perceiv": [36, 40], "approach": [36, 40], "measur": [36, 38, 40], "recogn": [36, 40], "nich": [36, 40], "associated_validator_ip_info": [36, 40], "identif": [36, 38, 40, 41], "term": [36, 40], "viabil": [36, 40], "_do_deleg": [36, 40], "_do_undeleg": [36, 40], "_do_nomin": [36, 40], "get_bal": [36, 40], "get_current_block": [36, 40], "recent": [36, 40, 54], "sensit": [36, 38, 40, 41], "refer": [36, 38, 40, 52, 73, 74, 78, 79, 94], "landscap": [36, 40], "get_block_hash": [36, 40], "block_id": [36, 40], "immut": [36, 40, 59], "technologi": [36, 40], "consist": [36, 38, 40, 41, 59], "all_command": 36, "neural": [36, 38], "graph": [36, 38, 54], "backbon": [36, 38], "captur": [36, 38, 59, 73], "interconnected": [36, 38], "live": [36, 38], "constantli": [36, 38], "akin": [36, 38], "yuma": [36, 38], "outlin": [36, 38, 73], "distinguish": [36, 38], "cryptocurr": [36, 38], "mainli": [36, 38], "everyth": [36, 38], "propag": [36, 38], "embodi": [36, 38], "neuron_rank": [36, 38], "r": [36, 38], "neuron_incent": [36, 38], "deepcopi": [36, 38], "concept": [36, 38, 73], "greater": [36, 38], "emploi": [36, 38], "accru": [36, 38], "often": [36, 38, 73], "much": [36, 38, 56, 73], "agre": [36, 38], "judgment": [36, 38], "agreement": [36, 38], "achiev": [36, 38], "reput": [36, 38], "infer": [36, 38], "suggest": [36, 38], "stronger": [36, 38], "tv": [36, 38], "encourag": [36, 38], "benefici": [36, 38], "belief": [36, 38], "proport": [36, 38], "w_": [36, 38], "ij": [36, 38], "th": [36, 38], "row": [36, 38], "impli": [36, 38], "j": [36, 38, 76, 79], "easier": [36, 38, 59], "quickli": [36, 38], "succinctli": [36, 38], "concis": [36, 38, 73], "500": [36, 38], "simpli": [36, 38, 41, 59], "metagraph_repr": [36, 38], "mirror": [36, 38], "well": [36, 38, 73], "examin": [36, 38, 73], "quicker": [36, 38], "overhead": [36, 38], "12345": [36, 38], "beyond": [36, 38, 59], "light": [36, 38, 73], "_initialize_subtensor": [36, 38], "_assign_neuron": [36, 38], "_set_metagraph_attribut": [36, 38], "_create_tensor": [36, 38], "dtype": [36, 38, 42], "could": [36, 38, 59, 73], "float32": [36, 38], "int64": [36, 38], "neuron_stak": [36, 38], "_set_weights_and_bond": [36, 38], "_process_weights_or_bond": [36, 38], "transform": [36, 38, 41, 65, 77, 79, 84], "unstructur": [36, 38], "raw_weights_data": [36, 38], "_process_root_weight": [36, 38], "root_weight": [36, 38], "raw_root_weights_data": [36, 38], "persist": [36, 38], "later": [36, 38, 54], "reload": [36, 38], "load_from_path": [36, 38], "dir_path": [36, 38], "restart": [36, 38], "exact": [36, 38], "accur": [36, 38, 41, 73], "reconstitut": [36, 38], "prioritythreadpoolexecutor": [36, 43], "maxsiz": [36, 43, 67], "thread_name_prefix": [36, 43], "initarg": [36, 43], "_base": [36, 43], "is_empti": [36, 43], "_counter": [36, 43], "fn": [36, 43], "schedul": [36, 43], "_adjust_thread_count": [36, 43], "_initializer_fail": [36, 43], "clean": [36, 43], "reclaim": [36, 43], "cancel_futur": [36, 43], "cancel": [36, 43], "pend": [36, 43], "get_siz": [36, 41], "obj": [36, 41, 65], "seen": [36, 41], "find": [36, 41, 73], "travers": [36, 41], "everi": [36, 41], "cast_int": [36, 41], "integ": [36, 41], "cast_float": [36, 41], "terminalinfo": [36, 41], "pydant": [36, 39, 41, 42, 59], "basemodel": [36, 39, 41, 42], "carrier": [36, 41], "enforc": [36, 41, 59], "rather": [36, 41, 92, 93], "status_cod": [36, 41], "status_messag": [36, 41], "process_tim": [36, 41], "taken": [36, 41], "optim": [36, 41, 47, 65, 78, 79], "rout": [36, 41], "monoton": [36, 41], "uuid": [36, 41], "axon_hotkei": [36, 41], "dendrite_hotkei": [36, 41], "terminal_info": [36, 41], "200": [36, 41], "198": [36, 41], "123": [36, 41], "9282": [36, 41], "111": [36, 41], "111111": [36, 41], "5ecbd69c": [36, 41], "1cec": [36, 41], "11ee": [36, 41], "b0dc": [36, 41], "e29ce36fec1a": [36, 41], "5enjdgnqqwnul2hcadxeetn2oqtxzw6bmbe936kfy2pfz1j1": [36, 41], "0x0813029319030129u4120u10841824y0182u091u230912u": [36, 41], "ip_address": [36, 41], "processing_dur": [36, 41], "indispens": [36, 41], "validate_assign": [36, 39, 41, 42, 59], "_extract_status_cod": [36, 41], "_extract_process_tim": [36, 41], "_extract_port": [36, 41], "_extract_vers": [36, 41], "_extract_nonc": [36, 41], "schema": [36, 41], "ml": [36, 41], "compress": [36, 41], "sanit": [36, 41, 73], "encompass": [36, 41], "is_success": [36, 41], "is_failur": [36, 41], "is_timeout": [36, 41], "conveni": [36, 41], "think": [36, 41], "glorifi": [36, 41], "latenc": [36, 41], "total_s": [36, 41, 59], "header_s": [36, 41, 59], "overload": [36, 41], "bandwidth": [36, 41], "constrain": [36, 41], "computed_body_hash": [36, 41], "required_hash_field": [36, 41, 59], "detect": [36, 41, 73], "convers": [36, 41, 47, 59], "improv": [36, 41], "mysynaps": [36, 41], "Not": [36, 41], "dummy_input": [36, 41], "becaus": [36, 41, 73], "synapse_dict": [36, 41], "to_head": [36, 41], "from_head": [36, 41], "deserialized_synaps": [36, 41], "succeed": [36, 41], "408": [36, 41], "subclass": [36, 39, 41, 47, 54, 59, 92, 93], "__setattr__": [36, 41], "get_total_s": [36, 41], "body_hash": [36, 41], "sha3": [36, 41], "parse_headers_to_input": [36, 41], "would": [36, 41], "is_blacklist": [36, 41], "403": [36, 41], "forbidden": [36, 41], "failed_verif": [36, 41], "401": [36, 41], "required_fields_hash": [36, 41], "concaten": [36, 41, 59], "produc": [36, 41], "examplerout": [36, 41], "hash_valu": [36, 41], "_extract_timeout": [36, 41], "_extract_total_s": [36, 41], "_extract_header_s": [36, 41], "overridden": [36, 41, 47, 54, 59], "superclass": [36, 41], "modif": [36, 41], "customsynaps": [36, 41], "additional_data": [36, 41], "base64": [36, 41], "b64decod": [36, 41], "utf": [36, 41, 59], "serialized_data": [36, 41], "sgvsbg8gv29ybgq": [36, 41], "world": [36, 41], "custom_synaps": [36, 41], "parse_raw": [36, 41], "set_name_typ": [36, 41], "lifespan": [36, 41], "preserv": [36, 41], "transport": [36, 41], "examplesynaps": [36, 41], "categori": [36, 41], "input_obj": [36, 41], "received_head": [36, 41], "bt_header_axon_address": [36, 41], "bt_header_dendrite_port": [36, 41], "8080": [36, 41], "prior": [36, 41], "replic": [36, 41], "btstreamingresponsemodel": [36, 39], "streamer": [36, 39], "btstreamingrespons": [36, 39], "conform": [36, 39], "token_stream": [36, 39], "asgi": [36, 39], "abc": [36, 39, 54, 61, 62, 65, 68, 69, 71, 72, 86], "streamingrespons": [36, 39, 59], "instanti": [36, 39, 92, 93], "create_streaming_respons": [36, 39], "stream_respons": [36, 39], "__call__": [36, 39], "scope": [36, 39], "process_streaming_respons": [36, 39, 59], "extract_response_json": [36, 39, 59], "torch_dtyp": [36, 42], "cast_dtyp": [36, 42], "cast_shap": [36, 42], "_extract_dtyp": [36, 42], "_extract_shap": [36, 42], "tolist": [36, 42], "numpi": [36, 42], "ndarrai": [36, 42], "get_save_dir": 38, "latest_block_path": 38, "threadpoolexecutor": 43, "__author__": 43, "brian": 43, "quinlan": 43, "sweetapp": 43, "_threads_queu": 43, "_shutdown": 43, "_workitem": 43, "null_entri": 43, "_worker": 43, "executor_refer": 43, "work_queu": 43, "brokenthreadpool": 43, "brokenexecutor": 43, "page": 46, "auto": 46, "bittensor": [46, 47, 50, 54, 56, 57, 59, 60, 65, 69, 71, 79, 85], "basemin": [46, 47, 58], "content_match": [46, 58, 66, 69], "keyword_match": [46, 58, 66, 69, 75, 79], "task_valid": [46, 58, 66, 69, 75, 79], "dahoa": [46, 58, 66, 75, 79], "dpo": [46, 58, 66, 75, 79], "nsfw": [46, 58, 66, 75, 79], "open_assist": [46, 58, 66, 79], "reciproc": [46, 58, 66, 75, 79], "dataset": [46, 58, 66], "gate": [46, 58, 66], "test_reward_ev": [46, 88, 89], "test_task_valid": [46, 88, 89], "test_dataset": [46, 88], "test_ev": [46, 88], "sphinx": 46, "autoapi": 46, "openaimin": 47, "api_kei": 47, "openai": 47, "pertain": [47, 59, 73], "gpt": [47, 65, 76, 79, 83], "temperatur": 47, "easili": 47, "combin": 47, "max_token": 47, "openai_api_kei": 47, "is_prompt_in_cach": 51, "default_blacklist": 51, "func": [51, 55], "get_config": 52, "dictat": 54, "_prompt": 54, "around": 54, "pre": [54, 65], "cach": 54, "reprocess": 54, "repli": 54, "depend": 54, "custommin": 54, "life": [54, 59], "contruct": 54, "wast": 54, "onc": 54, "lower": 54, "knowledg": [54, 56], "run_in_background_thread": 54, "stop_run_thread": 54, "__enter__": 54, "__exit__": 54, "caus": [54, 73], "record_request_timestamp": 55, "default_prior": 55, "regularli": 56, "keyboard": 56, "interrupt": 56, "unforeseen": 56, "keyboardinterrupt": 56, "manual": 56, "diagnosi": [56, 57], "wandb_on": 57, "vector": 57, "bias": 57, "wandb": 57, "__spec_version__": [58, 66], "three": 59, "mutabl": 59, "progress": 59, "inner": 59, "hi": [59, 73], "model_prompt": 59, "llm": 59, "what": [59, 73], "demonstr": 59, "give": [59, 73], "streamprompt": 59, "sequenc": 59, "As": 59, "agent": 59, "throughout": 59, "lifetim": 59, "product": 59, "thu": 59, "heart": 59, "consum": 59, "split": 59, "newlin": 59, "charact": [59, 61, 73], "coher": 59, "pertin": 59, "consumpt": 59, "ultim": 59, "glean": 59, "taskcriterion": [61, 86], "criterion": 61, "compose_text": 61, "textlengthunitenum": 61, "sentenc": [61, 65, 77, 79, 84], "paragraph": 61, "matchlengthcriteria": 61, "target_length": 61, "_count_sent": 61, "_get_completion_length": 61, "contentmatchtypeenum": 61, "starts_with": 61, "ends_with": 61, "matchcontentcriteria": 61, "default_text": 61, "match_typ": 61, "words_arrai": 61, "contentmatchtyp": 61, "sampled_word": 61, "negate_match": 61, "__post_init__": 61, "_get_regex_pattern": 61, "simpleresponselayoutcriteria": 61, "bullet": 61, "layoutmatchtypeenum": 61, "unordered_list": 61, "unord": 61, "numbered_list": 61, "matchlayoutcriteria": 61, "layout_typ": 61, "__next__": 62, "stopiter": 62, "mockdataset": 62, "eventschema": 63, "completion_tim": 63, "completion_status_messag": 63, "completion_status_cod": 63, "task_typ": [63, 86], "gating_loss": 63, "step_length": 63, "best": [63, 73], "dahoas_reward_model": [63, 75, 79], "blacklist_filt": [63, 75, 79], "blacklist_filter_matched_ngram": 63, "blacklist_filter_significance_scor": 63, "nsfw_filter": [63, 75, 79], "reciprocate_reward_model": [63, 75, 79], "diversity_reward_model": [63, 75, 79], "diversity_reward_model_histor": 63, "diversity_reward_model_batch": 63, "dpo_reward_model": [63, 75, 79], "rlhf_reward_model": [63, 75, 79], "prompt_reward_model": [63, 75, 79], "relevance_filt": [63, 75, 79], "dahoas_reward_model_norm": 63, "nsfw_filter_norm": 63, "nsfw_filter_scor": 63, "reciprocate_reward_model_norm": 63, "diversity_reward_model_norm": 63, "dpo_reward_model_norm": 63, "rlhf_reward_model_norm": 63, "prompt_reward_model_norm": 63, "relevance_filter_norm": 63, "relevance_filter_bert_scor": 63, "relevance_filter_mpnet_scor": 63, "task_validation_penalty_raw": 63, "task_validation_penalty_adjust": 63, "task_validation_penalty_appli": 63, "keyword_match_penalty_raw": 63, "keyword_match_penalty_adjust": 63, "keyword_match_penalty_appli": 63, "sentence_match_penalty_raw": 63, "sentence_match_penalty_adjust": 63, "sentence_match_penalty_appli": 63, "from_dict": 63, "event_dict": 63, "disable_log_reward": 63, "get_random_uid": 64, "random": 64, "sampl": 64, "randomli": 64, "run_step": 64, "basegatingmodel": 65, "model_nam": [65, 76, 79], "train": 65, "languag": 65, "eleutherai": [65, 76, 79], "neo": 65, "125m": 65, "num_uid": 65, "4096": 65, "learning_r": 65, "momentum": 65, "resync": 65, "previous_metagraph": 65, "gatingmodel": 65, "squar": 65, "network_s": 65, "sentenceembedgatingmodel": 65, "mean_pool": [65, 77, 84], "model_output": [65, 77, 84], "attention_mask": [65, 76, 77, 79, 84], "embed": [65, 77, 79, 84], "attent": [65, 73, 77, 84], "mask": [65, 77, 84], "input_mask_expand": [65, 77, 84], "wise": [65, 77, 84], "divid": [65, 77, 84], "clamp": [65, 77, 84], "1e": [65, 77, 84], "ttl_cach": 67, "128": 67, "ttl": 67, "_ttl_hash_gen": 67, "ttl_get_block": 67, "contentmatchpenaltymodel": [68, 69], "max_penalti": [68, 69, 71, 72], "basepenaltymodel": [68, 69, 70, 71, 72], "calculate_penalti": [68, 69, 70, 71, 72], "apply_penalti": [69, 71], "penaltymodeltyp": [69, 71], "task_validation_penalti": [69, 71], "keyword_match_penalti": [69, 71, 75, 79], "sentence_match_penalti": [69, 71], "taskvalidationpenaltymodel": [69, 72], "keywordmatchpenaltymodel": [69, 70], "check_exploits_keyword": [69, 70], "baseprompt": 73, "templat": 73, "search": 73, "regex": 73, "matches_templ": 73, "input_text": 73, "unformat": 73, "scoringprompt": 73, "extract_scor": 73, "mock_respons": 73, "followup": [73, 91], "mockdendritepool": 73, "augmentprompt": 73, "followupprompt": 73, "question": [73, 91], "answerprompt": 73, "answer": [73, 91], "firewallprompt": 73, "jailbreak": 73, "inject": 73, "firewal": 73, "find_unique_tag": 73, "substr": 73, "followup_request_templ": 73, "augment_scoring_templ": 73, "multilin": 73, "succinct": 73, "qualiti": 73, "tag": 73, "irrelev": 73, "perfectli": 73, "good": 73, "explan": 73, "sole": 73, "disregard": 73, "few": 73, "shot": 73, "thought": 73, "coffe": 73, "brew": 73, "drink": 73, "roast": 73, "bean": 73, "berri": 73, "coffea": 73, "speci": 73, "tea": 73, "beverag": 73, "steep": 73, "boil": 73, "water": 73, "gordon": 73, "ramsai": 73, "british": 73, "chef": 73, "restaurateur": 73, "writer": 73, "televis": 73, "person": 73, "he": 73, "blunt": 73, "fieri": 73, "temper": 73, "expertis": 73, "french": 73, "italian": 73, "cuisin": 73, "skill": 73, "culinari": 73, "tradit": 73, "highli": 73, "mention": 73, "mar": 73, "fourth": 73, "planet": 73, "sun": 73, "smallest": 73, "solar": 73, "mercuri": 73, "reddish": 73, "appear": 73, "colour": 73, "variat": 73, "appl": 73, "chlorophyl": 73, "gatsbi": 73, "1925": 73, "novel": 73, "american": 73, "f": 73, "scott": 73, "fitzgerald": 73, "explor": 73, "theme": 73, "wealth": 73, "love": 73, "dream": 73, "narr": 73, "followup_scoring_templ": 73, "deserv": 73, "low": 73, "moreov": 73, "focu": 73, "why": 73, "portrai": 73, "answer_scoring_templ": 73, "extran": 73, "intermedi": 73, "incomplet": 73, "unnecessari": 73, "ambigu": 73, "Be": 73, "presid": 73, "georg": 73, "washington": 73, "capit": 73, "franc": 73, "rome": 73, "pari": 73, "There": 73, "50": 73, "But": 73, "don": [73, 90], "forget": 73, "territori": 73, "too": 73, "slightli": 73, "less": 73, "explain": 73, "einstein": 73, "theori": 73, "speed": 73, "matter": 73, "overli": 73, "equival": 73, "energi": 73, "mass": 73, "graviti": 73, "chemic": 73, "discourag": 73, "firewall_templ": 73, "Such": 73, "swai": 73, "ve": 73, "briefli": 73, "justifi": 73, "subtl": 73, "overtli": 73, "harm": 73, "regardless": 73, "subtleti": 73, "overt": 73, "pai": 73, "delimit": 73, "upcom": 73, "section": [73, 94], "followup_prompt": 73, "base_text": [73, 86], "answer_prompt": 73, "augment_request_templ": 73, "augment_prompt": 73, "blacklistrewardev": [74, 79], "baserewardev": [74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "matched_ngram": 74, "significance_scor": 74, "boundari": [74, 79], "n_min": [74, 79], "n_max": [74, 79], "word_limit": [74, 79], "2000": [74, 79], "partial_ratio_boundari": [74, 79], "95": [74, 79], "half_lif": [74, 79], "20000": [74, 79], "memory_lim": [74, 79], "1000000": [74, 79], "frequency_multipli": [74, 79], "baserewardmodel": [74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "gram": [74, 79], "counter": [74, 79], "extract_ngram": [74, 79], "_add_ngram": [74, 79], "ngram": [74, 79], "prune": [74, 79], "lossi": [74, 79], "ifi": [74, 79], "uzh": [74, 79], "ch": [74, 79], "dbtg": [74, 79], "sdbs13": [74, 79], "t01": [74, 79], "pdf": [74, 79], "smaller": [74, 79], "bucket": [74, 79], "reset": [74, 79], "calculate_signific": [74, 79], "get_signific": [74, 79], "recalcul": [74, 79], "most_common": [74, 79], "most_signific": [74, 79], "force_upd": [74, 79], "set_counter_to_half": [74, 79], "half": [74, 79], "roll": [74, 79], "window": [74, 79], "get_reward": [74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "normalize_reward": [74, 77, 79, 80, 84, 85], "varianc": [74, 77, 79, 84, 85], "cdf": [74, 77, 79, 84, 85], "welford": [74, 77, 79, 84, 85], "onlin": [74, 77, 79, 84, 85], "erf": [74, 77, 79, 84, 85], "rewardmodeltyp": [75, 79], "rlhf": [75, 79], "relevance_bert": [75, 79], "relevance_mpnet": [75, 79], "task_validator_filt": [75, 79], "defaultrewardframeworkconfig": [75, 79], "dpo_model_weight": [75, 79], "rlhf_model_weight": [75, 79], "reciprocate_model_weight": [75, 79], "dahoas_model_weight": [75, 79], "prompt_model_weight": [75, 79], "dahoasrewardmodel": [76, 79], "6b": [76, 79], "load_weight": [76, 79], "input_id": [76, 79], "past_key_valu": [76, 79], "token_type_id": [76, 79], "position_id": [76, 79], "head_mask": [76, 79], "inputs_emb": [76, 79], "mc_token_id": [76, 79], "label": [76, 79], "return_dict": [76, 79], "output_attent": [76, 79], "output_hidden_st": [76, 79], "diversityrewardev": [77, 79], "diversityrewardmodel": [77, 79], "diversity_model_path": [77, 79, 84], "mpnet": [77, 79, 84], "v2": [77, 79, 81, 84], "get_embed": [77, 79, 84], "update_historic_embed": [77, 79], "get_historic_reward": [77, 79], "get_batch_reward": [77, 79], "raw_reward": [77, 79], "directpreferencerewardmodel": [78, 79], "reward_model_nam": [78, 79, 81, 82], "cerebra": [78, 79], "btlm": [78, 79], "3b": [78, 79], "8k": [78, 79], "reward_singl": [78, 79, 81], "with_penalti": [78, 79], "averag": [78, 79], "guidanc": [78, 79], "eric": [78, 79], "mitchel": [78, 79], "nsfwrewardmodel": [79, 80], "nsfw_filter_model_path": [79, 80], "facebook": [79, 80], "roberta": [79, 80], "hate": [79, 80], "speech": [79, 80], "dynabench": [79, 80], "r4": [79, 80], "nsfwrewardev": [79, 80], "openassistantrewardmodel": [79, 81], "openassist": [79, 81], "deberta": [79, 81], "v3": [79, 81], "reciprocaterewardmodel": [79, 83], "reward_model_path": [79, 83], "j_rm_format": [79, 83], "oa": [79, 83], "revis": [79, 83], "501f895": [79, 83], "relevancerewardmodel": [79, 84], "relevancerewardev": [79, 84], "unsuccess": [79, 85], "zero": [79, 85], "promptrewardmodel": [79, 82], "vmware": [79, 82], "llama": [79, 82], "7b": [79, 82], "instruct": [79, 82], "bert_scor": 84, "mpnet_scor": 84, "bertrelevancerewardmodel": 84, "relevance_model_path": 84, "bert": 84, "uncas": 84, "mpnetrelevencemodel": 84, "normalized_reward": 85, "parse_reward_ev": 85, "reward_ev": 85, "task_nam": 86, "compose_prompt": 86, "summarytask": 86, "questiongenerationtask": 86, "questionanswertask": 86, "create_summarization_task": 86, "create_qg_task": 86, "create_qa_task": 86, "should_set_weight": 87, "rewardeventtestcas": 90, "methodnam": [90, 91, 92, 93], "runtest": [90, 91, 92, 93], "unittest": [90, 91, 92, 93], "testcas": [90, 91, 92, 93], "rewardev": 90, "miss": 90, "is_filter_model": 90, "hook": [90, 91], "fixtur": [90, 91, 92, 93], "test_no_missing_reward": 90, "test_imputed_reward_values_are_correct": 90, "test_parse_reward_events_with_reward_ev": 90, "test_parse_reward_events_with_no_reward_ev": 90, "taskvalidatortestcas": 91, "taskvalid": 91, "test_augment_with_answer_keyword": 91, "augment": 91, "test_followup_with_answer_keyword": 91, "test_augment_with_question_keyword": 91, "test_answer_with_question_keyword": 91, "test_followup_and_answer_with_summary_keyword": 91, "test_reward_valid_followup": 91, "test_reward_valid_answ": 91, "test_reward_valid_aug": 91, "test_reward_valid_oth": 91, "datasettestcas": 92, "constructor": [92, 93], "deconstruct": [92, 93], "teardown": [92, 93], "__init__": [92, 93], "failureexcept": [92, 93], "deem": [92, 93], "longmessag": [92, 93], "explicit": [92, 93], "maxdiff": [92, 93], "difflib": [92, 93], "test_next_skips_empty_and_newline_only_str": 92, "test_next_returns_regular_str": 92, "eventtestcas": 93, "test_event_from_dict_all_forward_columns_match": 93, "test_event_from_dict_forward_no_reward_log": 93, "test_event_from_dict_forward_reward_logging_mismatch": 93, "subpackag": 94, "submodul": 94, "content": 94}, "objects": {"": [[36, 0, 0, "-", "bittensor"], [47, 0, 0, "-", "miner"], [48, 0, 0, "-", "neurons"], [58, 0, 0, "-", "prompting"], [88, 0, 0, "-", "validators"]], "bittensor": [[36, 1, 1, "", "ALL_COMMANDS"], [36, 2, 1, "", "AxonInfo"], [36, 2, 1, "", "BTStreamingResponseModel"], [36, 6, 1, "", "ChainConnectionError"], [36, 2, 1, "", "ChainDataType"], [36, 6, 1, "", "ChainError"], [36, 6, 1, "", "ChainQueryError"], [36, 6, 1, "", "ChainTransactionError"], [36, 2, 1, "", "DefaultConfig"], [36, 2, 1, "", "DelegateInfo"], [36, 2, 1, "", "IPInfo"], [36, 6, 1, "", "IdentityError"], [36, 6, 1, "", "InvalidConfigFile"], [36, 6, 1, "id0", "KeyFileError"], [36, 2, 1, "", "Mockkeyfile"], [36, 1, 1, "", "NACL_SALT"], [36, 2, 1, "", "NeuronInfo"], [36, 2, 1, "", "NeuronInfoLite"], [36, 6, 1, "", "NominationError"], [36, 6, 1, "", "NotDelegateError"], [36, 6, 1, "", "NotRegisteredError"], [36, 2, 1, "", "PriorityThreadPoolExecutor"], [36, 2, 1, "", "PrometheusInfo"], [36, 1, 1, "", "ProposalCallData"], [36, 2, 1, "", "ProposalVoteData"], [36, 1, 1, "", "RAOPERTAO"], [36, 6, 1, "", "RegistrationError"], [36, 6, 1, "", "StakeError"], [36, 2, 1, "", "StakeInfo"], [36, 2, 1, "", "StreamingSynapse"], [36, 2, 1, "", "SubnetHyperparameters"], [36, 2, 1, "", "SubnetInfo"], [36, 2, 1, "", "Synapse"], [36, 1, 1, "", "T"], [36, 1, 1, "", "TORCH_DTYPES"], [36, 2, 1, "", "Tensor"], [36, 2, 1, "", "TerminalInfo"], [36, 6, 1, "", "TransferError"], [36, 1, 1, "", "U16_MAX"], [36, 1, 1, "", "U64_MAX"], [36, 6, 1, "", "UnstakeError"], [36, 1, 1, "", "__archive_entrypoint__"], [36, 1, 1, "", "__bellagene_entrypoint__"], [36, 1, 1, "", "__blocktime__"], [36, 1, 1, "", "__console__"], [36, 1, 1, "", "__delegates_details_url__"], [36, 1, 1, "", "__finney_entrypoint__"], [36, 1, 1, "", "__finney_test_entrypoint__"], [36, 1, 1, "", "__local_entrypoint__"], [36, 1, 1, "", "__network_explorer_map__"], [36, 1, 1, "", "__networks__"], [36, 1, 1, "", "__new_signature_version__"], [36, 1, 1, "", "__pipaddress__"], [36, 1, 1, "", "__rao_symbol__"], [36, 1, 1, "", "__ss58_address_length__"], [36, 1, 1, "", "__ss58_format__"], [36, 1, 1, "", "__tao_symbol__"], [36, 1, 1, "", "__type_registry__"], [36, 1, 1, "", "__use_console__"], [36, 1, 1, "", "__version__"], [36, 1, 1, "", "__version_as_int__"], [36, 7, 1, "", "ask_password_to_encrypt"], [36, 2, 1, "", "axon"], [0, 0, 0, "-", "axon"], [1, 0, 0, "-", "btlogging"], [36, 7, 1, "", "cast_dtype"], [36, 7, 1, "", "cast_float"], [36, 7, 1, "", "cast_int"], [36, 7, 1, "", "cast_shape"], [2, 0, 0, "-", "chain_data"], [36, 2, 1, "", "cli"], [3, 0, 0, "-", "cli"], [6, 0, 0, "-", "commands"], [36, 2, 1, "", "config"], [20, 0, 0, "-", "config"], [36, 1, 1, "", "configs"], [36, 1, 1, "", "custom_rpc_type_registry"], [36, 7, 1, "", "debug"], [36, 7, 1, "", "decrypt_keyfile_data"], [36, 1, 1, "", "defaults"], [36, 2, 1, "", "dendrite"], [21, 0, 0, "-", "dendrite"], [36, 7, 1, "", "deserialize_keypair_from_keyfile_data"], [36, 7, 1, "", "display_mnemonic_msg"], [36, 7, 1, "", "encrypt_keyfile_data"], [22, 0, 0, "-", "errors"], [24, 0, 0, "-", "extrinsics"], [36, 7, 1, "", "from_scale_encoding"], [36, 7, 1, "", "from_scale_encoding_using_type_string"], [36, 7, 1, "", "get_coldkey_password_from_environment"], [36, 7, 1, "", "get_size"], [37, 0, 0, "-", "keyfile"], [36, 7, 1, "", "keyfile_data_encryption_method"], [36, 7, 1, "", "keyfile_data_is_encrypted"], [36, 7, 1, "", "keyfile_data_is_encrypted_ansible"], [36, 7, 1, "", "keyfile_data_is_encrypted_legacy"], [36, 7, 1, "", "keyfile_data_is_encrypted_nacl"], [36, 7, 1, "", "legacy_encrypt_keyfile_data"], [36, 2, 1, "", "logging"], [38, 0, 0, "-", "metagraph"], [36, 7, 1, "", "serialized_keypair_to_keyfile_data"], [39, 0, 0, "-", "stream"], [40, 0, 0, "-", "subtensor"], [41, 0, 0, "-", "synapse"], [42, 0, 0, "-", "tensor"], [43, 0, 0, "-", "threadpool"], [36, 7, 1, "", "trace"], [36, 7, 1, "", "turn_console_off"], [36, 7, 1, "", "turn_console_on"], [44, 0, 0, "-", "types"], [36, 7, 1, "", "validate_password"], [36, 1, 1, "", "version_split"], [45, 0, 0, "-", "wallet"]], "bittensor.AxonInfo": [[36, 3, 1, "", "__eq__"], [36, 3, 1, "", "__repr__"], [36, 3, 1, "", "__str__"], [36, 4, 1, "", "coldkey"], [36, 3, 1, "", "from_neuron_info"], [36, 3, 1, "", "from_parameter_dict"], [36, 3, 1, "", "from_string"], [36, 4, 1, "", "hotkey"], [36, 4, 1, "", "ip"], [36, 3, 1, "", "ip_str"], [36, 4, 1, "", "ip_type"], [36, 5, 1, "", "is_serving"], [36, 4, 1, "", "placeholder1"], [36, 4, 1, "", "placeholder2"], [36, 4, 1, "", "port"], [36, 4, 1, "", "protocol"], [36, 3, 1, "", "to_parameter_dict"], [36, 3, 1, "", "to_string"], [36, 4, 1, "", "version"]], "bittensor.BTStreamingResponseModel": [[36, 4, 1, "id34", "token_streamer"]], "bittensor.ChainDataType": [[36, 4, 1, "", "DelegateInfo"], [36, 4, 1, "", "DelegatedInfo"], [36, 4, 1, "", "IPInfo"], [36, 4, 1, "", "NeuronInfo"], [36, 4, 1, "", "NeuronInfoLite"], [36, 4, 1, "", "StakeInfo"], [36, 4, 1, "", "SubnetHyperparameters"], [36, 4, 1, "", "SubnetInfo"]], "bittensor.DefaultConfig": [[36, 3, 1, "", "default"]], "bittensor.DelegateInfo": [[36, 3, 1, "", "delegated_list_from_vec_u8"], [36, 3, 1, "", "fix_decoded_values"], [36, 3, 1, "", "from_vec_u8"], [36, 4, 1, "", "hotkey_ss58"], [36, 3, 1, "", "list_from_vec_u8"], [36, 4, 1, "", "nominators"], [36, 4, 1, "", "owner_ss58"], [36, 4, 1, "", "registrations"], [36, 4, 1, "", "return_per_1000"], [36, 4, 1, "", "take"], [36, 4, 1, "", "total_daily_return"], [36, 4, 1, "", "total_stake"], [36, 4, 1, "", "validator_permits"]], "bittensor.IPInfo": [[36, 3, 1, "", "encode"], [36, 3, 1, "", "fix_decoded_values"], [36, 3, 1, "", "from_parameter_dict"], [36, 3, 1, "", "from_vec_u8"], [36, 4, 1, "", "ip"], [36, 4, 1, "", "ip_type"], [36, 3, 1, "", "list_from_vec_u8"], [36, 4, 1, "", "protocol"], [36, 3, 1, "", "to_parameter_dict"]], "bittensor.Mockkeyfile": [[36, 3, 1, "", "__repr__"], [36, 3, 1, "", "__str__"], [36, 3, 1, "", "check_and_update_encryption"], [36, 5, 1, "", "data"], [36, 3, 1, "", "decrypt"], [36, 3, 1, "", "encrypt"], [36, 3, 1, "", "exists_on_device"], [36, 3, 1, "", "get_keypair"], [36, 3, 1, "", "is_encrypted"], [36, 3, 1, "", "is_readable"], [36, 3, 1, "", "is_writable"], [36, 5, 1, "", "keypair"], [36, 3, 1, "", "make_dirs"], [36, 3, 1, "", "set_keypair"]], "bittensor.NeuronInfo": [[36, 3, 1, "", "_neuron_dict_to_namespace"], [36, 3, 1, "", "_null_neuron"], [36, 4, 1, "", "active"], [36, 4, 1, "", "axon_info"], [36, 4, 1, "", "bonds"], [36, 4, 1, "", "coldkey"], [36, 4, 1, "", "consensus"], [36, 4, 1, "", "dividends"], [36, 4, 1, "", "emission"], [36, 3, 1, "", "fix_decoded_values"], [36, 3, 1, "", "from_vec_u8"], [36, 3, 1, "", "from_weights_bonds_and_neuron_lite"], [36, 4, 1, "", "hotkey"], [36, 4, 1, "", "incentive"], [36, 4, 1, "", "is_null"], [36, 4, 1, "", "last_update"], [36, 3, 1, "", "list_from_vec_u8"], [36, 4, 1, "", "netuid"], [36, 4, 1, "", "prometheus_info"], [36, 4, 1, "", "pruning_score"], [36, 4, 1, "", "rank"], [36, 4, 1, "", "stake"], [36, 4, 1, "", "stake_dict"], [36, 4, 1, "", "total_stake"], [36, 4, 1, "", "trust"], [36, 4, 1, "", "uid"], [36, 4, 1, "", "validator_permit"], [36, 4, 1, "", "validator_trust"], [36, 4, 1, "", "weights"]], "bittensor.NeuronInfoLite": [[36, 3, 1, "", "_neuron_dict_to_namespace"], [36, 3, 1, "", "_null_neuron"], [36, 4, 1, "", "active"], [36, 4, 1, "", "axon_info"], [36, 4, 1, "", "coldkey"], [36, 4, 1, "", "consensus"], [36, 4, 1, "", "dividends"], [36, 4, 1, "", "emission"], [36, 3, 1, "", "fix_decoded_values"], [36, 3, 1, "", "from_vec_u8"], [36, 4, 1, "", "hotkey"], [36, 4, 1, "", "incentive"], [36, 4, 1, "", "is_null"], [36, 4, 1, "", "last_update"], [36, 3, 1, "", "list_from_vec_u8"], [36, 4, 1, "", "netuid"], [36, 4, 1, "", "prometheus_info"], [36, 4, 1, "", "pruning_score"], [36, 4, 1, "", "rank"], [36, 4, 1, "", "stake"], [36, 4, 1, "", "stake_dict"], [36, 4, 1, "", "total_stake"], [36, 4, 1, "", "trust"], [36, 4, 1, "", "uid"], [36, 4, 1, "", "validator_permit"], [36, 4, 1, "", "validator_trust"]], "bittensor.PriorityThreadPoolExecutor": [[36, 3, 1, "", "_adjust_thread_count"], [36, 4, 1, "", "_counter"], [36, 3, 1, "", "_initializer_failed"], [36, 3, 1, "", "add_args"], [36, 3, 1, "", "config"], [36, 5, 1, "", "is_empty"], [36, 3, 1, "", "shutdown"], [36, 3, 1, "", "submit"]], "bittensor.PrometheusInfo": [[36, 4, 1, "", "block"], [36, 3, 1, "", "fix_decoded_values"], [36, 4, 1, "", "ip"], [36, 4, 1, "", "ip_type"], [36, 4, 1, "", "port"], [36, 4, 1, "", "version"]], "bittensor.ProposalVoteData": [[36, 4, 1, "", "ayes"], [36, 4, 1, "", "end"], [36, 4, 1, "", "index"], [36, 4, 1, "", "nays"], [36, 4, 1, "", "threshold"]], "bittensor.StakeInfo": [[36, 4, 1, "", "coldkey_ss58"], [36, 3, 1, "", "fix_decoded_values"], [36, 3, 1, "", "from_vec_u8"], [36, 4, 1, "", "hotkey_ss58"], [36, 3, 1, "", "list_from_vec_u8"], [36, 3, 1, "", "list_of_tuple_from_vec_u8"], [36, 4, 1, "", "stake"]], "bittensor.StreamingSynapse": [[36, 2, 1, "", "BTStreamingResponse"], [36, 2, 1, "", "Config"], [36, 3, 1, "", "create_streaming_response"], [36, 3, 1, "", "extract_response_json"], [36, 3, 1, "", "process_streaming_response"]], "bittensor.StreamingSynapse.BTStreamingResponse": [[36, 3, 1, "", "__call__"], [36, 3, 1, "", "stream_response"]], "bittensor.StreamingSynapse.Config": [[36, 4, 1, "", "validate_assignment"]], "bittensor.SubnetHyperparameters": [[36, 4, 1, "", "activity_cutoff"], [36, 4, 1, "", "adjustment_interval"], [36, 4, 1, "", "bonds_moving_avg"], [36, 3, 1, "", "fix_decoded_values"], [36, 3, 1, "", "from_parameter_dict"], [36, 3, 1, "", "from_vec_u8"], [36, 4, 1, "", "immunity_period"], [36, 4, 1, "", "kappa"], [36, 3, 1, "", "list_from_vec_u8"], [36, 4, 1, "", "max_burn"], [36, 4, 1, "", "max_difficulty"], [36, 4, 1, "", "max_regs_per_block"], [36, 4, 1, "", "max_weight_limit"], [36, 4, 1, "", "min_allowed_weights"], [36, 4, 1, "", "min_burn"], [36, 4, 1, "", "min_difficulty"], [36, 4, 1, "", "registration_allowed"], [36, 4, 1, "", "rho"], [36, 4, 1, "", "target_regs_per_interval"], [36, 4, 1, "", "tempo"], [36, 3, 1, "", "to_parameter_dict"], [36, 4, 1, "", "weights_rate_limit"], [36, 4, 1, "", "weights_version"]], "bittensor.SubnetInfo": [[36, 4, 1, "", "blocks_since_epoch"], [36, 4, 1, "", "burn"], [36, 4, 1, "", "connection_requirements"], [36, 4, 1, "", "difficulty"], [36, 4, 1, "", "emission_value"], [36, 3, 1, "", "fix_decoded_values"], [36, 3, 1, "", "from_parameter_dict"], [36, 3, 1, "", "from_vec_u8"], [36, 4, 1, "", "immunity_period"], [36, 4, 1, "", "kappa"], [36, 3, 1, "", "list_from_vec_u8"], [36, 4, 1, "", "max_allowed_validators"], [36, 4, 1, "", "max_n"], [36, 4, 1, "", "max_weight_limit"], [36, 4, 1, "", "min_allowed_weights"], [36, 4, 1, "", "modality"], [36, 4, 1, "", "netuid"], [36, 4, 1, "", "owner_ss58"], [36, 4, 1, "", "rho"], [36, 4, 1, "", "scaling_law_power"], [36, 4, 1, "", "subnetwork_n"], [36, 4, 1, "", "tempo"], [36, 3, 1, "", "to_parameter_dict"]], "bittensor.Synapse": [[36, 2, 1, "", "Config"], [36, 3, 1, "id29", "__setattr__"], [36, 4, 1, "", "_extract_header_size"], [36, 4, 1, "", "_extract_timeout"], [36, 4, 1, "", "_extract_total_size"], [36, 4, 1, "id25", "axon"], [36, 5, 1, "id19", "body_hash"], [36, 4, 1, "id26", "computed_body_hash"], [36, 4, 1, "id24", "dendrite"], [36, 3, 1, "id28", "deserialize"], [36, 5, 1, "", "failed_verification"], [36, 3, 1, "id33", "from_headers"], [36, 3, 1, "id30", "get_total_size"], [36, 4, 1, "id23", "header_size"], [36, 5, 1, "", "is_blacklist"], [36, 5, 1, "", "is_failure"], [36, 5, 1, "", "is_success"], [36, 5, 1, "", "is_timeout"], [36, 4, 1, "id20", "name"], [36, 3, 1, "id32", "parse_headers_to_inputs"], [36, 4, 1, "id27", "required_hash_fields"], [36, 3, 1, "", "set_name_type"], [36, 4, 1, "id21", "timeout"], [36, 3, 1, "id31", "to_headers"], [36, 4, 1, "id22", "total_size"]], "bittensor.Synapse.Config": [[36, 4, 1, "", "validate_assignment"]], "bittensor.Tensor": [[36, 2, 1, "", "Config"], [36, 4, 1, "", "_extract_dtype"], [36, 4, 1, "", "_extract_shape"], [36, 4, 1, "id35", "buffer"], [36, 3, 1, "", "deserialize"], [36, 4, 1, "id36", "dtype"], [36, 3, 1, "", "numpy"], [36, 3, 1, "", "serialize"], [36, 4, 1, "id37", "shape"], [36, 3, 1, "", "tensor"], [36, 3, 1, "", "tolist"]], "bittensor.Tensor.Config": [[36, 4, 1, "", "validate_assignment"]], "bittensor.TerminalInfo": [[36, 2, 1, "", "Config"], [36, 4, 1, "", "_extract_nonce"], [36, 4, 1, "", "_extract_port"], [36, 4, 1, "", "_extract_process_time"], [36, 4, 1, "", "_extract_status_code"], [36, 4, 1, "", "_extract_version"], [36, 4, 1, "id17", "hotkey"], [36, 4, 1, "id12", "ip"], [36, 4, 1, "id15", "nonce"], [36, 4, 1, "id13", "port"], [36, 4, 1, "id11", "process_time"], [36, 4, 1, "id18", "signature"], [36, 4, 1, "id9", "status_code"], [36, 4, 1, "id10", "status_message"], [36, 4, 1, "id16", "uuid"], [36, 4, 1, "id14", "version"]], "bittensor.TerminalInfo.Config": [[36, 4, 1, "", "validate_assignment"]], "bittensor.axon": [[0, 2, 1, "", "AxonMiddleware"], [0, 2, 1, "", "FastAPIThreadedServer"], [36, 3, 1, "", "__del__"], [36, 3, 1, "", "__repr__"], [36, 3, 1, "", "__str__"], [36, 3, 1, "", "add_args"], [36, 3, 1, "", "attach"], [0, 2, 1, "", "axon"], [36, 3, 1, "", "check_config"], [36, 3, 1, "", "config"], [36, 3, 1, "", "default_verify"], [36, 3, 1, "", "help"], [36, 3, 1, "", "info"], [36, 3, 1, "", "serve"], [36, 3, 1, "", "start"], [36, 3, 1, "", "stop"], [36, 3, 1, "", "to_string"], [36, 3, 1, "", "verify_body_integrity"]], "bittensor.axon.AxonMiddleware": [[0, 3, 1, "", "blacklist"], [0, 3, 1, "", "dispatch"], [0, 3, 1, "", "postprocess"], [0, 3, 1, "", "preprocess"], [0, 3, 1, "", "priority"], [0, 3, 1, "", "run"], [0, 3, 1, "", "verify"]], "bittensor.axon.FastAPIThreadedServer": [[0, 3, 1, "id4", "_wrapper_run"], [0, 3, 1, "id2", "install_signal_handlers"], [0, 4, 1, "id1", "is_running"], [0, 3, 1, "id3", "run_in_thread"], [0, 4, 1, "id0", "should_exit"], [0, 3, 1, "id5", "start"], [0, 3, 1, "id6", "stop"]], "bittensor.axon.axon": [[0, 3, 1, "", "__del__"], [0, 3, 1, "", "__repr__"], [0, 3, 1, "", "__str__"], [0, 3, 1, "", "add_args"], [0, 3, 1, "", "attach"], [0, 3, 1, "", "check_config"], [0, 3, 1, "", "config"], [0, 3, 1, "", "default_verify"], [0, 3, 1, "", "help"], [0, 3, 1, "", "info"], [0, 3, 1, "", "serve"], [0, 3, 1, "", "start"], [0, 3, 1, "", "stop"], [0, 3, 1, "", "to_string"], [0, 3, 1, "", "verify_body_integrity"]], "bittensor.btlogging": [[1, 7, 1, "", "_remove_loguru_ansi_directive"], [1, 1, 1, "", "logger"], [1, 2, 1, "", "logging"]], "bittensor.btlogging.logging": [[1, 4, 1, "", "__debug_on__"], [1, 4, 1, "", "__file_sink__"], [1, 4, 1, "", "__has_been_inited__"], [1, 4, 1, "", "__std_sink__"], [1, 4, 1, "", "__trace_on__"], [1, 3, 1, "", "_format"], [1, 3, 1, "", "add_args"], [1, 3, 1, "", "check_config"], [1, 3, 1, "", "config"], [1, 3, 1, "", "debug"], [1, 3, 1, "", "error"], [1, 3, 1, "", "exception"], [1, 3, 1, "", "get_level"], [1, 3, 1, "", "help"], [1, 3, 1, "", "info"], [1, 3, 1, "", "log_filter"], [1, 3, 1, "", "log_formatter"], [1, 3, 1, "", "log_save_filter"], [1, 3, 1, "", "log_save_formatter"], [1, 3, 1, "", "set_debug"], [1, 3, 1, "", "set_trace"], [1, 3, 1, "", "success"], [1, 3, 1, "", "trace"], [1, 3, 1, "", "warning"]], "bittensor.chain_data": [[2, 2, 1, "", "AxonInfo"], [2, 2, 1, "", "ChainDataType"], [2, 2, 1, "", "DelegateInfo"], [2, 2, 1, "", "IPInfo"], [2, 2, 1, "", "NeuronInfo"], [2, 2, 1, "", "NeuronInfoLite"], [2, 2, 1, "", "PrometheusInfo"], [2, 1, 1, "", "ProposalCallData"], [2, 2, 1, "", "ProposalVoteData"], [2, 1, 1, "", "RAOPERTAO"], [2, 2, 1, "", "StakeInfo"], [2, 2, 1, "", "SubnetHyperparameters"], [2, 2, 1, "", "SubnetInfo"], [2, 1, 1, "", "U16_MAX"], [2, 1, 1, "", "U64_MAX"], [2, 1, 1, "", "custom_rpc_type_registry"], [2, 7, 1, "", "from_scale_encoding"], [2, 7, 1, "", "from_scale_encoding_using_type_string"]], "bittensor.chain_data.AxonInfo": [[2, 3, 1, "", "__eq__"], [2, 3, 1, "", "__repr__"], [2, 3, 1, "", "__str__"], [2, 4, 1, "", "coldkey"], [2, 3, 1, "", "from_neuron_info"], [2, 3, 1, "", "from_parameter_dict"], [2, 3, 1, "", "from_string"], [2, 4, 1, "", "hotkey"], [2, 4, 1, "", "ip"], [2, 3, 1, "", "ip_str"], [2, 4, 1, "", "ip_type"], [2, 5, 1, "", "is_serving"], [2, 4, 1, "", "placeholder1"], [2, 4, 1, "", "placeholder2"], [2, 4, 1, "", "port"], [2, 4, 1, "", "protocol"], [2, 3, 1, "", "to_parameter_dict"], [2, 3, 1, "", "to_string"], [2, 4, 1, "", "version"]], "bittensor.chain_data.ChainDataType": [[2, 4, 1, "", "DelegateInfo"], [2, 4, 1, "", "DelegatedInfo"], [2, 4, 1, "", "IPInfo"], [2, 4, 1, "", "NeuronInfo"], [2, 4, 1, "", "NeuronInfoLite"], [2, 4, 1, "", "StakeInfo"], [2, 4, 1, "", "SubnetHyperparameters"], [2, 4, 1, "", "SubnetInfo"]], "bittensor.chain_data.DelegateInfo": [[2, 3, 1, "", "delegated_list_from_vec_u8"], [2, 3, 1, "", "fix_decoded_values"], [2, 3, 1, "", "from_vec_u8"], [2, 4, 1, "", "hotkey_ss58"], [2, 3, 1, "", "list_from_vec_u8"], [2, 4, 1, "", "nominators"], [2, 4, 1, "", "owner_ss58"], [2, 4, 1, "", "registrations"], [2, 4, 1, "", "return_per_1000"], [2, 4, 1, "", "take"], [2, 4, 1, "", "total_daily_return"], [2, 4, 1, "", "total_stake"], [2, 4, 1, "", "validator_permits"]], "bittensor.chain_data.IPInfo": [[2, 3, 1, "", "encode"], [2, 3, 1, "", "fix_decoded_values"], [2, 3, 1, "", "from_parameter_dict"], [2, 3, 1, "", "from_vec_u8"], [2, 4, 1, "", "ip"], [2, 4, 1, "", "ip_type"], [2, 3, 1, "", "list_from_vec_u8"], [2, 4, 1, "", "protocol"], [2, 3, 1, "", "to_parameter_dict"]], "bittensor.chain_data.NeuronInfo": [[2, 3, 1, "", "_neuron_dict_to_namespace"], [2, 3, 1, "", "_null_neuron"], [2, 4, 1, "", "active"], [2, 4, 1, "", "axon_info"], [2, 4, 1, "", "bonds"], [2, 4, 1, "", "coldkey"], [2, 4, 1, "", "consensus"], [2, 4, 1, "", "dividends"], [2, 4, 1, "", "emission"], [2, 3, 1, "", "fix_decoded_values"], [2, 3, 1, "", "from_vec_u8"], [2, 3, 1, "", "from_weights_bonds_and_neuron_lite"], [2, 4, 1, "", "hotkey"], [2, 4, 1, "", "incentive"], [2, 4, 1, "", "is_null"], [2, 4, 1, "", "last_update"], [2, 3, 1, "", "list_from_vec_u8"], [2, 4, 1, "", "netuid"], [2, 4, 1, "", "prometheus_info"], [2, 4, 1, "", "pruning_score"], [2, 4, 1, "", "rank"], [2, 4, 1, "", "stake"], [2, 4, 1, "", "stake_dict"], [2, 4, 1, "", "total_stake"], [2, 4, 1, "", "trust"], [2, 4, 1, "", "uid"], [2, 4, 1, "", "validator_permit"], [2, 4, 1, "", "validator_trust"], [2, 4, 1, "", "weights"]], "bittensor.chain_data.NeuronInfoLite": [[2, 3, 1, "", "_neuron_dict_to_namespace"], [2, 3, 1, "", "_null_neuron"], [2, 4, 1, "", "active"], [2, 4, 1, "", "axon_info"], [2, 4, 1, "", "coldkey"], [2, 4, 1, "", "consensus"], [2, 4, 1, "", "dividends"], [2, 4, 1, "", "emission"], [2, 3, 1, "", "fix_decoded_values"], [2, 3, 1, "", "from_vec_u8"], [2, 4, 1, "", "hotkey"], [2, 4, 1, "", "incentive"], [2, 4, 1, "", "is_null"], [2, 4, 1, "", "last_update"], [2, 3, 1, "", "list_from_vec_u8"], [2, 4, 1, "", "netuid"], [2, 4, 1, "", "prometheus_info"], [2, 4, 1, "", "pruning_score"], [2, 4, 1, "", "rank"], [2, 4, 1, "", "stake"], [2, 4, 1, "", "stake_dict"], [2, 4, 1, "", "total_stake"], [2, 4, 1, "", "trust"], [2, 4, 1, "", "uid"], [2, 4, 1, "", "validator_permit"], [2, 4, 1, "", "validator_trust"]], "bittensor.chain_data.PrometheusInfo": [[2, 4, 1, "", "block"], [2, 3, 1, "", "fix_decoded_values"], [2, 4, 1, "", "ip"], [2, 4, 1, "", "ip_type"], [2, 4, 1, "", "port"], [2, 4, 1, "", "version"]], "bittensor.chain_data.ProposalVoteData": [[2, 4, 1, "", "ayes"], [2, 4, 1, "", "end"], [2, 4, 1, "", "index"], [2, 4, 1, "", "nays"], [2, 4, 1, "", "threshold"]], "bittensor.chain_data.StakeInfo": [[2, 4, 1, "", "coldkey_ss58"], [2, 3, 1, "", "fix_decoded_values"], [2, 3, 1, "", "from_vec_u8"], [2, 4, 1, "", "hotkey_ss58"], [2, 3, 1, "", "list_from_vec_u8"], [2, 3, 1, "", "list_of_tuple_from_vec_u8"], [2, 4, 1, "", "stake"]], "bittensor.chain_data.SubnetHyperparameters": [[2, 4, 1, "", "activity_cutoff"], [2, 4, 1, "", "adjustment_interval"], [2, 4, 1, "", "bonds_moving_avg"], [2, 3, 1, "", "fix_decoded_values"], [2, 3, 1, "", "from_parameter_dict"], [2, 3, 1, "", "from_vec_u8"], [2, 4, 1, "", "immunity_period"], [2, 4, 1, "", "kappa"], [2, 3, 1, "", "list_from_vec_u8"], [2, 4, 1, "", "max_burn"], [2, 4, 1, "", "max_difficulty"], [2, 4, 1, "", "max_regs_per_block"], [2, 4, 1, "", "max_weight_limit"], [2, 4, 1, "", "min_allowed_weights"], [2, 4, 1, "", "min_burn"], [2, 4, 1, "", "min_difficulty"], [2, 4, 1, "", "registration_allowed"], [2, 4, 1, "", "rho"], [2, 4, 1, "", "target_regs_per_interval"], [2, 4, 1, "", "tempo"], [2, 3, 1, "", "to_parameter_dict"], [2, 4, 1, "", "weights_rate_limit"], [2, 4, 1, "", "weights_version"]], "bittensor.chain_data.SubnetInfo": [[2, 4, 1, "", "blocks_since_epoch"], [2, 4, 1, "", "burn"], [2, 4, 1, "", "connection_requirements"], [2, 4, 1, "", "difficulty"], [2, 4, 1, "", "emission_value"], [2, 3, 1, "", "fix_decoded_values"], [2, 3, 1, "", "from_parameter_dict"], [2, 3, 1, "", "from_vec_u8"], [2, 4, 1, "", "immunity_period"], [2, 4, 1, "", "kappa"], [2, 3, 1, "", "list_from_vec_u8"], [2, 4, 1, "", "max_allowed_validators"], [2, 4, 1, "", "max_n"], [2, 4, 1, "", "max_weight_limit"], [2, 4, 1, "", "min_allowed_weights"], [2, 4, 1, "", "modality"], [2, 4, 1, "", "netuid"], [2, 4, 1, "", "owner_ss58"], [2, 4, 1, "", "rho"], [2, 4, 1, "", "scaling_law_power"], [2, 4, 1, "", "subnetwork_n"], [2, 4, 1, "", "tempo"], [2, 3, 1, "", "to_parameter_dict"]], "bittensor.cli": [[3, 1, 1, "", "ALIAS_TO_COMMAND"], [3, 1, 1, "", "COMMANDS"], [36, 3, 1, "", "__create_parser__"], [36, 3, 1, "", "check_config"], [3, 2, 1, "", "cli"], [3, 1, 1, "", "console"], [36, 3, 1, "", "create_config"], [36, 3, 1, "", "run"]], "bittensor.cli.cli": [[3, 3, 1, "", "__create_parser__"], [3, 3, 1, "", "check_config"], [3, 3, 1, "", "create_config"], [3, 3, 1, "", "run"]], "bittensor.commands": [[6, 2, 1, "", "DelegateStakeCommand"], [6, 2, 1, "", "DelegateUnstakeCommand"], [6, 2, 1, "", "GetIdentityCommand"], [6, 2, 1, "", "InspectCommand"], [6, 2, 1, "", "ListCommand"], [6, 2, 1, "", "ListDelegatesCommand"], [6, 2, 1, "", "MetagraphCommand"], [6, 2, 1, "", "MyDelegatesCommand"], [6, 2, 1, "", "NewColdkeyCommand"], [6, 2, 1, "", "NewHotkeyCommand"], [6, 2, 1, "", "NominateCommand"], [6, 2, 1, "", "OverviewCommand"], [6, 2, 1, "", "PowRegisterCommand"], [6, 2, 1, "", "ProposalsCommand"], [6, 2, 1, "", "RegenColdkeyCommand"], [6, 2, 1, "", "RegenColdkeypubCommand"], [6, 2, 1, "", "RegenHotkeyCommand"], [6, 2, 1, "", "RegisterCommand"], [6, 2, 1, "", "RootGetWeightsCommand"], [6, 2, 1, "", "RootList"], [6, 2, 1, "", "RootRegisterCommand"], [6, 2, 1, "", "RootSetBoostCommand"], [6, 2, 1, "", "RootSetSlashCommand"], [6, 2, 1, "", "RootSetWeightsCommand"], [6, 2, 1, "", "RunFaucetCommand"], [6, 2, 1, "", "SenateCommand"], [6, 2, 1, "", "SenateLeaveCommand"], [6, 2, 1, "", "SenateRegisterCommand"], [6, 2, 1, "", "SetIdentityCommand"], [6, 2, 1, "", "ShowVotesCommand"], [6, 2, 1, "", "StakeCommand"], [6, 2, 1, "", "StakeShow"], [6, 2, 1, "", "SwapHotkeyCommand"], [6, 2, 1, "", "TransferCommand"], [6, 2, 1, "", "UnStakeCommand"], [6, 2, 1, "", "UpdateCommand"], [6, 2, 1, "", "UpdateWalletCommand"], [6, 2, 1, "", "VoteCommand"], [6, 2, 1, "", "WalletBalanceCommand"], [6, 2, 1, "", "WalletCreateCommand"], [6, 1, 1, "", "defaults"], [4, 0, 0, "-", "delegates"], [5, 0, 0, "-", "identity"], [7, 0, 0, "-", "inspect"], [8, 0, 0, "-", "list"], [9, 0, 0, "-", "metagraph"], [10, 0, 0, "-", "misc"], [11, 0, 0, "-", "network"], [12, 0, 0, "-", "overview"], [13, 0, 0, "-", "register"], [14, 0, 0, "-", "root"], [15, 0, 0, "-", "senate"], [16, 0, 0, "-", "stake"], [17, 0, 0, "-", "transfer"], [18, 0, 0, "-", "unstake"], [19, 0, 0, "-", "wallets"]], "bittensor.commands.DelegateStakeCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.DelegateUnstakeCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.GetIdentityCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.InspectCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.ListCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.ListDelegatesCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.MetagraphCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.MyDelegatesCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.NewColdkeyCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.NewHotkeyCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.NominateCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.OverviewCommand": [[6, 3, 1, "", "_get_de_registered_stake_for_coldkey_wallet"], [6, 3, 1, "", "_get_neurons_for_netuid"], [6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.PowRegisterCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.ProposalsCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RegenColdkeyCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RegenColdkeypubCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RegenHotkeyCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RegisterCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RootGetWeightsCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RootList": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RootRegisterCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RootSetBoostCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RootSetSlashCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RootSetWeightsCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.RunFaucetCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.SenateCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.SenateLeaveCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.SenateRegisterCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.SetIdentityCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.ShowVotesCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.StakeCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.StakeShow": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.SwapHotkeyCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.TransferCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.UnStakeCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.UpdateCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.UpdateWalletCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.VoteCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.WalletBalanceCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.WalletCreateCommand": [[6, 3, 1, "", "add_args"], [6, 3, 1, "", "check_config"], [6, 3, 1, "", "run"]], "bittensor.commands.delegates": [[4, 2, 1, "", "DelegateStakeCommand"], [4, 2, 1, "", "DelegateUnstakeCommand"], [4, 2, 1, "", "ListDelegatesCommand"], [4, 2, 1, "", "MyDelegatesCommand"], [4, 2, 1, "", "NominateCommand"], [4, 7, 1, "", "_get_coldkey_wallets_for_path"], [4, 1, 1, "", "console"], [4, 7, 1, "", "show_delegates"]], "bittensor.commands.delegates.DelegateStakeCommand": [[4, 3, 1, "", "add_args"], [4, 3, 1, "", "check_config"], [4, 3, 1, "", "run"]], "bittensor.commands.delegates.DelegateUnstakeCommand": [[4, 3, 1, "", "add_args"], [4, 3, 1, "", "check_config"], [4, 3, 1, "", "run"]], "bittensor.commands.delegates.ListDelegatesCommand": [[4, 3, 1, "", "add_args"], [4, 3, 1, "", "check_config"], [4, 3, 1, "", "run"]], "bittensor.commands.delegates.MyDelegatesCommand": [[4, 3, 1, "", "add_args"], [4, 3, 1, "", "check_config"], [4, 3, 1, "", "run"]], "bittensor.commands.delegates.NominateCommand": [[4, 3, 1, "", "add_args"], [4, 3, 1, "", "check_config"], [4, 3, 1, "", "run"]], "bittensor.commands.identity": [[5, 2, 1, "", "GetIdentityCommand"], [5, 2, 1, "", "SetIdentityCommand"]], "bittensor.commands.identity.GetIdentityCommand": [[5, 3, 1, "", "add_args"], [5, 3, 1, "", "check_config"], [5, 3, 1, "", "run"]], "bittensor.commands.identity.SetIdentityCommand": [[5, 3, 1, "", "add_args"], [5, 3, 1, "", "check_config"], [5, 3, 1, "", "run"]], "bittensor.commands.inspect": [[7, 2, 1, "", "InspectCommand"], [7, 7, 1, "", "_get_coldkey_wallets_for_path"], [7, 7, 1, "", "_get_hotkey_wallets_for_wallet"], [7, 1, 1, "", "console"]], "bittensor.commands.inspect.InspectCommand": [[7, 3, 1, "", "add_args"], [7, 3, 1, "", "check_config"], [7, 3, 1, "", "run"]], "bittensor.commands.list": [[8, 2, 1, "", "ListCommand"], [8, 1, 1, "", "console"]], "bittensor.commands.list.ListCommand": [[8, 3, 1, "", "add_args"], [8, 3, 1, "", "check_config"], [8, 3, 1, "", "run"]], "bittensor.commands.metagraph": [[9, 2, 1, "", "MetagraphCommand"], [9, 1, 1, "", "console"]], "bittensor.commands.metagraph.MetagraphCommand": [[9, 3, 1, "", "add_args"], [9, 3, 1, "", "check_config"], [9, 3, 1, "", "run"]], "bittensor.commands.misc": [[10, 2, 1, "", "UpdateCommand"], [10, 1, 1, "", "console"]], "bittensor.commands.misc.UpdateCommand": [[10, 3, 1, "", "add_args"], [10, 3, 1, "", "check_config"], [10, 3, 1, "", "run"]], "bittensor.commands.network": [[11, 1, 1, "", "HYPERPARAMS"], [11, 2, 1, "", "RegisterSubnetworkCommand"], [11, 2, 1, "", "SubnetGetHyperparamsCommand"], [11, 2, 1, "", "SubnetHyperparamsCommand"], [11, 2, 1, "", "SubnetListCommand"], [11, 2, 1, "", "SubnetLockCostCommand"], [11, 2, 1, "", "SubnetSudoCommand"], [11, 1, 1, "", "console"]], "bittensor.commands.network.RegisterSubnetworkCommand": [[11, 3, 1, "", "add_args"], [11, 3, 1, "", "check_config"], [11, 3, 1, "", "run"]], "bittensor.commands.network.SubnetGetHyperparamsCommand": [[11, 3, 1, "", "add_args"], [11, 3, 1, "", "check_config"], [11, 3, 1, "", "run"]], "bittensor.commands.network.SubnetHyperparamsCommand": [[11, 3, 1, "", "add_args"], [11, 3, 1, "", "check_config"], [11, 3, 1, "", "run"]], "bittensor.commands.network.SubnetListCommand": [[11, 3, 1, "", "add_args"], [11, 3, 1, "", "check_config"], [11, 3, 1, "", "run"]], "bittensor.commands.network.SubnetLockCostCommand": [[11, 3, 1, "", "add_args"], [11, 3, 1, "", "check_config"], [11, 3, 1, "", "run"]], "bittensor.commands.network.SubnetSudoCommand": [[11, 3, 1, "", "add_args"], [11, 3, 1, "", "check_config"], [11, 3, 1, "", "run"]], "bittensor.commands.overview": [[12, 2, 1, "", "OverviewCommand"], [12, 1, 1, "", "console"]], "bittensor.commands.overview.OverviewCommand": [[12, 3, 1, "", "_get_de_registered_stake_for_coldkey_wallet"], [12, 3, 1, "", "_get_neurons_for_netuid"], [12, 3, 1, "", "add_args"], [12, 3, 1, "", "check_config"], [12, 3, 1, "", "run"]], "bittensor.commands.register": [[13, 2, 1, "", "PowRegisterCommand"], [13, 2, 1, "", "RegisterCommand"], [13, 2, 1, "", "RunFaucetCommand"], [13, 2, 1, "", "SwapHotkeyCommand"], [13, 1, 1, "", "console"]], "bittensor.commands.register.PowRegisterCommand": [[13, 3, 1, "", "add_args"], [13, 3, 1, "", "check_config"], [13, 3, 1, "", "run"]], "bittensor.commands.register.RegisterCommand": [[13, 3, 1, "", "add_args"], [13, 3, 1, "", "check_config"], [13, 3, 1, "", "run"]], "bittensor.commands.register.RunFaucetCommand": [[13, 3, 1, "", "add_args"], [13, 3, 1, "", "check_config"], [13, 3, 1, "", "run"]], "bittensor.commands.register.SwapHotkeyCommand": [[13, 3, 1, "", "add_args"], [13, 3, 1, "", "check_config"], [13, 3, 1, "", "run"]], "bittensor.commands.root": [[14, 2, 1, "", "RootGetWeightsCommand"], [14, 2, 1, "", "RootList"], [14, 2, 1, "", "RootRegisterCommand"], [14, 2, 1, "", "RootSetBoostCommand"], [14, 2, 1, "", "RootSetSlashCommand"], [14, 2, 1, "", "RootSetWeightsCommand"], [14, 1, 1, "", "console"]], "bittensor.commands.root.RootGetWeightsCommand": [[14, 3, 1, "", "add_args"], [14, 3, 1, "", "check_config"], [14, 3, 1, "", "run"]], "bittensor.commands.root.RootList": [[14, 3, 1, "", "add_args"], [14, 3, 1, "", "check_config"], [14, 3, 1, "", "run"]], "bittensor.commands.root.RootRegisterCommand": [[14, 3, 1, "", "add_args"], [14, 3, 1, "", "check_config"], [14, 3, 1, "", "run"]], "bittensor.commands.root.RootSetBoostCommand": [[14, 3, 1, "", "add_args"], [14, 3, 1, "", "check_config"], [14, 3, 1, "", "run"]], "bittensor.commands.root.RootSetSlashCommand": [[14, 3, 1, "", "add_args"], [14, 3, 1, "", "check_config"], [14, 3, 1, "", "run"]], "bittensor.commands.root.RootSetWeightsCommand": [[14, 3, 1, "", "add_args"], [14, 3, 1, "", "check_config"], [14, 3, 1, "", "run"]], "bittensor.commands.senate": [[15, 2, 1, "", "ProposalsCommand"], [15, 2, 1, "", "SenateCommand"], [15, 2, 1, "", "SenateLeaveCommand"], [15, 2, 1, "", "SenateRegisterCommand"], [15, 2, 1, "", "ShowVotesCommand"], [15, 2, 1, "", "VoteCommand"], [15, 1, 1, "", "console"], [15, 7, 1, "", "display_votes"], [15, 7, 1, "", "format_call_data"]], "bittensor.commands.senate.ProposalsCommand": [[15, 3, 1, "", "add_args"], [15, 3, 1, "", "check_config"], [15, 3, 1, "", "run"]], "bittensor.commands.senate.SenateCommand": [[15, 3, 1, "", "add_args"], [15, 3, 1, "", "check_config"], [15, 3, 1, "", "run"]], "bittensor.commands.senate.SenateLeaveCommand": [[15, 3, 1, "", "add_args"], [15, 3, 1, "", "check_config"], [15, 3, 1, "", "run"]], "bittensor.commands.senate.SenateRegisterCommand": [[15, 3, 1, "", "add_args"], [15, 3, 1, "", "check_config"], [15, 3, 1, "", "run"]], "bittensor.commands.senate.ShowVotesCommand": [[15, 3, 1, "", "add_args"], [15, 3, 1, "", "check_config"], [15, 3, 1, "", "run"]], "bittensor.commands.senate.VoteCommand": [[15, 3, 1, "", "add_args"], [15, 3, 1, "", "check_config"], [15, 3, 1, "", "run"]], "bittensor.commands.stake": [[16, 2, 1, "", "StakeCommand"], [16, 2, 1, "", "StakeShow"], [16, 7, 1, "", "_get_coldkey_wallets_for_path"], [16, 7, 1, "", "_get_hotkey_wallets_for_wallet"], [16, 1, 1, "id0", "console"]], "bittensor.commands.stake.StakeCommand": [[16, 3, 1, "", "add_args"], [16, 3, 1, "", "check_config"], [16, 3, 1, "", "run"]], "bittensor.commands.stake.StakeShow": [[16, 3, 1, "", "add_args"], [16, 3, 1, "", "check_config"], [16, 3, 1, "", "run"]], "bittensor.commands.transfer": [[17, 2, 1, "", "TransferCommand"], [17, 1, 1, "", "console"]], "bittensor.commands.transfer.TransferCommand": [[17, 3, 1, "", "add_args"], [17, 3, 1, "", "check_config"], [17, 3, 1, "", "run"]], "bittensor.commands.unstake": [[18, 2, 1, "", "UnStakeCommand"], [18, 1, 1, "", "console"]], "bittensor.commands.unstake.UnStakeCommand": [[18, 3, 1, "", "add_args"], [18, 3, 1, "", "check_config"], [18, 3, 1, "", "run"]], "bittensor.commands.wallets": [[19, 2, 1, "", "NewColdkeyCommand"], [19, 2, 1, "", "NewHotkeyCommand"], [19, 2, 1, "", "RegenColdkeyCommand"], [19, 2, 1, "", "RegenColdkeypubCommand"], [19, 2, 1, "", "RegenHotkeyCommand"], [19, 2, 1, "", "UpdateWalletCommand"], [19, 2, 1, "", "WalletBalanceCommand"], [19, 2, 1, "", "WalletCreateCommand"], [19, 7, 1, "", "_get_coldkey_ss58_addresses_for_path"], [19, 7, 1, "", "_get_coldkey_wallets_for_path"]], "bittensor.commands.wallets.NewColdkeyCommand": [[19, 3, 1, "", "add_args"], [19, 3, 1, "", "check_config"], [19, 3, 1, "", "run"]], "bittensor.commands.wallets.NewHotkeyCommand": [[19, 3, 1, "", "add_args"], [19, 3, 1, "", "check_config"], [19, 3, 1, "", "run"]], "bittensor.commands.wallets.RegenColdkeyCommand": [[19, 3, 1, "", "add_args"], [19, 3, 1, "", "check_config"], [19, 3, 1, "", "run"]], "bittensor.commands.wallets.RegenColdkeypubCommand": [[19, 3, 1, "", "add_args"], [19, 3, 1, "", "check_config"], [19, 3, 1, "", "run"]], "bittensor.commands.wallets.RegenHotkeyCommand": [[19, 3, 1, "", "add_args"], [19, 3, 1, "", "check_config"], [19, 3, 1, "", "run"]], "bittensor.commands.wallets.UpdateWalletCommand": [[19, 3, 1, "", "add_args"], [19, 3, 1, "", "check_config"], [19, 3, 1, "", "run"]], "bittensor.commands.wallets.WalletBalanceCommand": [[19, 3, 1, "", "add_args"], [19, 3, 1, "", "check_config"], [19, 3, 1, "", "run"]], "bittensor.commands.wallets.WalletCreateCommand": [[19, 3, 1, "", "add_args"], [19, 3, 1, "", "check_config"], [19, 3, 1, "", "run"]], "bittensor.config": [[20, 2, 1, "", "DefaultConfig"], [20, 6, 1, "", "InvalidConfigFile"], [20, 1, 1, "", "T"], [36, 3, 1, "", "__deepcopy__"], [36, 4, 1, "", "__is_set"], [36, 3, 1, "", "__parse_args__"], [36, 3, 1, "", "__repr__"], [36, 3, 1, "", "__split_params__"], [36, 3, 1, "", "__str__"], [36, 3, 1, "", "_merge"], [36, 3, 1, "", "_remove_private_keys"], [20, 2, 1, "", "config"], [36, 3, 1, "", "copy"], [36, 3, 1, "", "is_set"], [36, 3, 1, "", "merge"], [36, 3, 1, "", "merge_all"], [36, 3, 1, "", "to_string"], [36, 3, 1, "", "update_with_kwargs"]], "bittensor.config.DefaultConfig": [[20, 3, 1, "", "default"]], "bittensor.config.config": [[20, 3, 1, "", "__deepcopy__"], [20, 4, 1, "", "__is_set"], [20, 3, 1, "", "__parse_args__"], [20, 3, 1, "", "__repr__"], [20, 3, 1, "", "__split_params__"], [20, 3, 1, "", "__str__"], [20, 3, 1, "", "_merge"], [20, 3, 1, "", "_remove_private_keys"], [20, 3, 1, "", "copy"], [20, 3, 1, "", "is_set"], [20, 3, 1, "", "merge"], [20, 3, 1, "", "merge_all"], [20, 3, 1, "", "to_string"], [20, 3, 1, "", "update_with_kwargs"]], "bittensor.dendrite": [[36, 3, 1, "", "__aenter__"], [36, 3, 1, "", "__aexit__"], [36, 3, 1, "", "__del__"], [36, 3, 1, "id63", "__repr__"], [36, 3, 1, "id62", "__str__"], [36, 3, 1, "", "_get_endpoint_url"], [36, 3, 1, "", "_handle_request_errors"], [36, 3, 1, "", "_log_incoming_response"], [36, 3, 1, "", "_log_outgoing_request"], [36, 3, 1, "id55", "aclose_session"], [36, 3, 1, "id58", "call"], [36, 3, 1, "id59", "call_stream"], [36, 3, 1, "id54", "close_session"], [21, 2, 1, "", "dendrite"], [36, 4, 1, "", "external_ip"], [36, 3, 1, "id57", "forward"], [36, 4, 1, "", "keypair"], [36, 3, 1, "id60", "preprocess_synapse_for_request"], [36, 3, 1, "id61", "process_server_response"], [36, 3, 1, "id56", "query"], [36, 5, 1, "", "session"], [36, 4, 1, "", "synapse_history"]], "bittensor.dendrite.dendrite": [[21, 3, 1, "", "__aenter__"], [21, 3, 1, "", "__aexit__"], [21, 3, 1, "", "__del__"], [21, 3, 1, "id9", "__repr__"], [21, 3, 1, "id8", "__str__"], [21, 3, 1, "", "_get_endpoint_url"], [21, 3, 1, "", "_handle_request_errors"], [21, 3, 1, "", "_log_incoming_response"], [21, 3, 1, "", "_log_outgoing_request"], [21, 3, 1, "id1", "aclose_session"], [21, 3, 1, "id4", "call"], [21, 3, 1, "id5", "call_stream"], [21, 3, 1, "id0", "close_session"], [21, 4, 1, "", "external_ip"], [21, 3, 1, "id3", "forward"], [21, 4, 1, "", "keypair"], [21, 3, 1, "id6", "preprocess_synapse_for_request"], [21, 3, 1, "id7", "process_server_response"], [21, 3, 1, "id2", "query"], [21, 5, 1, "", "session"], [21, 4, 1, "", "synapse_history"]], "bittensor.errors": [[22, 6, 1, "", "ChainConnectionError"], [22, 6, 1, "", "ChainError"], [22, 6, 1, "", "ChainQueryError"], [22, 6, 1, "", "ChainTransactionError"], [22, 6, 1, "", "IdentityError"], [22, 6, 1, "", "KeyFileError"], [22, 6, 1, "", "NominationError"], [22, 6, 1, "", "NotDelegateError"], [22, 6, 1, "", "NotRegisteredError"], [22, 6, 1, "", "RegistrationError"], [22, 6, 1, "", "StakeError"], [22, 6, 1, "", "TransferError"], [22, 6, 1, "", "UnstakeError"]], "bittensor.extrinsics": [[23, 0, 0, "-", "delegation"], [25, 0, 0, "-", "log_utilities"], [26, 0, 0, "-", "network"], [27, 0, 0, "-", "prometheus"], [28, 0, 0, "-", "registration"], [29, 0, 0, "-", "root"], [30, 0, 0, "-", "senate"], [31, 0, 0, "-", "serving"], [32, 0, 0, "-", "set_weights"], [33, 0, 0, "-", "staking"], [34, 0, 0, "-", "transfer"], [35, 0, 0, "-", "unstaking"]], "bittensor.extrinsics.delegation": [[23, 7, 1, "", "delegate_extrinsic"], [23, 1, 1, "", "logger"], [23, 7, 1, "", "nominate_extrinsic"], [23, 7, 1, "", "undelegate_extrinsic"]], "bittensor.extrinsics.log_utilities": [[25, 2, 1, "", "ValidatorLogger"], [25, 2, 1, "", "ValidatorPrometheus"]], "bittensor.extrinsics.log_utilities.ValidatorLogger": [[25, 3, 1, "", "print_console_metagraph_status"], [25, 3, 1, "", "print_console_query_summary"], [25, 3, 1, "", "print_console_subtensor_weight"], [25, 3, 1, "", "print_console_validator_identifier"], [25, 3, 1, "", "print_response_table"], [25, 3, 1, "", "print_stats_table"], [25, 3, 1, "", "print_synapse_table"], [25, 3, 1, "", "print_synergy_table"], [25, 3, 1, "", "print_weights_table"]], "bittensor.extrinsics.log_utilities.ValidatorPrometheus": [[25, 3, 1, "", "log_epoch_end"], [25, 3, 1, "", "log_epoch_start"], [25, 3, 1, "", "log_run_info"], [25, 3, 1, "", "log_step"]], "bittensor.extrinsics.network": [[26, 7, 1, "", "register_subnetwork_extrinsic"], [26, 7, 1, "", "set_hyperparameter_extrinsic"]], "bittensor.extrinsics.prometheus": [[27, 7, 1, "", "prometheus_extrinsic"]], "bittensor.extrinsics.registration": [[28, 6, 1, "", "MaxAttemptsException"], [28, 6, 1, "", "MaxSuccessException"], [28, 7, 1, "", "burned_register_extrinsic"], [28, 7, 1, "", "register_extrinsic"], [28, 7, 1, "", "run_faucet_extrinsic"], [28, 7, 1, "", "swap_hotkey_extrinsic"]], "bittensor.extrinsics.root": [[29, 1, 1, "", "logger"], [29, 7, 1, "", "root_register_extrinsic"], [29, 7, 1, "", "set_root_weights_extrinsic"]], "bittensor.extrinsics.senate": [[30, 7, 1, "", "leave_senate_extrinsic"], [30, 7, 1, "", "register_senate_extrinsic"], [30, 7, 1, "", "vote_senate_extrinsic"]], "bittensor.extrinsics.serving": [[31, 7, 1, "", "serve_axon_extrinsic"], [31, 7, 1, "", "serve_extrinsic"]], "bittensor.extrinsics.set_weights": [[32, 1, 1, "", "logger"], [32, 7, 1, "", "set_weights_extrinsic"]], "bittensor.extrinsics.staking": [[33, 7, 1, "", "__do_add_stake_single"], [33, 7, 1, "", "add_stake_extrinsic"], [33, 7, 1, "", "add_stake_multiple_extrinsic"]], "bittensor.extrinsics.transfer": [[34, 7, 1, "", "transfer_extrinsic"]], "bittensor.extrinsics.unstaking": [[35, 7, 1, "", "__do_remove_stake_single"], [35, 7, 1, "", "unstake_extrinsic"], [35, 7, 1, "", "unstake_multiple_extrinsic"]], "bittensor.keyfile": [[37, 2, 1, "", "Mockkeyfile"], [37, 1, 1, "", "NACL_SALT"], [36, 3, 1, "", "__repr__"], [36, 3, 1, "", "__str__"], [36, 3, 1, "", "_may_overwrite"], [36, 3, 1, "", "_read_keyfile_data_from_file"], [36, 3, 1, "", "_write_keyfile_data_to_file"], [37, 7, 1, "", "ask_password_to_encrypt"], [36, 3, 1, "", "check_and_update_encryption"], [36, 5, 1, "", "data"], [36, 3, 1, "", "decrypt"], [37, 7, 1, "", "decrypt_keyfile_data"], [37, 7, 1, "", "deserialize_keypair_from_keyfile_data"], [36, 3, 1, "", "encrypt"], [37, 7, 1, "", "encrypt_keyfile_data"], [36, 3, 1, "", "exists_on_device"], [37, 7, 1, "", "get_coldkey_password_from_environment"], [36, 3, 1, "", "get_keypair"], [36, 3, 1, "", "is_encrypted"], [36, 3, 1, "", "is_readable"], [36, 3, 1, "", "is_writable"], [37, 2, 1, "", "keyfile"], [36, 5, 1, "", "keyfile_data"], [37, 7, 1, "", "keyfile_data_encryption_method"], [37, 7, 1, "", "keyfile_data_is_encrypted"], [37, 7, 1, "", "keyfile_data_is_encrypted_ansible"], [37, 7, 1, "", "keyfile_data_is_encrypted_legacy"], [37, 7, 1, "", "keyfile_data_is_encrypted_nacl"], [36, 5, 1, "", "keypair"], [37, 7, 1, "", "legacy_encrypt_keyfile_data"], [36, 3, 1, "", "make_dirs"], [37, 7, 1, "", "serialized_keypair_to_keyfile_data"], [36, 3, 1, "", "set_keypair"], [37, 7, 1, "", "validate_password"]], "bittensor.keyfile.Mockkeyfile": [[37, 3, 1, "", "__repr__"], [37, 3, 1, "", "__str__"], [37, 3, 1, "", "check_and_update_encryption"], [37, 5, 1, "", "data"], [37, 3, 1, "", "decrypt"], [37, 3, 1, "", "encrypt"], [37, 3, 1, "", "exists_on_device"], [37, 3, 1, "", "get_keypair"], [37, 3, 1, "", "is_encrypted"], [37, 3, 1, "", "is_readable"], [37, 3, 1, "", "is_writable"], [37, 5, 1, "", "keypair"], [37, 3, 1, "", "make_dirs"], [37, 3, 1, "", "set_keypair"]], "bittensor.keyfile.keyfile": [[37, 3, 1, "", "__repr__"], [37, 3, 1, "", "__str__"], [37, 3, 1, "", "_may_overwrite"], [37, 3, 1, "", "_read_keyfile_data_from_file"], [37, 3, 1, "", "_write_keyfile_data_to_file"], [37, 3, 1, "", "check_and_update_encryption"], [37, 5, 1, "", "data"], [37, 3, 1, "", "decrypt"], [37, 3, 1, "", "encrypt"], [37, 3, 1, "", "exists_on_device"], [37, 3, 1, "", "get_keypair"], [37, 3, 1, "", "is_encrypted"], [37, 3, 1, "", "is_readable"], [37, 3, 1, "", "is_writable"], [37, 5, 1, "", "keyfile_data"], [37, 5, 1, "", "keypair"], [37, 3, 1, "", "make_dirs"], [37, 3, 1, "", "set_keypair"]], "bittensor.logging": [[36, 4, 1, "", "__debug_on__"], [36, 4, 1, "", "__file_sink__"], [36, 4, 1, "", "__has_been_inited__"], [36, 4, 1, "", "__std_sink__"], [36, 4, 1, "", "__trace_on__"], [36, 3, 1, "", "_format"], [36, 3, 1, "", "add_args"], [36, 3, 1, "", "check_config"], [36, 3, 1, "", "config"], [36, 3, 1, "", "debug"], [36, 3, 1, "", "error"], [36, 3, 1, "", "exception"], [36, 3, 1, "", "get_level"], [36, 3, 1, "", "help"], [36, 3, 1, "", "info"], [36, 3, 1, "", "log_filter"], [36, 3, 1, "", "log_formatter"], [36, 3, 1, "", "log_save_filter"], [36, 3, 1, "", "log_save_formatter"], [36, 3, 1, "", "set_debug"], [36, 3, 1, "", "set_trace"], [36, 3, 1, "", "success"], [36, 3, 1, "", "trace"], [36, 3, 1, "", "warning"]], "bittensor.metagraph": [[36, 5, 1, "", "B"], [36, 5, 1, "", "C"], [36, 5, 1, "", "D"], [36, 5, 1, "", "E"], [36, 5, 1, "", "I"], [36, 5, 1, "", "R"], [36, 5, 1, "", "S"], [36, 5, 1, "", "T"], [36, 5, 1, "", "Tv"], [36, 5, 1, "", "W"], [36, 3, 1, "", "__repr__"], [36, 3, 1, "", "__str__"], [36, 3, 1, "", "_assign_neurons"], [36, 3, 1, "", "_create_tensor"], [36, 3, 1, "", "_initialize_subtensor"], [36, 3, 1, "", "_process_root_weights"], [36, 3, 1, "", "_process_weights_or_bonds"], [36, 3, 1, "", "_set_metagraph_attributes"], [36, 3, 1, "", "_set_weights_and_bonds"], [36, 5, 1, "", "addresses"], [36, 5, 1, "", "coldkeys"], [38, 7, 1, "", "get_save_dir"], [36, 5, 1, "", "hotkeys"], [38, 7, 1, "", "latest_block_path"], [36, 3, 1, "", "load"], [36, 3, 1, "", "load_from_path"], [36, 3, 1, "", "metadata"], [38, 2, 1, "", "metagraph"], [36, 3, 1, "", "save"], [36, 3, 1, "", "sync"]], "bittensor.metagraph.metagraph": [[38, 5, 1, "", "B"], [38, 5, 1, "", "C"], [38, 5, 1, "", "D"], [38, 5, 1, "", "E"], [38, 5, 1, "", "I"], [38, 5, 1, "", "R"], [38, 5, 1, "", "S"], [38, 5, 1, "", "T"], [38, 5, 1, "", "Tv"], [38, 5, 1, "", "W"], [38, 3, 1, "", "__repr__"], [38, 3, 1, "", "__str__"], [38, 3, 1, "", "_assign_neurons"], [38, 3, 1, "", "_create_tensor"], [38, 3, 1, "", "_initialize_subtensor"], [38, 3, 1, "", "_process_root_weights"], [38, 3, 1, "", "_process_weights_or_bonds"], [38, 3, 1, "", "_set_metagraph_attributes"], [38, 3, 1, "", "_set_weights_and_bonds"], [38, 5, 1, "", "addresses"], [38, 5, 1, "", "coldkeys"], [38, 5, 1, "", "hotkeys"], [38, 3, 1, "", "load"], [38, 3, 1, "", "load_from_path"], [38, 3, 1, "", "metadata"], [38, 3, 1, "", "save"], [38, 3, 1, "", "sync"]], "bittensor.stream": [[39, 2, 1, "", "BTStreamingResponseModel"], [39, 2, 1, "", "StreamingSynapse"]], "bittensor.stream.BTStreamingResponseModel": [[39, 4, 1, "id0", "token_streamer"]], "bittensor.stream.StreamingSynapse": [[39, 2, 1, "", "BTStreamingResponse"], [39, 2, 1, "", "Config"], [39, 3, 1, "", "create_streaming_response"], [39, 3, 1, "", "extract_response_json"], [39, 3, 1, "", "process_streaming_response"]], "bittensor.stream.StreamingSynapse.BTStreamingResponse": [[39, 3, 1, "", "__call__"], [39, 3, 1, "", "stream_response"]], "bittensor.stream.StreamingSynapse.Config": [[39, 4, 1, "", "validate_assignment"]], "bittensor.subtensor": [[40, 2, 1, "", "ParamWithTypes"], [36, 3, 1, "", "__repr__"], [36, 3, 1, "", "__str__"], [36, 3, 1, "", "_do_associate_ips"], [36, 3, 1, "", "_do_burned_register"], [36, 3, 1, "", "_do_delegation"], [36, 3, 1, "", "_do_nominate"], [36, 3, 1, "", "_do_pow_register"], [36, 3, 1, "", "_do_root_register"], [36, 3, 1, "", "_do_serve_axon"], [36, 3, 1, "", "_do_serve_prometheus"], [36, 3, 1, "", "_do_set_weights"], [36, 3, 1, "", "_do_stake"], [36, 3, 1, "", "_do_swap_hotkey"], [36, 3, 1, "", "_do_transfer"], [36, 3, 1, "", "_do_undelegation"], [36, 3, 1, "", "_do_unstake"], [36, 3, 1, "", "_encode_params"], [36, 3, 1, "", "_null_neuron"], [36, 3, 1, "", "add_args"], [36, 3, 1, "", "add_stake"], [36, 3, 1, "", "add_stake_multiple"], [36, 3, 1, "", "associated_validator_ip_info"], [36, 5, 1, "", "block"], [36, 3, 1, "", "blocks_since_epoch"], [36, 3, 1, "", "bonds"], [36, 3, 1, "", "burn"], [36, 3, 1, "", "burned_register"], [36, 4, 1, "", "chain_endpoint"], [36, 3, 1, "", "config"], [36, 3, 1, "", "delegate"], [36, 3, 1, "", "determine_chain_endpoint_and_network"], [36, 3, 1, "", "difficulty"], [36, 3, 1, "", "does_hotkey_exist"], [36, 3, 1, "", "get_all_neurons_for_pubkey"], [36, 3, 1, "", "get_all_subnet_netuids"], [36, 3, 1, "", "get_all_subnets_info"], [36, 3, 1, "", "get_all_uids_for_hotkey"], [36, 3, 1, "", "get_axon_info"], [36, 3, 1, "", "get_balance"], [36, 3, 1, "", "get_balances"], [36, 3, 1, "", "get_block_hash"], [36, 3, 1, "", "get_current_block"], [36, 3, 1, "", "get_delegate_by_hotkey"], [36, 3, 1, "", "get_delegate_take"], [36, 3, 1, "", "get_delegated"], [36, 3, 1, "", "get_delegates"], [36, 3, 1, "", "get_emission_value_by_subnet"], [36, 3, 1, "", "get_existential_deposit"], [36, 3, 1, "", "get_hotkey_owner"], [36, 3, 1, "", "get_netuids_for_hotkey"], [36, 3, 1, "", "get_neuron_for_pubkey_and_subnet"], [36, 3, 1, "", "get_nominators_for_hotkey"], [36, 3, 1, "", "get_prometheus_info"], [36, 3, 1, "", "get_proposal_call_data"], [36, 3, 1, "", "get_proposal_hashes"], [36, 4, 1, "", "get_proposal_vote_data"], [36, 3, 1, "", "get_proposals"], [36, 3, 1, "", "get_senate_members"], [36, 3, 1, "", "get_stake"], [36, 3, 1, "", "get_stake_for_coldkey_and_hotkey"], [36, 3, 1, "", "get_stake_info_for_coldkey"], [36, 3, 1, "", "get_stake_info_for_coldkeys"], [36, 3, 1, "", "get_subnet_burn_cost"], [36, 3, 1, "", "get_subnet_connection_requirement"], [36, 3, 1, "", "get_subnet_connection_requirements"], [36, 3, 1, "", "get_subnet_hyperparameters"], [36, 3, 1, "", "get_subnet_info"], [36, 3, 1, "", "get_subnet_modality"], [36, 3, 1, "", "get_subnet_owner"], [36, 3, 1, "", "get_subnets"], [36, 3, 1, "", "get_total_stake_for_coldkey"], [36, 3, 1, "", "get_total_stake_for_hotkey"], [36, 3, 1, "", "get_total_subnets"], [36, 3, 1, "", "get_transfer_fee"], [36, 3, 1, "", "get_uid_for_hotkey_on_subnet"], [36, 3, 1, "", "get_vote_data"], [36, 3, 1, "", "help"], [36, 3, 1, "", "immunity_period"], [36, 3, 1, "", "incentive"], [36, 3, 1, "", "is_hotkey_delegate"], [36, 3, 1, "", "is_hotkey_registered"], [36, 3, 1, "", "is_hotkey_registered_any"], [36, 3, 1, "", "is_hotkey_registered_on_subnet"], [36, 3, 1, "", "is_senate_member"], [36, 3, 1, "", "kappa"], [36, 3, 1, "", "leave_senate"], [40, 1, 1, "", "logger"], [36, 3, 1, "", "max_allowed_validators"], [36, 3, 1, "", "max_n"], [36, 3, 1, "", "max_weight_limit"], [36, 3, 1, "", "metagraph"], [36, 3, 1, "", "min_allowed_weights"], [36, 4, 1, "", "network"], [36, 3, 1, "", "neuron_for_uid"], [36, 3, 1, "", "neuron_for_uid_lite"], [36, 3, 1, "", "neuron_for_wallet"], [36, 3, 1, "", "neuron_has_validator_permit"], [36, 3, 1, "", "neurons"], [36, 3, 1, "", "neurons_lite"], [36, 3, 1, "", "nominate"], [36, 3, 1, "", "query_constant"], [36, 3, 1, "", "query_identity"], [36, 3, 1, "", "query_map"], [36, 3, 1, "", "query_map_subtensor"], [36, 3, 1, "", "query_module"], [36, 3, 1, "", "query_runtime_api"], [36, 3, 1, "", "query_subtensor"], [36, 3, 1, "", "register"], [36, 3, 1, "", "register_senate"], [36, 3, 1, "", "register_subnetwork"], [36, 3, 1, "", "rho"], [36, 3, 1, "", "root_register"], [36, 3, 1, "", "root_set_weights"], [36, 3, 1, "", "run_faucet"], [36, 3, 1, "", "scaling_law_power"], [36, 3, 1, "", "serve"], [36, 3, 1, "", "serve_axon"], [36, 3, 1, "", "serve_prometheus"], [36, 3, 1, "", "serving_rate_limit"], [36, 3, 1, "", "set_hyperparameter"], [36, 3, 1, "", "set_weights"], [36, 3, 1, "", "setup_config"], [36, 3, 1, "", "state_call"], [36, 3, 1, "", "subnet_exists"], [36, 3, 1, "", "subnetwork_n"], [40, 2, 1, "", "subtensor"], [36, 3, 1, "", "swap_hotkey"], [36, 3, 1, "", "synergy_scaling_law_power"], [36, 3, 1, "", "tempo"], [36, 3, 1, "", "total_issuance"], [36, 3, 1, "", "total_stake"], [36, 3, 1, "", "transfer"], [36, 3, 1, "", "tx_rate_limit"], [36, 3, 1, "", "undelegate"], [36, 3, 1, "", "unstake"], [36, 3, 1, "", "unstake_multiple"], [36, 3, 1, "", "update_identity"], [36, 3, 1, "", "validator_batch_size"], [36, 3, 1, "", "validator_epoch_length"], [36, 3, 1, "", "validator_epochs_per_reset"], [36, 3, 1, "", "validator_exclude_quantile"], [36, 3, 1, "", "validator_logits_divergence"], [36, 3, 1, "", "validator_prune_len"], [36, 3, 1, "", "validator_sequence_length"], [36, 3, 1, "", "vote_senate"], [36, 3, 1, "", "weights"]], "bittensor.subtensor.ParamWithTypes": [[40, 4, 1, "", "name"], [40, 4, 1, "", "type"]], "bittensor.subtensor.subtensor": [[40, 3, 1, "", "__repr__"], [40, 3, 1, "", "__str__"], [40, 3, 1, "", "_do_associate_ips"], [40, 3, 1, "", "_do_burned_register"], [40, 3, 1, "", "_do_delegation"], [40, 3, 1, "", "_do_nominate"], [40, 3, 1, "", "_do_pow_register"], [40, 3, 1, "", "_do_root_register"], [40, 3, 1, "", "_do_serve_axon"], [40, 3, 1, "", "_do_serve_prometheus"], [40, 3, 1, "", "_do_set_weights"], [40, 3, 1, "", "_do_stake"], [40, 3, 1, "", "_do_swap_hotkey"], [40, 3, 1, "", "_do_transfer"], [40, 3, 1, "", "_do_undelegation"], [40, 3, 1, "", "_do_unstake"], [40, 3, 1, "", "_encode_params"], [40, 3, 1, "", "_null_neuron"], [40, 3, 1, "", "add_args"], [40, 3, 1, "", "add_stake"], [40, 3, 1, "", "add_stake_multiple"], [40, 3, 1, "", "associated_validator_ip_info"], [40, 5, 1, "", "block"], [40, 3, 1, "", "blocks_since_epoch"], [40, 3, 1, "", "bonds"], [40, 3, 1, "", "burn"], [40, 3, 1, "", "burned_register"], [40, 4, 1, "", "chain_endpoint"], [40, 3, 1, "", "config"], [40, 3, 1, "", "delegate"], [40, 3, 1, "", "determine_chain_endpoint_and_network"], [40, 3, 1, "", "difficulty"], [40, 3, 1, "", "does_hotkey_exist"], [40, 3, 1, "", "get_all_neurons_for_pubkey"], [40, 3, 1, "", "get_all_subnet_netuids"], [40, 3, 1, "", "get_all_subnets_info"], [40, 3, 1, "", "get_all_uids_for_hotkey"], [40, 3, 1, "", "get_axon_info"], [40, 3, 1, "", "get_balance"], [40, 3, 1, "", "get_balances"], [40, 3, 1, "", "get_block_hash"], [40, 3, 1, "", "get_current_block"], [40, 3, 1, "", "get_delegate_by_hotkey"], [40, 3, 1, "", "get_delegate_take"], [40, 3, 1, "", "get_delegated"], [40, 3, 1, "", "get_delegates"], [40, 3, 1, "", "get_emission_value_by_subnet"], [40, 3, 1, "", "get_existential_deposit"], [40, 3, 1, "", "get_hotkey_owner"], [40, 3, 1, "", "get_netuids_for_hotkey"], [40, 3, 1, "", "get_neuron_for_pubkey_and_subnet"], [40, 3, 1, "", "get_nominators_for_hotkey"], [40, 3, 1, "", "get_prometheus_info"], [40, 3, 1, "", "get_proposal_call_data"], [40, 3, 1, "", "get_proposal_hashes"], [40, 4, 1, "", "get_proposal_vote_data"], [40, 3, 1, "", "get_proposals"], [40, 3, 1, "", "get_senate_members"], [40, 3, 1, "", "get_stake"], [40, 3, 1, "", "get_stake_for_coldkey_and_hotkey"], [40, 3, 1, "", "get_stake_info_for_coldkey"], [40, 3, 1, "", "get_stake_info_for_coldkeys"], [40, 3, 1, "", "get_subnet_burn_cost"], [40, 3, 1, "", "get_subnet_connection_requirement"], [40, 3, 1, "", "get_subnet_connection_requirements"], [40, 3, 1, "", "get_subnet_hyperparameters"], [40, 3, 1, "", "get_subnet_info"], [40, 3, 1, "", "get_subnet_modality"], [40, 3, 1, "", "get_subnet_owner"], [40, 3, 1, "", "get_subnets"], [40, 3, 1, "", "get_total_stake_for_coldkey"], [40, 3, 1, "", "get_total_stake_for_hotkey"], [40, 3, 1, "", "get_total_subnets"], [40, 3, 1, "", "get_transfer_fee"], [40, 3, 1, "", "get_uid_for_hotkey_on_subnet"], [40, 3, 1, "", "get_vote_data"], [40, 3, 1, "", "help"], [40, 3, 1, "", "immunity_period"], [40, 3, 1, "", "incentive"], [40, 3, 1, "", "is_hotkey_delegate"], [40, 3, 1, "", "is_hotkey_registered"], [40, 3, 1, "", "is_hotkey_registered_any"], [40, 3, 1, "", "is_hotkey_registered_on_subnet"], [40, 3, 1, "", "is_senate_member"], [40, 3, 1, "", "kappa"], [40, 3, 1, "", "leave_senate"], [40, 3, 1, "", "max_allowed_validators"], [40, 3, 1, "", "max_n"], [40, 3, 1, "", "max_weight_limit"], [40, 3, 1, "", "metagraph"], [40, 3, 1, "", "min_allowed_weights"], [40, 4, 1, "", "network"], [40, 3, 1, "", "neuron_for_uid"], [40, 3, 1, "", "neuron_for_uid_lite"], [40, 3, 1, "", "neuron_for_wallet"], [40, 3, 1, "", "neuron_has_validator_permit"], [40, 3, 1, "", "neurons"], [40, 3, 1, "", "neurons_lite"], [40, 3, 1, "", "nominate"], [40, 3, 1, "", "query_constant"], [40, 3, 1, "", "query_identity"], [40, 3, 1, "", "query_map"], [40, 3, 1, "", "query_map_subtensor"], [40, 3, 1, "", "query_module"], [40, 3, 1, "", "query_runtime_api"], [40, 3, 1, "", "query_subtensor"], [40, 3, 1, "", "register"], [40, 3, 1, "", "register_senate"], [40, 3, 1, "", "register_subnetwork"], [40, 3, 1, "", "rho"], [40, 3, 1, "", "root_register"], [40, 3, 1, "", "root_set_weights"], [40, 3, 1, "", "run_faucet"], [40, 3, 1, "", "scaling_law_power"], [40, 3, 1, "", "serve"], [40, 3, 1, "", "serve_axon"], [40, 3, 1, "", "serve_prometheus"], [40, 3, 1, "", "serving_rate_limit"], [40, 3, 1, "", "set_hyperparameter"], [40, 3, 1, "", "set_weights"], [40, 3, 1, "", "setup_config"], [40, 3, 1, "", "state_call"], [40, 3, 1, "", "subnet_exists"], [40, 3, 1, "", "subnetwork_n"], [40, 3, 1, "", "swap_hotkey"], [40, 3, 1, "", "synergy_scaling_law_power"], [40, 3, 1, "", "tempo"], [40, 3, 1, "", "total_issuance"], [40, 3, 1, "", "total_stake"], [40, 3, 1, "", "transfer"], [40, 3, 1, "", "tx_rate_limit"], [40, 3, 1, "", "undelegate"], [40, 3, 1, "", "unstake"], [40, 3, 1, "", "unstake_multiple"], [40, 3, 1, "", "update_identity"], [40, 3, 1, "", "validator_batch_size"], [40, 3, 1, "", "validator_epoch_length"], [40, 3, 1, "", "validator_epochs_per_reset"], [40, 3, 1, "", "validator_exclude_quantile"], [40, 3, 1, "", "validator_logits_divergence"], [40, 3, 1, "", "validator_prune_len"], [40, 3, 1, "", "validator_sequence_length"], [40, 3, 1, "", "vote_senate"], [40, 3, 1, "", "weights"]], "bittensor.synapse": [[41, 2, 1, "", "Synapse"], [41, 2, 1, "", "TerminalInfo"], [41, 7, 1, "", "cast_float"], [41, 7, 1, "", "cast_int"], [41, 7, 1, "", "get_size"]], "bittensor.synapse.Synapse": [[41, 2, 1, "", "Config"], [41, 3, 1, "id20", "__setattr__"], [41, 4, 1, "", "_extract_header_size"], [41, 4, 1, "", "_extract_timeout"], [41, 4, 1, "", "_extract_total_size"], [41, 4, 1, "id16", "axon"], [41, 5, 1, "id10", "body_hash"], [41, 4, 1, "id17", "computed_body_hash"], [41, 4, 1, "id15", "dendrite"], [41, 3, 1, "id19", "deserialize"], [41, 5, 1, "", "failed_verification"], [41, 3, 1, "id24", "from_headers"], [41, 3, 1, "id21", "get_total_size"], [41, 4, 1, "id14", "header_size"], [41, 5, 1, "", "is_blacklist"], [41, 5, 1, "", "is_failure"], [41, 5, 1, "", "is_success"], [41, 5, 1, "", "is_timeout"], [41, 4, 1, "id11", "name"], [41, 3, 1, "id23", "parse_headers_to_inputs"], [41, 4, 1, "id18", "required_hash_fields"], [41, 3, 1, "", "set_name_type"], [41, 4, 1, "id12", "timeout"], [41, 3, 1, "id22", "to_headers"], [41, 4, 1, "id13", "total_size"]], "bittensor.synapse.Synapse.Config": [[41, 4, 1, "", "validate_assignment"]], "bittensor.synapse.TerminalInfo": [[41, 2, 1, "", "Config"], [41, 4, 1, "", "_extract_nonce"], [41, 4, 1, "", "_extract_port"], [41, 4, 1, "", "_extract_process_time"], [41, 4, 1, "", "_extract_status_code"], [41, 4, 1, "", "_extract_version"], [41, 4, 1, "id8", "hotkey"], [41, 4, 1, "id3", "ip"], [41, 4, 1, "id6", "nonce"], [41, 4, 1, "id4", "port"], [41, 4, 1, "id2", "process_time"], [41, 4, 1, "id9", "signature"], [41, 4, 1, "id0", "status_code"], [41, 4, 1, "id1", "status_message"], [41, 4, 1, "id7", "uuid"], [41, 4, 1, "id5", "version"]], "bittensor.synapse.TerminalInfo.Config": [[41, 4, 1, "", "validate_assignment"]], "bittensor.tensor": [[42, 1, 1, "", "TORCH_DTYPES"], [42, 2, 1, "", "Tensor"], [42, 7, 1, "", "cast_dtype"], [42, 7, 1, "", "cast_shape"], [42, 2, 1, "", "tensor"]], "bittensor.tensor.Tensor": [[42, 2, 1, "", "Config"], [42, 4, 1, "", "_extract_dtype"], [42, 4, 1, "", "_extract_shape"], [42, 4, 1, "id0", "buffer"], [42, 3, 1, "", "deserialize"], [42, 4, 1, "id1", "dtype"], [42, 3, 1, "", "numpy"], [42, 3, 1, "", "serialize"], [42, 4, 1, "id2", "shape"], [42, 3, 1, "", "tensor"], [42, 3, 1, "", "tolist"]], "bittensor.tensor.Tensor.Config": [[42, 4, 1, "", "validate_assignment"]], "bittensor.threadpool": [[43, 6, 1, "", "BrokenThreadPool"], [43, 1, 1, "", "NULL_ENTRY"], [43, 2, 1, "", "PriorityThreadPoolExecutor"], [43, 2, 1, "", "_WorkItem"], [43, 1, 1, "", "__author__"], [43, 1, 1, "", "_shutdown"], [43, 1, 1, "", "_threads_queues"], [43, 7, 1, "", "_worker"]], "bittensor.threadpool.PriorityThreadPoolExecutor": [[43, 3, 1, "", "_adjust_thread_count"], [43, 4, 1, "", "_counter"], [43, 3, 1, "", "_initializer_failed"], [43, 3, 1, "", "add_args"], [43, 3, 1, "", "config"], [43, 5, 1, "", "is_empty"], [43, 3, 1, "", "shutdown"], [43, 3, 1, "", "submit"]], "bittensor.threadpool._WorkItem": [[43, 3, 1, "", "run"]], "bittensor.types": [[44, 2, 1, "", "AxonServeCallParams"], [44, 2, 1, "", "PrometheusServeCallParams"]], "bittensor.types.AxonServeCallParams": [[44, 4, 1, "", "ip"], [44, 4, 1, "", "ip_type"], [44, 4, 1, "", "netuid"], [44, 4, 1, "", "port"], [44, 4, 1, "", "version"]], "bittensor.types.PrometheusServeCallParams": [[44, 4, 1, "", "ip"], [44, 4, 1, "", "ip_type"], [44, 4, 1, "", "netuid"], [44, 4, 1, "", "port"], [44, 4, 1, "", "version"]], "bittensor.wallet": [[36, 3, 1, "", "__repr__"], [36, 3, 1, "", "__str__"], [36, 3, 1, "", "add_args"], [36, 5, 1, "", "coldkey"], [36, 5, 1, "", "coldkey_file"], [36, 5, 1, "", "coldkeypub"], [36, 5, 1, "", "coldkeypub_file"], [36, 3, 1, "", "config"], [36, 3, 1, "", "create"], [36, 3, 1, "", "create_coldkey_from_uri"], [36, 3, 1, "", "create_hotkey_from_uri"], [36, 3, 1, "", "create_if_non_existent"], [36, 3, 1, "", "create_new_coldkey"], [36, 3, 1, "", "create_new_hotkey"], [45, 7, 1, "", "display_mnemonic_msg"], [36, 3, 1, "", "get_coldkey"], [36, 3, 1, "", "get_coldkeypub"], [36, 3, 1, "", "get_hotkey"], [36, 3, 1, "", "help"], [36, 5, 1, "", "hotkey"], [36, 5, 1, "", "hotkey_file"], [36, 4, 1, "", "hotkey_str"], [36, 4, 1, "", "name"], [36, 3, 1, "", "new_coldkey"], [36, 3, 1, "", "new_hotkey"], [36, 4, 1, "", "path"], [36, 3, 1, "", "recreate"], [36, 4, 1, "", "regen_coldkey"], [36, 4, 1, "", "regen_coldkeypub"], [36, 4, 1, "", "regen_hotkey"], [36, 3, 1, "", "regenerate_coldkey"], [36, 3, 1, "", "regenerate_coldkeypub"], [36, 3, 1, "", "regenerate_hotkey"], [36, 3, 1, "", "set_coldkey"], [36, 3, 1, "", "set_coldkeypub"], [36, 3, 1, "", "set_hotkey"], [45, 2, 1, "", "wallet"]], "bittensor.wallet.wallet": [[45, 3, 1, "", "__repr__"], [45, 3, 1, "", "__str__"], [45, 3, 1, "", "add_args"], [45, 5, 1, "", "coldkey"], [45, 5, 1, "", "coldkey_file"], [45, 5, 1, "", "coldkeypub"], [45, 5, 1, "", "coldkeypub_file"], [45, 3, 1, "", "config"], [45, 3, 1, "", "create"], [45, 3, 1, "", "create_coldkey_from_uri"], [45, 3, 1, "", "create_hotkey_from_uri"], [45, 3, 1, "", "create_if_non_existent"], [45, 3, 1, "", "create_new_coldkey"], [45, 3, 1, "", "create_new_hotkey"], [45, 3, 1, "", "get_coldkey"], [45, 3, 1, "", "get_coldkeypub"], [45, 3, 1, "", "get_hotkey"], [45, 3, 1, "", "help"], [45, 5, 1, "", "hotkey"], [45, 5, 1, "", "hotkey_file"], [45, 4, 1, "", "hotkey_str"], [45, 4, 1, "", "name"], [45, 3, 1, "", "new_coldkey"], [45, 3, 1, "", "new_hotkey"], [45, 4, 1, "", "path"], [45, 3, 1, "", "recreate"], [45, 4, 1, "", "regen_coldkey"], [45, 4, 1, "", "regen_coldkeypub"], [45, 4, 1, "", "regen_hotkey"], [45, 3, 1, "", "regenerate_coldkey"], [45, 3, 1, "", "regenerate_coldkeypub"], [45, 3, 1, "", "regenerate_hotkey"], [45, 3, 1, "", "set_coldkey"], [45, 3, 1, "", "set_coldkeypub"], [45, 3, 1, "", "set_hotkey"]], "miner": [[47, 2, 1, "", "OpenAIMiner"], [47, 1, 1, "", "openai_api_key"]], "miner.OpenAIMiner": [[47, 3, 1, "", "add_args"], [47, 3, 1, "", "config"], [47, 3, 1, "", "prompt"]], "neurons": [[49, 0, 0, "-", "validators"]], "neurons.validators": [[50, 0, 0, "-", "validator"]], "neurons.validators.validator": [[50, 7, 1, "", "main"], [50, 2, 1, "", "neuron"]], "neurons.validators.validator.neuron": [[50, 3, 1, "", "add_args"], [50, 3, 1, "", "check_config"], [50, 3, 1, "", "config"], [50, 4, 1, "", "metagraph"], [50, 3, 1, "", "run"], [50, 4, 1, "", "subtensor"], [50, 4, 1, "", "wallet"]], "prompting": [[58, 1, 1, "", "__spec_version__"], [58, 1, 1, "", "__version__"], [53, 0, 0, "-", "baseminer"], [59, 0, 0, "-", "protocol"], [66, 0, 0, "-", "validators"], [58, 1, 1, "", "version_split"]], "prompting.baseminer": [[51, 0, 0, "-", "blacklist"], [52, 0, 0, "-", "config"], [54, 0, 0, "-", "miner"], [55, 0, 0, "-", "priority"], [56, 0, 0, "-", "run"], [57, 0, 0, "-", "set_weights"]], "prompting.baseminer.blacklist": [[51, 7, 1, "", "blacklist"], [51, 7, 1, "", "default_blacklist"], [51, 7, 1, "", "is_prompt_in_cache"]], "prompting.baseminer.config": [[52, 7, 1, "", "check_config"], [52, 7, 1, "", "get_config"]], "prompting.baseminer.miner": [[54, 2, 1, "", "Miner"]], "prompting.baseminer.miner.Miner": [[54, 3, 1, "", "__enter__"], [54, 3, 1, "", "__exit__"], [54, 3, 1, "", "_prompt"], [54, 3, 1, "", "add_args"], [54, 3, 1, "", "blacklist"], [54, 3, 1, "", "config"], [54, 3, 1, "", "priority"], [54, 3, 1, "", "prompt"], [54, 3, 1, "", "run"], [54, 3, 1, "", "run_in_background_thread"], [54, 3, 1, "", "stop_run_thread"]], "prompting.baseminer.priority": [[55, 7, 1, "", "default_priority"], [55, 7, 1, "", "priority"], [55, 7, 1, "", "record_request_timestamps"]], "prompting.baseminer.run": [[56, 7, 1, "", "run"]], "prompting.baseminer.set_weights": [[57, 7, 1, "", "set_weights"]], "prompting.protocol": [[59, 2, 1, "", "Prompting"], [59, 2, 1, "", "StreamPrompting"]], "prompting.protocol.Prompting": [[59, 2, 1, "", "Config"], [59, 4, 1, "id10", "completion"], [59, 3, 1, "id11", "deserialize"], [59, 4, 1, "id9", "messages"], [59, 4, 1, "", "required_hash_fields"], [59, 4, 1, "id0", "roles"]], "prompting.protocol.Prompting.Config": [[59, 4, 1, "", "validate_assignment"]], "prompting.protocol.StreamPrompting": [[59, 4, 1, "", "completion"], [59, 3, 1, "", "deserialize"], [59, 3, 1, "", "extract_response_json"], [59, 4, 1, "", "messages"], [59, 3, 1, "", "process_streaming_response"], [59, 4, 1, "", "required_hash_fields"], [59, 4, 1, "", "roles"]], "prompting.validators": [[66, 1, 1, "", "__spec_version__"], [66, 1, 1, "", "__version__"], [60, 0, 0, "-", "config"], [61, 0, 0, "-", "criteria"], [62, 0, 0, "-", "dataset"], [63, 0, 0, "-", "event"], [64, 0, 0, "-", "forward"], [65, 0, 0, "-", "gating"], [67, 0, 0, "-", "misc"], [69, 0, 0, "-", "penalty"], [73, 0, 0, "-", "prompts"], [79, 0, 0, "-", "reward"], [86, 0, 0, "-", "tasks"], [66, 1, 1, "", "version_split"], [87, 0, 0, "-", "weights"]], "prompting.validators.config": [[60, 7, 1, "", "add_args"], [60, 7, 1, "", "check_config"], [60, 7, 1, "", "config"]], "prompting.validators.criteria": [[61, 2, 1, "", "ContentMatchTypeEnum"], [61, 2, 1, "", "LayoutMatchTypeEnum"], [61, 2, 1, "", "MatchContentCriteria"], [61, 2, 1, "", "MatchLayoutCriteria"], [61, 2, 1, "", "MatchLengthCriteria"], [61, 2, 1, "", "SimpleResponseLayoutCriteria"], [61, 2, 1, "", "TaskCriterion"], [61, 2, 1, "", "TextLengthUnitEnum"]], "prompting.validators.criteria.ContentMatchTypeEnum": [[61, 4, 1, "", "ENDS_WITH"], [61, 4, 1, "", "INCLUDES"], [61, 4, 1, "", "STARTS_WITH"]], "prompting.validators.criteria.LayoutMatchTypeEnum": [[61, 4, 1, "", "NUMBERED_LIST"], [61, 4, 1, "", "UNORDERED_LIST"]], "prompting.validators.criteria.MatchContentCriteria": [[61, 3, 1, "", "__post_init__"], [61, 3, 1, "", "_get_regex_pattern"], [61, 3, 1, "", "compose_text"], [61, 4, 1, "", "contentMatchType"], [61, 4, 1, "", "default_text"], [61, 3, 1, "", "evaluate"], [61, 4, 1, "", "n_words"], [61, 4, 1, "", "negate_match"], [61, 4, 1, "id5", "penalty"], [61, 4, 1, "", "sampled_words"], [61, 4, 1, "id4", "text"], [61, 4, 1, "", "words_array"]], "prompting.validators.criteria.MatchLayoutCriteria": [[61, 3, 1, "", "compose_text"], [61, 3, 1, "", "evaluate"], [61, 4, 1, "", "layout_type"], [61, 4, 1, "id8", "penalty"], [61, 4, 1, "id9", "text"]], "prompting.validators.criteria.MatchLengthCriteria": [[61, 3, 1, "", "_count_sentences"], [61, 3, 1, "", "_get_completion_length"], [61, 3, 1, "", "compose_text"], [61, 3, 1, "", "evaluate"], [61, 4, 1, "id3", "penalty"], [61, 4, 1, "", "target_length"], [61, 4, 1, "id2", "text"], [61, 4, 1, "", "unit"]], "prompting.validators.criteria.SimpleResponseLayoutCriteria": [[61, 3, 1, "", "compose_text"], [61, 3, 1, "", "evaluate"], [61, 4, 1, "id6", "penalty"], [61, 4, 1, "id7", "text"]], "prompting.validators.criteria.TaskCriterion": [[61, 3, 1, "", "compose_text"], [61, 3, 1, "", "evaluate"], [61, 4, 1, "id1", "penalty"], [61, 4, 1, "id0", "text"]], "prompting.validators.criteria.TextLengthUnitEnum": [[61, 4, 1, "", "CHARACTERS"], [61, 4, 1, "", "PARAGRAPHS"], [61, 4, 1, "", "SENTENCES"], [61, 4, 1, "", "WORDS"]], "prompting.validators.dataset": [[62, 2, 1, "", "Dataset"], [62, 2, 1, "", "MockDataset"]], "prompting.validators.dataset.Dataset": [[62, 3, 1, "", "__next__"]], "prompting.validators.dataset.MockDataset": [[62, 3, 1, "", "__next__"]], "prompting.validators.event": [[63, 2, 1, "", "EventSchema"]], "prompting.validators.event.EventSchema": [[63, 4, 1, "", "best"], [63, 4, 1, "", "blacklist_filter"], [63, 4, 1, "", "blacklist_filter_matched_ngram"], [63, 4, 1, "", "blacklist_filter_significance_score"], [63, 4, 1, "", "block"], [63, 4, 1, "", "completion_status_codes"], [63, 4, 1, "", "completion_status_messages"], [63, 4, 1, "", "completion_times"], [63, 4, 1, "", "completions"], [63, 4, 1, "", "dahoas_reward_model"], [63, 4, 1, "", "dahoas_reward_model_normalized"], [63, 4, 1, "", "diversity_reward_model"], [63, 4, 1, "", "diversity_reward_model_batch"], [63, 4, 1, "", "diversity_reward_model_historic"], [63, 4, 1, "", "diversity_reward_model_normalized"], [63, 4, 1, "", "dpo_reward_model"], [63, 4, 1, "", "dpo_reward_model_normalized"], [63, 3, 1, "", "from_dict"], [63, 4, 1, "", "gating_loss"], [63, 4, 1, "", "keyword_match_penalty_adjusted"], [63, 4, 1, "", "keyword_match_penalty_applied"], [63, 4, 1, "", "keyword_match_penalty_raw"], [63, 4, 1, "", "name"], [63, 4, 1, "", "nsfw_filter"], [63, 4, 1, "", "nsfw_filter_normalized"], [63, 4, 1, "", "nsfw_filter_score"], [63, 4, 1, "", "prompt"], [63, 4, 1, "", "prompt_reward_model"], [63, 4, 1, "", "prompt_reward_model_normalized"], [63, 4, 1, "", "reciprocate_reward_model"], [63, 4, 1, "", "reciprocate_reward_model_normalized"], [63, 4, 1, "", "relevance_filter"], [63, 4, 1, "", "relevance_filter_bert_score"], [63, 4, 1, "", "relevance_filter_mpnet_score"], [63, 4, 1, "", "relevance_filter_normalized"], [63, 4, 1, "", "rewards"], [63, 4, 1, "", "rlhf_reward_model"], [63, 4, 1, "", "rlhf_reward_model_normalized"], [63, 4, 1, "", "sentence_match_penalty_adjusted"], [63, 4, 1, "", "sentence_match_penalty_applied"], [63, 4, 1, "", "sentence_match_penalty_raw"], [63, 4, 1, "", "set_weights"], [63, 4, 1, "", "step_length"], [63, 4, 1, "", "task_type"], [63, 4, 1, "", "task_validation_penalty_adjusted"], [63, 4, 1, "", "task_validation_penalty_applied"], [63, 4, 1, "", "task_validation_penalty_raw"], [63, 4, 1, "", "uids"]], "prompting.validators.forward": [[64, 7, 1, "", "forward"], [64, 7, 1, "", "get_random_uids"], [64, 7, 1, "", "run_step"]], "prompting.validators.gating": [[65, 2, 1, "", "BaseGatingModel"], [65, 2, 1, "", "GatingModel"], [65, 2, 1, "", "SentenceEmbedGatingModel"]], "prompting.validators.gating.BaseGatingModel": [[65, 3, 1, "", "add_args"], [65, 3, 1, "", "backward"], [65, 3, 1, "", "check_config"], [65, 3, 1, "", "config"], [65, 3, 1, "", "forward"], [65, 3, 1, "", "resync"]], "prompting.validators.gating.GatingModel": [[65, 3, 1, "", "backward"], [65, 3, 1, "", "forward"], [65, 3, 1, "", "resync"]], "prompting.validators.gating.SentenceEmbedGatingModel": [[65, 3, 1, "", "backward"], [65, 3, 1, "", "forward"], [65, 3, 1, "", "mean_pooling"], [65, 3, 1, "", "resync"]], "prompting.validators.misc": [[67, 7, 1, "", "_ttl_hash_gen"], [67, 7, 1, "", "ttl_cache"], [67, 7, 1, "", "ttl_get_block"]], "prompting.validators.penalty": [[69, 2, 1, "", "BasePenaltyModel"], [69, 2, 1, "", "ContentMatchPenaltyModel"], [69, 2, 1, "", "KeywordMatchPenaltyModel"], [69, 2, 1, "", "PenaltyModelType"], [69, 2, 1, "", "TaskValidationPenaltyModel"], [68, 0, 0, "-", "content_match"], [70, 0, 0, "-", "keyword_match"], [71, 0, 0, "-", "penalty"], [72, 0, 0, "-", "task_validation"]], "prompting.validators.penalty.BasePenaltyModel": [[69, 3, 1, "", "__repr__"], [69, 3, 1, "", "__str__"], [69, 3, 1, "", "apply_penalties"], [69, 3, 1, "", "calculate_penalties"], [69, 5, 1, "", "name"]], "prompting.validators.penalty.ContentMatchPenaltyModel": [[69, 3, 1, "", "calculate_penalties"], [69, 5, 1, "", "name"]], "prompting.validators.penalty.KeywordMatchPenaltyModel": [[69, 3, 1, "", "calculate_penalties"], [69, 3, 1, "", "check_exploits_keywords"], [69, 5, 1, "", "name"]], "prompting.validators.penalty.PenaltyModelType": [[69, 4, 1, "", "keyword_match_penalty"], [69, 4, 1, "", "sentence_match_penalty"], [69, 4, 1, "", "task_validation_penalty"]], "prompting.validators.penalty.TaskValidationPenaltyModel": [[69, 3, 1, "", "calculate_penalties"], [69, 5, 1, "", "name"]], "prompting.validators.penalty.content_match": [[68, 2, 1, "", "ContentMatchPenaltyModel"]], "prompting.validators.penalty.content_match.ContentMatchPenaltyModel": [[68, 3, 1, "", "calculate_penalties"], [68, 5, 1, "", "name"]], "prompting.validators.penalty.keyword_match": [[70, 2, 1, "", "KeywordMatchPenaltyModel"]], "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel": [[70, 3, 1, "", "calculate_penalties"], [70, 3, 1, "", "check_exploits_keywords"], [70, 5, 1, "", "name"]], "prompting.validators.penalty.penalty": [[71, 2, 1, "", "BasePenaltyModel"], [71, 2, 1, "", "PenaltyModelType"]], "prompting.validators.penalty.penalty.BasePenaltyModel": [[71, 3, 1, "", "__repr__"], [71, 3, 1, "", "__str__"], [71, 3, 1, "", "apply_penalties"], [71, 3, 1, "", "calculate_penalties"], [71, 5, 1, "", "name"]], "prompting.validators.penalty.penalty.PenaltyModelType": [[71, 4, 1, "", "keyword_match_penalty"], [71, 4, 1, "", "sentence_match_penalty"], [71, 4, 1, "", "task_validation_penalty"]], "prompting.validators.penalty.task_validation": [[72, 2, 1, "", "TaskValidationPenaltyModel"]], "prompting.validators.penalty.task_validation.TaskValidationPenaltyModel": [[72, 3, 1, "", "calculate_penalties"], [72, 5, 1, "", "name"]], "prompting.validators.prompts": [[73, 2, 1, "", "AnswerPrompt"], [73, 2, 1, "", "AugmentPrompt"], [73, 2, 1, "", "BasePrompt"], [73, 2, 1, "", "FirewallPrompt"], [73, 2, 1, "", "FollowupPrompt"], [73, 2, 1, "", "ScoringPrompt"], [73, 7, 1, "", "answer_prompt"], [73, 1, 1, "", "answer_scoring_template"], [73, 7, 1, "", "augment_prompt"], [73, 1, 1, "", "augment_request_template"], [73, 1, 1, "", "augment_scoring_template"], [73, 7, 1, "", "find_unique_tags"], [73, 1, 1, "", "firewall_template"], [73, 7, 1, "", "followup_prompt"], [73, 1, 1, "", "followup_request_template"], [73, 1, 1, "", "followup_scoring_template"]], "prompting.validators.prompts.BasePrompt": [[73, 3, 1, "", "extract"], [73, 3, 1, "", "matches_template"], [73, 3, 1, "", "text"]], "prompting.validators.prompts.FirewallPrompt": [[73, 3, 1, "", "detected"], [73, 3, 1, "", "mock_response"]], "prompting.validators.prompts.ScoringPrompt": [[73, 3, 1, "", "extract_score"], [73, 3, 1, "", "mock_response"]], "prompting.validators.reward": [[79, 2, 1, "", "BaseRewardModel"], [79, 2, 1, "", "Blacklist"], [79, 2, 1, "", "DahoasRewardModel"], [79, 2, 1, "", "DefaultRewardFrameworkConfig"], [79, 2, 1, "", "DirectPreferenceRewardModel"], [79, 2, 1, "", "DiversityRewardModel"], [79, 2, 1, "", "NSFWRewardModel"], [79, 2, 1, "", "OpenAssistantRewardModel"], [79, 2, 1, "", "PromptRewardModel"], [79, 2, 1, "", "ReciprocateRewardModel"], [79, 2, 1, "", "RelevanceRewardModel"], [79, 2, 1, "", "RewardModelType"], [74, 0, 0, "-", "blacklist"], [75, 0, 0, "-", "config"], [76, 0, 0, "-", "dahoas"], [77, 0, 0, "-", "diversity"], [78, 0, 0, "-", "dpo"], [80, 0, 0, "-", "nsfw"], [81, 0, 0, "-", "open_assistant"], [82, 0, 0, "-", "prompt"], [83, 0, 0, "-", "reciprocate"], [84, 0, 0, "-", "relevance"], [85, 0, 0, "-", "reward"]], "prompting.validators.reward.BaseRewardModel": [[79, 3, 1, "", "__repr__"], [79, 3, 1, "", "__str__"], [79, 3, 1, "", "apply"], [79, 3, 1, "", "get_rewards"], [79, 5, 1, "", "name"], [79, 3, 1, "", "normalize_rewards"]], "prompting.validators.reward.Blacklist": [[79, 3, 1, "", "_add_ngrams"], [79, 3, 1, "", "add"], [79, 3, 1, "", "calculate_significance"], [79, 3, 1, "", "extract_ngrams"], [79, 3, 1, "", "get_rewards"], [79, 3, 1, "", "get_significance"], [79, 3, 1, "", "most_common"], [79, 3, 1, "", "most_significant"], [79, 5, 1, "", "name"], [79, 3, 1, "", "normalize_rewards"], [79, 3, 1, "", "prune"], [79, 3, 1, "", "reset"], [79, 3, 1, "", "reward"], [79, 3, 1, "", "set_counter_to_half"]], "prompting.validators.reward.DahoasRewardModel": [[79, 3, 1, "", "forward"], [79, 3, 1, "", "get_rewards"], [79, 3, 1, "", "load_weights"], [79, 4, 1, "", "model_name"], [79, 5, 1, "", "name"], [79, 3, 1, "", "reward"]], "prompting.validators.reward.DefaultRewardFrameworkConfig": [[79, 4, 1, "", "dahoas_model_weight"], [79, 4, 1, "", "dpo_model_weight"], [79, 4, 1, "", "prompt_model_weight"], [79, 4, 1, "", "reciprocate_model_weight"], [79, 4, 1, "", "rlhf_model_weight"]], "prompting.validators.reward.DirectPreferenceRewardModel": [[79, 3, 1, "", "get_rewards"], [79, 5, 1, "", "name"], [79, 4, 1, "", "reward_model_name"], [79, 3, 1, "", "reward_single"]], "prompting.validators.reward.DiversityRewardModel": [[79, 4, 1, "", "diversity_model_path"], [79, 3, 1, "", "get_batch_rewards"], [79, 3, 1, "", "get_embeddings"], [79, 3, 1, "", "get_historic_rewards"], [79, 3, 1, "", "get_rewards"], [79, 5, 1, "", "name"], [79, 3, 1, "", "normalize_rewards"], [79, 3, 1, "", "update_historic_embeddings"]], "prompting.validators.reward.NSFWRewardModel": [[79, 3, 1, "", "get_rewards"], [79, 5, 1, "", "name"], [79, 3, 1, "", "normalize_rewards"], [79, 4, 1, "", "nsfw_filter_model_path"], [79, 3, 1, "", "reward"]], "prompting.validators.reward.OpenAssistantRewardModel": [[79, 3, 1, "", "get_rewards"], [79, 5, 1, "", "name"], [79, 4, 1, "", "reward_model_name"], [79, 3, 1, "", "reward_single"]], "prompting.validators.reward.PromptRewardModel": [[79, 3, 1, "", "get_rewards"], [79, 5, 1, "", "name"], [79, 3, 1, "", "reward"], [79, 4, 1, "", "reward_model_name"]], "prompting.validators.reward.ReciprocateRewardModel": [[79, 3, 1, "", "get_rewards"], [79, 5, 1, "", "name"], [79, 4, 1, "", "revision"], [79, 3, 1, "", "reward"], [79, 4, 1, "", "reward_model_path"]], "prompting.validators.reward.RelevanceRewardModel": [[79, 3, 1, "", "get_rewards"], [79, 5, 1, "", "name"], [79, 3, 1, "", "normalize_rewards"], [79, 3, 1, "", "reward"]], "prompting.validators.reward.RewardModelType": [[79, 4, 1, "", "blacklist"], [79, 4, 1, "", "dahoas"], [79, 4, 1, "", "diversity"], [79, 4, 1, "", "dpo"], [79, 4, 1, "", "keyword_match"], [79, 4, 1, "", "nsfw"], [79, 4, 1, "", "prompt"], [79, 4, 1, "", "reciprocate"], [79, 4, 1, "", "relevance"], [79, 4, 1, "", "relevance_bert"], [79, 4, 1, "", "relevance_mpnet"], [79, 4, 1, "", "rlhf"], [79, 4, 1, "", "task_validator"]], "prompting.validators.reward.blacklist": [[74, 2, 1, "", "Blacklist"], [74, 2, 1, "", "BlacklistRewardEvent"]], "prompting.validators.reward.blacklist.Blacklist": [[74, 3, 1, "", "_add_ngrams"], [74, 3, 1, "", "add"], [74, 3, 1, "", "calculate_significance"], [74, 3, 1, "", "extract_ngrams"], [74, 3, 1, "", "get_rewards"], [74, 3, 1, "", "get_significance"], [74, 3, 1, "", "most_common"], [74, 3, 1, "", "most_significant"], [74, 5, 1, "", "name"], [74, 3, 1, "", "normalize_rewards"], [74, 3, 1, "", "prune"], [74, 3, 1, "", "reset"], [74, 3, 1, "", "reward"], [74, 3, 1, "", "set_counter_to_half"]], "prompting.validators.reward.blacklist.BlacklistRewardEvent": [[74, 4, 1, "", "matched_ngram"], [74, 4, 1, "", "significance_score"]], "prompting.validators.reward.config": [[75, 2, 1, "", "DefaultRewardFrameworkConfig"], [75, 2, 1, "", "RewardModelType"]], "prompting.validators.reward.config.DefaultRewardFrameworkConfig": [[75, 4, 1, "", "dahoas_model_weight"], [75, 4, 1, "", "dpo_model_weight"], [75, 4, 1, "", "prompt_model_weight"], [75, 4, 1, "", "reciprocate_model_weight"], [75, 4, 1, "", "rlhf_model_weight"]], "prompting.validators.reward.config.RewardModelType": [[75, 4, 1, "", "blacklist"], [75, 4, 1, "", "dahoas"], [75, 4, 1, "", "diversity"], [75, 4, 1, "", "dpo"], [75, 4, 1, "", "keyword_match"], [75, 4, 1, "", "nsfw"], [75, 4, 1, "", "prompt"], [75, 4, 1, "", "reciprocate"], [75, 4, 1, "", "relevance"], [75, 4, 1, "", "relevance_bert"], [75, 4, 1, "", "relevance_mpnet"], [75, 4, 1, "", "rlhf"], [75, 4, 1, "", "task_validator"]], "prompting.validators.reward.dahoas": [[76, 2, 1, "", "DahoasRewardModel"]], "prompting.validators.reward.dahoas.DahoasRewardModel": [[76, 3, 1, "", "forward"], [76, 3, 1, "", "get_rewards"], [76, 3, 1, "", "load_weights"], [76, 4, 1, "", "model_name"], [76, 5, 1, "", "name"], [76, 3, 1, "", "reward"]], "prompting.validators.reward.diversity": [[77, 2, 1, "", "DiversityRewardEvent"], [77, 2, 1, "", "DiversityRewardModel"], [77, 7, 1, "", "mean_pooling"]], "prompting.validators.reward.diversity.DiversityRewardEvent": [[77, 4, 1, "", "batch"], [77, 4, 1, "", "historic"]], "prompting.validators.reward.diversity.DiversityRewardModel": [[77, 4, 1, "", "diversity_model_path"], [77, 3, 1, "", "get_batch_rewards"], [77, 3, 1, "", "get_embeddings"], [77, 3, 1, "", "get_historic_rewards"], [77, 3, 1, "", "get_rewards"], [77, 5, 1, "", "name"], [77, 3, 1, "", "normalize_rewards"], [77, 3, 1, "", "update_historic_embeddings"]], "prompting.validators.reward.dpo": [[78, 2, 1, "", "DirectPreferenceRewardModel"]], "prompting.validators.reward.dpo.DirectPreferenceRewardModel": [[78, 3, 1, "", "get_rewards"], [78, 5, 1, "", "name"], [78, 4, 1, "", "reward_model_name"], [78, 3, 1, "", "reward_single"]], "prompting.validators.reward.nsfw": [[80, 2, 1, "", "NSFWRewardEvent"], [80, 2, 1, "", "NSFWRewardModel"]], "prompting.validators.reward.nsfw.NSFWRewardEvent": [[80, 4, 1, "", "score"]], "prompting.validators.reward.nsfw.NSFWRewardModel": [[80, 3, 1, "", "get_rewards"], [80, 5, 1, "", "name"], [80, 3, 1, "", "normalize_rewards"], [80, 4, 1, "", "nsfw_filter_model_path"], [80, 3, 1, "", "reward"]], "prompting.validators.reward.open_assistant": [[81, 2, 1, "", "OpenAssistantRewardModel"]], "prompting.validators.reward.open_assistant.OpenAssistantRewardModel": [[81, 3, 1, "", "get_rewards"], [81, 5, 1, "", "name"], [81, 4, 1, "", "reward_model_name"], [81, 3, 1, "", "reward_single"]], "prompting.validators.reward.prompt": [[82, 2, 1, "", "PromptRewardModel"]], "prompting.validators.reward.prompt.PromptRewardModel": [[82, 3, 1, "", "get_rewards"], [82, 5, 1, "", "name"], [82, 3, 1, "", "reward"], [82, 4, 1, "", "reward_model_name"]], "prompting.validators.reward.reciprocate": [[83, 2, 1, "", "ReciprocateRewardModel"]], "prompting.validators.reward.reciprocate.ReciprocateRewardModel": [[83, 3, 1, "", "get_rewards"], [83, 5, 1, "", "name"], [83, 4, 1, "", "revision"], [83, 3, 1, "", "reward"], [83, 4, 1, "", "reward_model_path"]], "prompting.validators.reward.relevance": [[84, 2, 1, "", "BertRelevanceRewardModel"], [84, 2, 1, "", "MpnetRelevenceModel"], [84, 2, 1, "", "RelevanceRewardEvent"], [84, 2, 1, "", "RelevanceRewardModel"], [84, 7, 1, "", "mean_pooling"]], "prompting.validators.reward.relevance.BertRelevanceRewardModel": [[84, 3, 1, "", "get_embedding"], [84, 5, 1, "", "name"], [84, 4, 1, "", "relevance_model_path"], [84, 3, 1, "", "reward"]], "prompting.validators.reward.relevance.MpnetRelevenceModel": [[84, 4, 1, "", "diversity_model_path"], [84, 3, 1, "", "get_embeddings"], [84, 5, 1, "", "name"], [84, 3, 1, "", "reward"]], "prompting.validators.reward.relevance.RelevanceRewardEvent": [[84, 4, 1, "", "bert_score"], [84, 4, 1, "", "mpnet_score"]], "prompting.validators.reward.relevance.RelevanceRewardModel": [[84, 3, 1, "", "get_rewards"], [84, 5, 1, "", "name"], [84, 3, 1, "", "normalize_rewards"], [84, 3, 1, "", "reward"]], "prompting.validators.reward.reward": [[85, 2, 1, "", "BaseRewardEvent"], [85, 2, 1, "", "BaseRewardModel"]], "prompting.validators.reward.reward.BaseRewardEvent": [[85, 4, 1, "", "normalized_reward"], [85, 3, 1, "", "parse_reward_events"], [85, 4, 1, "", "reward"]], "prompting.validators.reward.reward.BaseRewardModel": [[85, 3, 1, "", "__repr__"], [85, 3, 1, "", "__str__"], [85, 3, 1, "", "apply"], [85, 3, 1, "", "get_rewards"], [85, 5, 1, "", "name"], [85, 3, 1, "", "normalize_rewards"]], "prompting.validators.tasks": [[86, 2, 1, "", "QuestionAnswerTask"], [86, 2, 1, "", "QuestionGenerationTask"], [86, 2, 1, "", "SummaryTask"], [86, 2, 1, "", "Task"], [86, 7, 1, "", "create_qa_task"], [86, 7, 1, "", "create_qg_task"], [86, 7, 1, "", "create_summarization_task"]], "prompting.validators.tasks.QuestionAnswerTask": [[86, 3, 1, "", "compose_prompt"]], "prompting.validators.tasks.QuestionGenerationTask": [[86, 3, 1, "", "compose_prompt"]], "prompting.validators.tasks.SummaryTask": [[86, 3, 1, "", "compose_prompt"]], "prompting.validators.tasks.Task": [[86, 4, 1, "", "base_text"], [86, 3, 1, "", "compose_prompt"], [86, 4, 1, "", "criteria"], [86, 4, 1, "", "task_name"], [86, 4, 1, "", "task_type"]], "prompting.validators.weights": [[87, 7, 1, "", "set_weights"], [87, 7, 1, "", "should_set_weights"]], "validators": [[89, 0, 0, "-", "reward"], [92, 0, 0, "-", "test_dataset"], [93, 0, 0, "-", "test_event"]], "validators.reward": [[90, 0, 0, "-", "test_reward_event"], [91, 0, 0, "-", "test_task_validator"]], "validators.reward.test_reward_event": [[90, 2, 1, "", "RewardEventTestCase"]], "validators.reward.test_reward_event.RewardEventTestCase": [[90, 3, 1, "", "setUp"], [90, 3, 1, "", "test_imputed_reward_values_are_correct"], [90, 3, 1, "", "test_no_missing_rewards"], [90, 3, 1, "", "test_parse_reward_events_with_no_reward_events"], [90, 3, 1, "", "test_parse_reward_events_with_reward_events"]], "validators.reward.test_task_validator": [[91, 2, 1, "", "TaskValidatorTestCase"]], "validators.reward.test_task_validator.TaskValidatorTestCase": [[91, 3, 1, "", "setUp"], [91, 3, 1, "", "test_answer_with_question_keyword"], [91, 3, 1, "", "test_augment_with_answer_keyword"], [91, 3, 1, "", "test_augment_with_question_keyword"], [91, 3, 1, "", "test_followup_and_answer_with_summary_keyword"], [91, 3, 1, "", "test_followup_with_answer_keyword"], [91, 3, 1, "", "test_reward_valid_answer"], [91, 3, 1, "", "test_reward_valid_augment"], [91, 3, 1, "", "test_reward_valid_followup"], [91, 3, 1, "", "test_reward_valid_other"]], "validators.test_dataset": [[92, 2, 1, "", "DatasetTestCase"]], "validators.test_dataset.DatasetTestCase": [[92, 3, 1, "", "test_next_returns_regular_strings"], [92, 3, 1, "", "test_next_skips_empty_and_newline_only_strings"]], "validators.test_event": [[93, 2, 1, "", "EventTestCase"]], "validators.test_event.EventTestCase": [[93, 3, 1, "", "test_event_from_dict_all_forward_columns_match"], [93, 3, 1, "", "test_event_from_dict_forward_no_reward_logging"], [93, 3, 1, "", "test_event_from_dict_forward_reward_logging_mismatch"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:property", "6": "py:exception", "7": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"], "7": ["py", "function", "Python function"]}, "titleterms": {"bittensor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 94], "axon": 0, "modul": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93], "content": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93], "class": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 50, 54, 59, 61, 62, 63, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93], "btlog": 1, "function": [1, 2, 4, 7, 15, 16, 19, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 45, 50, 51, 52, 55, 56, 57, 60, 64, 67, 73, 77, 84, 86, 87], "attribut": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 23, 29, 32, 36, 37, 40, 42, 43, 47, 73], "chain_data": 2, "cli": 3, "command": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "deleg": [4, 23], "ident": 5, "submodul": [6, 24, 36, 49, 53, 58, 66, 69, 79, 88, 89], "packag": [6, 36, 58, 66, 69, 79], "inspect": 7, "list": 8, "metagraph": [9, 38], "misc": [10, 67], "network": [11, 26], "overview": 12, "regist": 13, "root": [14, 29], "senat": [15, 30], "stake": [16, 33], "transfer": [17, 34], "unstak": [18, 35], "wallet": [19, 45], "config": [20, 52, 60, 75], "dendrit": 21, "error": 22, "extrins": [23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "log_util": 25, "prometheu": 27, "registr": 28, "serv": 31, "set_weight": [32, 57], "subpackag": [36, 48, 58, 66, 88], "keyfil": 37, "stream": 39, "subtensor": 40, "synaps": 41, "tensor": 42, "threadpool": 43, "type": 44, "api": [46, 94], "refer": 46, "miner": [47, 54], "neuron": [48, 49, 50], "valid": [49, 50, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "prompt": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "basemin": [51, 52, 53, 54, 55, 56, 57], "blacklist": [51, 74], "prioriti": 55, "run": 56, "protocol": 59, "criteria": 61, "dataset": 62, "event": 63, "forward": 64, "gate": 65, "penalti": [68, 69, 70, 71, 72], "content_match": 68, "keyword_match": 70, "task_valid": 72, "reward": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91], "dahoa": 76, "divers": 77, "dpo": 78, "nsfw": 80, "open_assist": 81, "reciproc": 83, "relev": 84, "task": 86, "weight": 87, "test_reward_ev": 90, "test_task_valid": 91, "test_dataset": 92, "test_ev": 93, "welcom": 94, "document": 94}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Welcome to Bittensor API Documentation": [[94, "welcome-to-bittensor-api-documentation"]], "bittensor.axon": [[0, "module-bittensor.axon"]], "Module Contents": [[0, "module-contents"], [1, "module-contents"], [2, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [47, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [67, "module-contents"], [68, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"]], "Classes": [[0, "classes"], [1, "classes"], [2, "classes"], [3, "classes"], [4, "classes"], [5, "classes"], [6, "classes"], [7, "classes"], [8, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [25, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [47, "classes"], [50, "classes"], [54, "classes"], [59, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [65, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"]], "bittensor.btlogging": [[1, "module-bittensor.btlogging"]], "Functions": [[1, "functions"], [2, "functions"], [4, "functions"], [7, "functions"], [15, "functions"], [16, "functions"], [19, "functions"], [23, "functions"], [26, "functions"], [27, "functions"], [28, "functions"], [29, "functions"], [30, "functions"], [31, "functions"], [32, "functions"], [33, "functions"], [34, "functions"], [35, "functions"], [36, "functions"], [37, "functions"], [38, "functions"], [41, "functions"], [42, "functions"], [43, "functions"], [45, "functions"], [50, "functions"], [51, "functions"], [52, "functions"], [55, "functions"], [56, "functions"], [57, "functions"], [60, "functions"], [64, "functions"], [67, "functions"], [73, "functions"], [77, "functions"], [84, "functions"], [86, "functions"], [87, "functions"]], "Attributes": [[1, "attributes"], [2, "attributes"], [3, "attributes"], [4, "attributes"], [6, "attributes"], [7, "attributes"], [8, "attributes"], [9, "attributes"], [10, "attributes"], [11, "attributes"], [12, "attributes"], [13, "attributes"], [14, "attributes"], [15, "attributes"], [16, "attributes"], [17, "attributes"], [18, "attributes"], [20, "attributes"], [23, "attributes"], [29, "attributes"], [32, "attributes"], [36, "attributes"], [37, "attributes"], [40, "attributes"], [42, "attributes"], [43, "attributes"], [47, "attributes"], [73, "attributes"]], "bittensor.chain_data": [[2, "module-bittensor.chain_data"]], "bittensor.cli": [[3, "module-bittensor.cli"]], "bittensor.commands.delegates": [[4, "module-bittensor.commands.delegates"]], "bittensor.commands.identity": [[5, "module-bittensor.commands.identity"]], "bittensor.commands": [[6, "module-bittensor.commands"]], "Submodules": [[6, "submodules"], [24, "submodules"], [36, "submodules"], [49, "submodules"], [53, "submodules"], [58, "submodules"], [66, "submodules"], [69, "submodules"], [79, "submodules"], [88, "submodules"], [89, "submodules"]], "Package Contents": [[6, "package-contents"], [36, "package-contents"], [58, "package-contents"], [66, "package-contents"], [69, "package-contents"], [79, "package-contents"]], "bittensor.commands.inspect": [[7, "module-bittensor.commands.inspect"]], "bittensor.commands.list": [[8, "module-bittensor.commands.list"]], "bittensor.commands.metagraph": [[9, "module-bittensor.commands.metagraph"]], "bittensor.commands.misc": [[10, "module-bittensor.commands.misc"]], "bittensor.commands.network": [[11, "module-bittensor.commands.network"]], "bittensor.commands.overview": [[12, "module-bittensor.commands.overview"]], "bittensor.commands.register": [[13, "module-bittensor.commands.register"]], "bittensor.commands.root": [[14, "module-bittensor.commands.root"]], "bittensor.commands.senate": [[15, "module-bittensor.commands.senate"]], "bittensor.commands.stake": [[16, "module-bittensor.commands.stake"]], "bittensor.commands.transfer": [[17, "module-bittensor.commands.transfer"]], "bittensor.commands.unstake": [[18, "module-bittensor.commands.unstake"]], "bittensor.commands.wallets": [[19, "module-bittensor.commands.wallets"]], "bittensor.config": [[20, "module-bittensor.config"]], "bittensor.dendrite": [[21, "module-bittensor.dendrite"]], "bittensor.errors": [[22, "module-bittensor.errors"]], "bittensor.extrinsics.delegation": [[23, "module-bittensor.extrinsics.delegation"]], "bittensor.extrinsics": [[24, "module-bittensor.extrinsics"]], "bittensor.extrinsics.log_utilities": [[25, "module-bittensor.extrinsics.log_utilities"]], "bittensor.extrinsics.network": [[26, "module-bittensor.extrinsics.network"]], "bittensor.extrinsics.prometheus": [[27, "module-bittensor.extrinsics.prometheus"]], "bittensor.extrinsics.registration": [[28, "module-bittensor.extrinsics.registration"]], "bittensor.extrinsics.root": [[29, "module-bittensor.extrinsics.root"]], "bittensor.extrinsics.senate": [[30, "module-bittensor.extrinsics.senate"]], "bittensor.extrinsics.serving": [[31, "module-bittensor.extrinsics.serving"]], "bittensor.extrinsics.set_weights": [[32, "module-bittensor.extrinsics.set_weights"]], "bittensor.extrinsics.staking": [[33, "module-bittensor.extrinsics.staking"]], "bittensor.extrinsics.transfer": [[34, "module-bittensor.extrinsics.transfer"]], "bittensor.extrinsics.unstaking": [[35, "module-bittensor.extrinsics.unstaking"]], "bittensor": [[36, "module-bittensor"]], "Subpackages": [[36, "subpackages"], [48, "subpackages"], [58, "subpackages"], [66, "subpackages"], [88, "subpackages"]], "bittensor.keyfile": [[37, "module-bittensor.keyfile"]], "bittensor.metagraph": [[38, "module-bittensor.metagraph"]], "bittensor.stream": [[39, "module-bittensor.stream"]], "bittensor.subtensor": [[40, "module-bittensor.subtensor"]], "bittensor.synapse": [[41, "module-bittensor.synapse"]], "bittensor.tensor": [[42, "module-bittensor.tensor"]], "bittensor.threadpool": [[43, "module-bittensor.threadpool"]], "bittensor.types": [[44, "module-bittensor.types"]], "bittensor.wallet": [[45, "module-bittensor.wallet"]], "API Reference": [[46, "api-reference"]], "miner": [[47, "module-miner"]], "neurons": [[48, "module-neurons"]], "neurons.validators": [[49, "module-neurons.validators"]], "neurons.validators.validator": [[50, "module-neurons.validators.validator"]], "prompting.baseminer.blacklist": [[51, "module-prompting.baseminer.blacklist"]], "prompting.baseminer.config": [[52, "module-prompting.baseminer.config"]], "prompting.baseminer": [[53, "module-prompting.baseminer"]], "prompting.baseminer.miner": [[54, "module-prompting.baseminer.miner"]], "prompting.baseminer.priority": [[55, "module-prompting.baseminer.priority"]], "prompting.baseminer.run": [[56, "module-prompting.baseminer.run"]], "prompting.baseminer.set_weights": [[57, "module-prompting.baseminer.set_weights"]], "prompting": [[58, "module-prompting"]], "prompting.protocol": [[59, "module-prompting.protocol"]], "prompting.validators.config": [[60, "module-prompting.validators.config"]], "prompting.validators.criteria": [[61, "module-prompting.validators.criteria"]], "prompting.validators.dataset": [[62, "module-prompting.validators.dataset"]], "prompting.validators.event": [[63, "module-prompting.validators.event"]], "prompting.validators.forward": [[64, "module-prompting.validators.forward"]], "prompting.validators.gating": [[65, "module-prompting.validators.gating"]], "prompting.validators": [[66, "module-prompting.validators"]], "prompting.validators.misc": [[67, "module-prompting.validators.misc"]], "prompting.validators.penalty.content_match": [[68, "module-prompting.validators.penalty.content_match"]], "prompting.validators.penalty": [[69, "module-prompting.validators.penalty"]], "prompting.validators.penalty.keyword_match": [[70, "module-prompting.validators.penalty.keyword_match"]], "prompting.validators.penalty.penalty": [[71, "module-prompting.validators.penalty.penalty"]], "prompting.validators.penalty.task_validation": [[72, "module-prompting.validators.penalty.task_validation"]], "prompting.validators.prompts": [[73, "module-prompting.validators.prompts"]], "prompting.validators.reward.blacklist": [[74, "module-prompting.validators.reward.blacklist"]], "prompting.validators.reward.config": [[75, "module-prompting.validators.reward.config"]], "prompting.validators.reward.dahoas": [[76, "module-prompting.validators.reward.dahoas"]], "prompting.validators.reward.diversity": [[77, "module-prompting.validators.reward.diversity"]], "prompting.validators.reward.dpo": [[78, "module-prompting.validators.reward.dpo"]], "prompting.validators.reward": [[79, "module-prompting.validators.reward"]], "prompting.validators.reward.nsfw": [[80, "module-prompting.validators.reward.nsfw"]], "prompting.validators.reward.open_assistant": [[81, "module-prompting.validators.reward.open_assistant"]], "prompting.validators.reward.prompt": [[82, "module-prompting.validators.reward.prompt"]], "prompting.validators.reward.reciprocate": [[83, "module-prompting.validators.reward.reciprocate"]], "prompting.validators.reward.relevance": [[84, "module-prompting.validators.reward.relevance"]], "prompting.validators.reward.reward": [[85, "module-prompting.validators.reward.reward"]], "prompting.validators.tasks": [[86, "module-prompting.validators.tasks"]], "prompting.validators.weights": [[87, "module-prompting.validators.weights"]], "validators": [[88, "module-validators"]], "validators.reward": [[89, "module-validators.reward"]], "validators.reward.test_reward_event": [[90, "module-validators.reward.test_reward_event"]], "validators.reward.test_task_validator": [[91, "module-validators.reward.test_task_validator"]], "validators.test_dataset": [[92, "module-validators.test_dataset"]], "validators.test_event": [[93, "module-validators.test_event"]]}, "indexentries": {"axonmiddleware (class in bittensor.axon)": [[0, "bittensor.axon.AxonMiddleware"]], "fastapithreadedserver (class in bittensor.axon)": [[0, "bittensor.axon.FastAPIThreadedServer"]], "__del__() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.__del__"]], "__repr__() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.__repr__"]], "__str__() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.__str__"]], "_wrapper_run() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer._wrapper_run"], [0, "id4"]], "add_args() (bittensor.axon.axon class method)": [[0, "bittensor.axon.axon.add_args"]], "attach() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.attach"]], "axon (class in bittensor.axon)": [[0, "bittensor.axon.axon"]], "bittensor.axon": [[0, "module-bittensor.axon"]], "blacklist() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.blacklist"]], "check_config() (bittensor.axon.axon class method)": [[0, "bittensor.axon.axon.check_config"]], "config() (bittensor.axon.axon class method)": [[0, "bittensor.axon.axon.config"]], "default_verify() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.default_verify"]], "dispatch() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.dispatch"]], "help() (bittensor.axon.axon class method)": [[0, "bittensor.axon.axon.help"]], "info() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.info"]], "install_signal_handlers() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer.install_signal_handlers"], [0, "id2"]], "is_running (bittensor.axon.fastapithreadedserver attribute)": [[0, "bittensor.axon.FastAPIThreadedServer.is_running"], [0, "id1"]], "module": [[0, "module-bittensor.axon"], [1, "module-bittensor.btlogging"], [2, "module-bittensor.chain_data"], [3, "module-bittensor.cli"], [4, "module-bittensor.commands.delegates"], [5, "module-bittensor.commands.identity"], [6, "module-bittensor.commands"], [7, "module-bittensor.commands.inspect"], [8, "module-bittensor.commands.list"], [9, "module-bittensor.commands.metagraph"], [10, "module-bittensor.commands.misc"], [11, "module-bittensor.commands.network"], [12, "module-bittensor.commands.overview"], [13, "module-bittensor.commands.register"], [14, "module-bittensor.commands.root"], [15, "module-bittensor.commands.senate"], [16, "module-bittensor.commands.stake"], [17, "module-bittensor.commands.transfer"], [18, "module-bittensor.commands.unstake"], [19, "module-bittensor.commands.wallets"], [20, "module-bittensor.config"], [21, "module-bittensor.dendrite"], [22, "module-bittensor.errors"], [23, "module-bittensor.extrinsics.delegation"], [24, "module-bittensor.extrinsics"], [25, "module-bittensor.extrinsics.log_utilities"], [26, "module-bittensor.extrinsics.network"], [27, "module-bittensor.extrinsics.prometheus"], [28, "module-bittensor.extrinsics.registration"], [29, "module-bittensor.extrinsics.root"], [30, "module-bittensor.extrinsics.senate"], [31, "module-bittensor.extrinsics.serving"], [32, "module-bittensor.extrinsics.set_weights"], [33, "module-bittensor.extrinsics.staking"], [34, "module-bittensor.extrinsics.transfer"], [35, "module-bittensor.extrinsics.unstaking"], [36, "module-bittensor"], [37, "module-bittensor.keyfile"], [38, "module-bittensor.metagraph"], [39, "module-bittensor.stream"], [40, "module-bittensor.subtensor"], [41, "module-bittensor.synapse"], [42, "module-bittensor.tensor"], [43, "module-bittensor.threadpool"], [44, "module-bittensor.types"], [45, "module-bittensor.wallet"], [47, "module-miner"], [48, "module-neurons"], [49, "module-neurons.validators"], [50, "module-neurons.validators.validator"], [51, "module-prompting.baseminer.blacklist"], [52, "module-prompting.baseminer.config"], [53, "module-prompting.baseminer"], [54, "module-prompting.baseminer.miner"], [55, "module-prompting.baseminer.priority"], [56, "module-prompting.baseminer.run"], [57, "module-prompting.baseminer.set_weights"], [58, "module-prompting"], [59, "module-prompting.protocol"], [60, "module-prompting.validators.config"], [61, "module-prompting.validators.criteria"], [62, "module-prompting.validators.dataset"], [63, "module-prompting.validators.event"], [64, "module-prompting.validators.forward"], [65, "module-prompting.validators.gating"], [66, "module-prompting.validators"], [67, "module-prompting.validators.misc"], [68, "module-prompting.validators.penalty.content_match"], [69, "module-prompting.validators.penalty"], [70, "module-prompting.validators.penalty.keyword_match"], [71, "module-prompting.validators.penalty.penalty"], [72, "module-prompting.validators.penalty.task_validation"], [73, "module-prompting.validators.prompts"], [74, "module-prompting.validators.reward.blacklist"], [75, "module-prompting.validators.reward.config"], [76, "module-prompting.validators.reward.dahoas"], [77, "module-prompting.validators.reward.diversity"], [78, "module-prompting.validators.reward.dpo"], [79, "module-prompting.validators.reward"], [80, "module-prompting.validators.reward.nsfw"], [81, "module-prompting.validators.reward.open_assistant"], [82, "module-prompting.validators.reward.prompt"], [83, "module-prompting.validators.reward.reciprocate"], [84, "module-prompting.validators.reward.relevance"], [85, "module-prompting.validators.reward.reward"], [86, "module-prompting.validators.tasks"], [87, "module-prompting.validators.weights"], [88, "module-validators"], [89, "module-validators.reward"], [90, "module-validators.reward.test_reward_event"], [91, "module-validators.reward.test_task_validator"], [92, "module-validators.test_dataset"], [93, "module-validators.test_event"]], "postprocess() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.postprocess"]], "preprocess() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.preprocess"]], "priority() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.priority"]], "run() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.run"]], "run_in_thread() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer.run_in_thread"], [0, "id3"]], "serve() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.serve"]], "should_exit (bittensor.axon.fastapithreadedserver attribute)": [[0, "bittensor.axon.FastAPIThreadedServer.should_exit"], [0, "id0"]], "start() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer.start"], [0, "id5"]], "start() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.start"]], "stop() (bittensor.axon.fastapithreadedserver method)": [[0, "bittensor.axon.FastAPIThreadedServer.stop"], [0, "id6"]], "stop() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.stop"]], "to_string() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.to_string"]], "verify() (bittensor.axon.axonmiddleware method)": [[0, "bittensor.axon.AxonMiddleware.verify"]], "verify_body_integrity() (bittensor.axon.axon method)": [[0, "bittensor.axon.axon.verify_body_integrity"]], "__debug_on__ (bittensor.btlogging.logging attribute)": [[1, "bittensor.btlogging.logging.__debug_on__"]], "__file_sink__ (bittensor.btlogging.logging attribute)": [[1, "bittensor.btlogging.logging.__file_sink__"]], "__has_been_inited__ (bittensor.btlogging.logging attribute)": [[1, "bittensor.btlogging.logging.__has_been_inited__"]], "__std_sink__ (bittensor.btlogging.logging attribute)": [[1, "bittensor.btlogging.logging.__std_sink__"]], "__trace_on__ (bittensor.btlogging.logging attribute)": [[1, "bittensor.btlogging.logging.__trace_on__"]], "_format() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging._format"]], "_remove_loguru_ansi_directive() (in module bittensor.btlogging)": [[1, "bittensor.btlogging._remove_loguru_ansi_directive"]], "add_args() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.add_args"]], "bittensor.btlogging": [[1, "module-bittensor.btlogging"]], "check_config() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.check_config"]], "config() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.config"]], "debug() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.debug"]], "error() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.error"]], "exception() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.exception"]], "get_level() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.get_level"]], "help() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.help"]], "info() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.info"]], "log_filter() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.log_filter"]], "log_formatter() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.log_formatter"]], "log_save_filter() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.log_save_filter"]], "log_save_formatter() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.log_save_formatter"]], "logger (in module bittensor.btlogging)": [[1, "bittensor.btlogging.logger"]], "logging (class in bittensor.btlogging)": [[1, "bittensor.btlogging.logging"]], "set_debug() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.set_debug"]], "set_trace() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.set_trace"]], "success() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.success"]], "trace() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.trace"]], "warning() (bittensor.btlogging.logging class method)": [[1, "bittensor.btlogging.logging.warning"]], "axoninfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.AxonInfo"]], "chaindatatype (class in bittensor.chain_data)": [[2, "bittensor.chain_data.ChainDataType"]], "delegateinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.DelegateInfo"]], "delegateinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.DelegateInfo"]], "delegatedinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.DelegatedInfo"]], "ipinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.IPInfo"]], "ipinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.IPInfo"]], "neuroninfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.NeuronInfo"]], "neuroninfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.NeuronInfo"]], "neuroninfolite (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.NeuronInfoLite"]], "neuroninfolite (class in bittensor.chain_data)": [[2, "bittensor.chain_data.NeuronInfoLite"]], "prometheusinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.PrometheusInfo"]], "proposalcalldata (in module bittensor.chain_data)": [[2, "bittensor.chain_data.ProposalCallData"]], "proposalvotedata (class in bittensor.chain_data)": [[2, "bittensor.chain_data.ProposalVoteData"]], "raopertao (in module bittensor.chain_data)": [[2, "bittensor.chain_data.RAOPERTAO"]], "stakeinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.StakeInfo"]], "stakeinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.StakeInfo"]], "subnethyperparameters (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.SubnetHyperparameters"]], "subnethyperparameters (class in bittensor.chain_data)": [[2, "bittensor.chain_data.SubnetHyperparameters"]], "subnetinfo (bittensor.chain_data.chaindatatype attribute)": [[2, "bittensor.chain_data.ChainDataType.SubnetInfo"]], "subnetinfo (class in bittensor.chain_data)": [[2, "bittensor.chain_data.SubnetInfo"]], "u16_max (in module bittensor.chain_data)": [[2, "bittensor.chain_data.U16_MAX"]], "u64_max (in module bittensor.chain_data)": [[2, "bittensor.chain_data.U64_MAX"]], "__eq__() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.__eq__"]], "__repr__() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.__repr__"]], "__str__() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.__str__"]], "_neuron_dict_to_namespace() (bittensor.chain_data.neuroninfo static method)": [[2, "bittensor.chain_data.NeuronInfo._neuron_dict_to_namespace"]], "_neuron_dict_to_namespace() (bittensor.chain_data.neuroninfolite static method)": [[2, "bittensor.chain_data.NeuronInfoLite._neuron_dict_to_namespace"]], "_null_neuron() (bittensor.chain_data.neuroninfo static method)": [[2, "bittensor.chain_data.NeuronInfo._null_neuron"]], "_null_neuron() (bittensor.chain_data.neuroninfolite static method)": [[2, "bittensor.chain_data.NeuronInfoLite._null_neuron"]], "active (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.active"]], "active (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.active"]], "activity_cutoff (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.activity_cutoff"]], "adjustment_interval (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.adjustment_interval"]], "axon_info (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.axon_info"]], "axon_info (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.axon_info"]], "ayes (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.ayes"]], "bittensor.chain_data": [[2, "module-bittensor.chain_data"]], "block (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.block"]], "blocks_since_epoch (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.blocks_since_epoch"]], "bonds (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.bonds"]], "bonds_moving_avg (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.bonds_moving_avg"]], "burn (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.burn"]], "coldkey (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.coldkey"]], "coldkey (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.coldkey"]], "coldkey (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.coldkey"]], "coldkey_ss58 (bittensor.chain_data.stakeinfo attribute)": [[2, "bittensor.chain_data.StakeInfo.coldkey_ss58"]], "connection_requirements (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.connection_requirements"]], "consensus (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.consensus"]], "consensus (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.consensus"]], "custom_rpc_type_registry (in module bittensor.chain_data)": [[2, "bittensor.chain_data.custom_rpc_type_registry"]], "delegated_list_from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.delegated_list_from_vec_u8"]], "difficulty (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.difficulty"]], "dividends (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.dividends"]], "dividends (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.dividends"]], "emission (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.emission"]], "emission (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.emission"]], "emission_value (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.emission_value"]], "encode() (bittensor.chain_data.ipinfo method)": [[2, "bittensor.chain_data.IPInfo.encode"]], "end (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.end"]], "fix_decoded_values() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.neuroninfolite class method)": [[2, "bittensor.chain_data.NeuronInfoLite.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.prometheusinfo class method)": [[2, "bittensor.chain_data.PrometheusInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.fix_decoded_values"]], "fix_decoded_values() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.fix_decoded_values"]], "from_neuron_info() (bittensor.chain_data.axoninfo class method)": [[2, "bittensor.chain_data.AxonInfo.from_neuron_info"]], "from_parameter_dict() (bittensor.chain_data.axoninfo class method)": [[2, "bittensor.chain_data.AxonInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.from_parameter_dict"]], "from_parameter_dict() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.from_parameter_dict"]], "from_scale_encoding() (in module bittensor.chain_data)": [[2, "bittensor.chain_data.from_scale_encoding"]], "from_scale_encoding_using_type_string() (in module bittensor.chain_data)": [[2, "bittensor.chain_data.from_scale_encoding_using_type_string"]], "from_string() (bittensor.chain_data.axoninfo class method)": [[2, "bittensor.chain_data.AxonInfo.from_string"]], "from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.neuroninfolite class method)": [[2, "bittensor.chain_data.NeuronInfoLite.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.from_vec_u8"]], "from_vec_u8() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.from_vec_u8"]], "from_weights_bonds_and_neuron_lite() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.from_weights_bonds_and_neuron_lite"]], "hotkey (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.hotkey"]], "hotkey (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.hotkey"]], "hotkey (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.hotkey"]], "hotkey_ss58 (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.hotkey_ss58"]], "hotkey_ss58 (bittensor.chain_data.stakeinfo attribute)": [[2, "bittensor.chain_data.StakeInfo.hotkey_ss58"]], "immunity_period (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.immunity_period"]], "immunity_period (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.immunity_period"]], "incentive (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.incentive"]], "incentive (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.incentive"]], "index (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.index"]], "ip (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.ip"]], "ip (bittensor.chain_data.ipinfo attribute)": [[2, "bittensor.chain_data.IPInfo.ip"]], "ip (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.ip"]], "ip_str() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.ip_str"]], "ip_type (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.ip_type"]], "ip_type (bittensor.chain_data.ipinfo attribute)": [[2, "bittensor.chain_data.IPInfo.ip_type"]], "ip_type (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.ip_type"]], "is_null (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.is_null"]], "is_null (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.is_null"]], "is_serving (bittensor.chain_data.axoninfo property)": [[2, "bittensor.chain_data.AxonInfo.is_serving"]], "kappa (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.kappa"]], "kappa (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.kappa"]], "last_update (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.last_update"]], "last_update (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.last_update"]], "list_from_vec_u8() (bittensor.chain_data.delegateinfo class method)": [[2, "bittensor.chain_data.DelegateInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.ipinfo class method)": [[2, "bittensor.chain_data.IPInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.neuroninfo class method)": [[2, "bittensor.chain_data.NeuronInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.neuroninfolite class method)": [[2, "bittensor.chain_data.NeuronInfoLite.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.subnethyperparameters class method)": [[2, "bittensor.chain_data.SubnetHyperparameters.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.chain_data.subnetinfo class method)": [[2, "bittensor.chain_data.SubnetInfo.list_from_vec_u8"]], "list_of_tuple_from_vec_u8() (bittensor.chain_data.stakeinfo class method)": [[2, "bittensor.chain_data.StakeInfo.list_of_tuple_from_vec_u8"]], "max_allowed_validators (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.max_allowed_validators"]], "max_burn (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_burn"]], "max_difficulty (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_difficulty"]], "max_n (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.max_n"]], "max_regs_per_block (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_regs_per_block"]], "max_weight_limit (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.max_weight_limit"]], "max_weight_limit (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.max_weight_limit"]], "min_allowed_weights (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.min_allowed_weights"]], "min_allowed_weights (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.min_allowed_weights"]], "min_burn (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.min_burn"]], "min_difficulty (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.min_difficulty"]], "modality (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.modality"]], "nays (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.nays"]], "netuid (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.netuid"]], "netuid (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.netuid"]], "netuid (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.netuid"]], "nominators (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.nominators"]], "owner_ss58 (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.owner_ss58"]], "owner_ss58 (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.owner_ss58"]], "placeholder1 (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.placeholder1"]], "placeholder2 (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.placeholder2"]], "port (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.port"]], "port (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.port"]], "prometheus_info (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.prometheus_info"]], "prometheus_info (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.prometheus_info"]], "protocol (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.protocol"]], "protocol (bittensor.chain_data.ipinfo attribute)": [[2, "bittensor.chain_data.IPInfo.protocol"]], "pruning_score (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.pruning_score"]], "pruning_score (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.pruning_score"]], "rank (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.rank"]], "rank (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.rank"]], "registration_allowed (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.registration_allowed"]], "registrations (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.registrations"]], "return_per_1000 (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.return_per_1000"]], "rho (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.rho"]], "rho (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.rho"]], "scaling_law_power (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.scaling_law_power"]], "stake (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.stake"]], "stake (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.stake"]], "stake (bittensor.chain_data.stakeinfo attribute)": [[2, "bittensor.chain_data.StakeInfo.stake"]], "stake_dict (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.stake_dict"]], "stake_dict (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.stake_dict"]], "subnetwork_n (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.subnetwork_n"]], "take (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.take"]], "target_regs_per_interval (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.target_regs_per_interval"]], "tempo (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.tempo"]], "tempo (bittensor.chain_data.subnetinfo attribute)": [[2, "bittensor.chain_data.SubnetInfo.tempo"]], "threshold (bittensor.chain_data.proposalvotedata attribute)": [[2, "bittensor.chain_data.ProposalVoteData.threshold"]], "to_parameter_dict() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.ipinfo method)": [[2, "bittensor.chain_data.IPInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.subnethyperparameters method)": [[2, "bittensor.chain_data.SubnetHyperparameters.to_parameter_dict"]], "to_parameter_dict() (bittensor.chain_data.subnetinfo method)": [[2, "bittensor.chain_data.SubnetInfo.to_parameter_dict"]], "to_string() (bittensor.chain_data.axoninfo method)": [[2, "bittensor.chain_data.AxonInfo.to_string"]], "total_daily_return (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.total_daily_return"]], "total_stake (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.total_stake"]], "total_stake (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.total_stake"]], "total_stake (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.total_stake"]], "trust (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.trust"]], "trust (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.trust"]], "uid (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.uid"]], "uid (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.uid"]], "validator_permit (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.validator_permit"]], "validator_permit (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.validator_permit"]], "validator_permits (bittensor.chain_data.delegateinfo attribute)": [[2, "bittensor.chain_data.DelegateInfo.validator_permits"]], "validator_trust (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.validator_trust"]], "validator_trust (bittensor.chain_data.neuroninfolite attribute)": [[2, "bittensor.chain_data.NeuronInfoLite.validator_trust"]], "version (bittensor.chain_data.axoninfo attribute)": [[2, "bittensor.chain_data.AxonInfo.version"]], "version (bittensor.chain_data.prometheusinfo attribute)": [[2, "bittensor.chain_data.PrometheusInfo.version"]], "weights (bittensor.chain_data.neuroninfo attribute)": [[2, "bittensor.chain_data.NeuronInfo.weights"]], "weights_rate_limit (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.weights_rate_limit"]], "weights_version (bittensor.chain_data.subnethyperparameters attribute)": [[2, "bittensor.chain_data.SubnetHyperparameters.weights_version"]], "alias_to_command (in module bittensor.cli)": [[3, "bittensor.cli.ALIAS_TO_COMMAND"]], "commands (in module bittensor.cli)": [[3, "bittensor.cli.COMMANDS"]], "__create_parser__() (bittensor.cli.cli static method)": [[3, "bittensor.cli.cli.__create_parser__"]], "bittensor.cli": [[3, "module-bittensor.cli"]], "check_config() (bittensor.cli.cli static method)": [[3, "bittensor.cli.cli.check_config"]], "cli (class in bittensor.cli)": [[3, "bittensor.cli.cli"]], "console (in module bittensor.cli)": [[3, "bittensor.cli.console"]], "create_config() (bittensor.cli.cli static method)": [[3, "bittensor.cli.cli.create_config"]], "run() (bittensor.cli.cli method)": [[3, "bittensor.cli.cli.run"]], "delegatestakecommand (class in bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.DelegateStakeCommand"]], "delegateunstakecommand (class in bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.DelegateUnstakeCommand"]], "listdelegatescommand (class in bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.ListDelegatesCommand"]], "mydelegatescommand (class in bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.MyDelegatesCommand"]], "nominatecommand (class in bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.NominateCommand"]], "_get_coldkey_wallets_for_path() (in module bittensor.commands.delegates)": [[4, "bittensor.commands.delegates._get_coldkey_wallets_for_path"]], "add_args() (bittensor.commands.delegates.delegatestakecommand static method)": [[4, "bittensor.commands.delegates.DelegateStakeCommand.add_args"]], "add_args() (bittensor.commands.delegates.delegateunstakecommand static method)": [[4, "bittensor.commands.delegates.DelegateUnstakeCommand.add_args"]], "add_args() (bittensor.commands.delegates.listdelegatescommand static method)": [[4, "bittensor.commands.delegates.ListDelegatesCommand.add_args"]], "add_args() (bittensor.commands.delegates.mydelegatescommand static method)": [[4, "bittensor.commands.delegates.MyDelegatesCommand.add_args"]], "add_args() (bittensor.commands.delegates.nominatecommand static method)": [[4, "bittensor.commands.delegates.NominateCommand.add_args"]], "bittensor.commands.delegates": [[4, "module-bittensor.commands.delegates"]], "check_config() (bittensor.commands.delegates.delegatestakecommand static method)": [[4, "bittensor.commands.delegates.DelegateStakeCommand.check_config"]], "check_config() (bittensor.commands.delegates.delegateunstakecommand static method)": [[4, "bittensor.commands.delegates.DelegateUnstakeCommand.check_config"]], "check_config() (bittensor.commands.delegates.listdelegatescommand static method)": [[4, "bittensor.commands.delegates.ListDelegatesCommand.check_config"]], "check_config() (bittensor.commands.delegates.mydelegatescommand static method)": [[4, "bittensor.commands.delegates.MyDelegatesCommand.check_config"]], "check_config() (bittensor.commands.delegates.nominatecommand static method)": [[4, "bittensor.commands.delegates.NominateCommand.check_config"]], "console (in module bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.console"]], "run() (bittensor.commands.delegates.delegatestakecommand static method)": [[4, "bittensor.commands.delegates.DelegateStakeCommand.run"]], "run() (bittensor.commands.delegates.delegateunstakecommand static method)": [[4, "bittensor.commands.delegates.DelegateUnstakeCommand.run"]], "run() (bittensor.commands.delegates.listdelegatescommand static method)": [[4, "bittensor.commands.delegates.ListDelegatesCommand.run"]], "run() (bittensor.commands.delegates.mydelegatescommand static method)": [[4, "bittensor.commands.delegates.MyDelegatesCommand.run"]], "run() (bittensor.commands.delegates.nominatecommand static method)": [[4, "bittensor.commands.delegates.NominateCommand.run"]], "show_delegates() (in module bittensor.commands.delegates)": [[4, "bittensor.commands.delegates.show_delegates"]], "getidentitycommand (class in bittensor.commands.identity)": [[5, "bittensor.commands.identity.GetIdentityCommand"]], "setidentitycommand (class in bittensor.commands.identity)": [[5, "bittensor.commands.identity.SetIdentityCommand"]], "add_args() (bittensor.commands.identity.getidentitycommand static method)": [[5, "bittensor.commands.identity.GetIdentityCommand.add_args"]], "add_args() (bittensor.commands.identity.setidentitycommand static method)": [[5, "bittensor.commands.identity.SetIdentityCommand.add_args"]], "bittensor.commands.identity": [[5, "module-bittensor.commands.identity"]], "check_config() (bittensor.commands.identity.getidentitycommand static method)": [[5, "bittensor.commands.identity.GetIdentityCommand.check_config"]], "check_config() (bittensor.commands.identity.setidentitycommand static method)": [[5, "bittensor.commands.identity.SetIdentityCommand.check_config"]], "run() (bittensor.commands.identity.getidentitycommand method)": [[5, "bittensor.commands.identity.GetIdentityCommand.run"]], "run() (bittensor.commands.identity.setidentitycommand method)": [[5, "bittensor.commands.identity.SetIdentityCommand.run"]], "delegatestakecommand (class in bittensor.commands)": [[6, "bittensor.commands.DelegateStakeCommand"]], "delegateunstakecommand (class in bittensor.commands)": [[6, "bittensor.commands.DelegateUnstakeCommand"]], "getidentitycommand (class in bittensor.commands)": [[6, "bittensor.commands.GetIdentityCommand"]], "inspectcommand (class in bittensor.commands)": [[6, "bittensor.commands.InspectCommand"]], "listcommand (class in bittensor.commands)": [[6, "bittensor.commands.ListCommand"]], "listdelegatescommand (class in bittensor.commands)": [[6, "bittensor.commands.ListDelegatesCommand"]], "metagraphcommand (class in bittensor.commands)": [[6, "bittensor.commands.MetagraphCommand"]], "mydelegatescommand (class in bittensor.commands)": [[6, "bittensor.commands.MyDelegatesCommand"]], "newcoldkeycommand (class in bittensor.commands)": [[6, "bittensor.commands.NewColdkeyCommand"]], "newhotkeycommand (class in bittensor.commands)": [[6, "bittensor.commands.NewHotkeyCommand"]], "nominatecommand (class in bittensor.commands)": [[6, "bittensor.commands.NominateCommand"]], "overviewcommand (class in bittensor.commands)": [[6, "bittensor.commands.OverviewCommand"]], "powregistercommand (class in bittensor.commands)": [[6, "bittensor.commands.PowRegisterCommand"]], "proposalscommand (class in bittensor.commands)": [[6, "bittensor.commands.ProposalsCommand"]], "regencoldkeycommand (class in bittensor.commands)": [[6, "bittensor.commands.RegenColdkeyCommand"]], "regencoldkeypubcommand (class in bittensor.commands)": [[6, "bittensor.commands.RegenColdkeypubCommand"]], "regenhotkeycommand (class in bittensor.commands)": [[6, "bittensor.commands.RegenHotkeyCommand"]], "registercommand (class in bittensor.commands)": [[6, "bittensor.commands.RegisterCommand"]], "rootgetweightscommand (class in bittensor.commands)": [[6, "bittensor.commands.RootGetWeightsCommand"]], "rootlist (class in bittensor.commands)": [[6, "bittensor.commands.RootList"]], "rootregistercommand (class in bittensor.commands)": [[6, "bittensor.commands.RootRegisterCommand"]], "rootsetboostcommand (class in bittensor.commands)": [[6, "bittensor.commands.RootSetBoostCommand"]], "rootsetslashcommand (class in bittensor.commands)": [[6, "bittensor.commands.RootSetSlashCommand"]], "rootsetweightscommand (class in bittensor.commands)": [[6, "bittensor.commands.RootSetWeightsCommand"]], "runfaucetcommand (class in bittensor.commands)": [[6, "bittensor.commands.RunFaucetCommand"]], "senatecommand (class in bittensor.commands)": [[6, "bittensor.commands.SenateCommand"]], "senateleavecommand (class in bittensor.commands)": [[6, "bittensor.commands.SenateLeaveCommand"]], "senateregistercommand (class in bittensor.commands)": [[6, "bittensor.commands.SenateRegisterCommand"]], "setidentitycommand (class in bittensor.commands)": [[6, "bittensor.commands.SetIdentityCommand"]], "showvotescommand (class in bittensor.commands)": [[6, "bittensor.commands.ShowVotesCommand"]], "stakecommand (class in bittensor.commands)": [[6, "bittensor.commands.StakeCommand"]], "stakeshow (class in bittensor.commands)": [[6, "bittensor.commands.StakeShow"]], "swaphotkeycommand (class in bittensor.commands)": [[6, "bittensor.commands.SwapHotkeyCommand"]], "transfercommand (class in bittensor.commands)": [[6, "bittensor.commands.TransferCommand"]], "unstakecommand (class in bittensor.commands)": [[6, "bittensor.commands.UnStakeCommand"]], "updatecommand (class in bittensor.commands)": [[6, "bittensor.commands.UpdateCommand"]], "updatewalletcommand (class in bittensor.commands)": [[6, "bittensor.commands.UpdateWalletCommand"]], "votecommand (class in bittensor.commands)": [[6, "bittensor.commands.VoteCommand"]], "walletbalancecommand (class in bittensor.commands)": [[6, "bittensor.commands.WalletBalanceCommand"]], "walletcreatecommand (class in bittensor.commands)": [[6, "bittensor.commands.WalletCreateCommand"]], "_get_de_registered_stake_for_coldkey_wallet() (bittensor.commands.overviewcommand static method)": [[6, "bittensor.commands.OverviewCommand._get_de_registered_stake_for_coldkey_wallet"]], "_get_neurons_for_netuid() (bittensor.commands.overviewcommand static method)": [[6, "bittensor.commands.OverviewCommand._get_neurons_for_netuid"]], "add_args() (bittensor.commands.delegatestakecommand static method)": [[6, "bittensor.commands.DelegateStakeCommand.add_args"]], "add_args() (bittensor.commands.delegateunstakecommand static method)": [[6, "bittensor.commands.DelegateUnstakeCommand.add_args"]], "add_args() (bittensor.commands.getidentitycommand static method)": [[6, "bittensor.commands.GetIdentityCommand.add_args"]], "add_args() (bittensor.commands.inspectcommand static method)": [[6, "bittensor.commands.InspectCommand.add_args"]], "add_args() (bittensor.commands.listcommand static method)": [[6, "bittensor.commands.ListCommand.add_args"]], "add_args() (bittensor.commands.listdelegatescommand static method)": [[6, "bittensor.commands.ListDelegatesCommand.add_args"]], "add_args() (bittensor.commands.metagraphcommand static method)": [[6, "bittensor.commands.MetagraphCommand.add_args"]], "add_args() (bittensor.commands.mydelegatescommand static method)": [[6, "bittensor.commands.MyDelegatesCommand.add_args"]], "add_args() (bittensor.commands.newcoldkeycommand static method)": [[6, "bittensor.commands.NewColdkeyCommand.add_args"]], "add_args() (bittensor.commands.newhotkeycommand static method)": [[6, "bittensor.commands.NewHotkeyCommand.add_args"]], "add_args() (bittensor.commands.nominatecommand static method)": [[6, "bittensor.commands.NominateCommand.add_args"]], "add_args() (bittensor.commands.overviewcommand static method)": [[6, "bittensor.commands.OverviewCommand.add_args"]], "add_args() (bittensor.commands.powregistercommand static method)": [[6, "bittensor.commands.PowRegisterCommand.add_args"]], "add_args() (bittensor.commands.proposalscommand class method)": [[6, "bittensor.commands.ProposalsCommand.add_args"]], "add_args() (bittensor.commands.regencoldkeycommand static method)": [[6, "bittensor.commands.RegenColdkeyCommand.add_args"]], "add_args() (bittensor.commands.regencoldkeypubcommand static method)": [[6, "bittensor.commands.RegenColdkeypubCommand.add_args"]], "add_args() (bittensor.commands.regenhotkeycommand static method)": [[6, "bittensor.commands.RegenHotkeyCommand.add_args"]], "add_args() (bittensor.commands.registercommand static method)": [[6, "bittensor.commands.RegisterCommand.add_args"]], "add_args() (bittensor.commands.rootgetweightscommand static method)": [[6, "bittensor.commands.RootGetWeightsCommand.add_args"]], "add_args() (bittensor.commands.rootlist static method)": [[6, "bittensor.commands.RootList.add_args"]], "add_args() (bittensor.commands.rootregistercommand static method)": [[6, "bittensor.commands.RootRegisterCommand.add_args"]], "add_args() (bittensor.commands.rootsetboostcommand static method)": [[6, "bittensor.commands.RootSetBoostCommand.add_args"]], "add_args() (bittensor.commands.rootsetslashcommand static method)": [[6, "bittensor.commands.RootSetSlashCommand.add_args"]], "add_args() (bittensor.commands.rootsetweightscommand static method)": [[6, "bittensor.commands.RootSetWeightsCommand.add_args"]], "add_args() (bittensor.commands.runfaucetcommand static method)": [[6, "bittensor.commands.RunFaucetCommand.add_args"]], "add_args() (bittensor.commands.senatecommand class method)": [[6, "bittensor.commands.SenateCommand.add_args"]], "add_args() (bittensor.commands.senateleavecommand class method)": [[6, "bittensor.commands.SenateLeaveCommand.add_args"]], "add_args() (bittensor.commands.senateregistercommand class method)": [[6, "bittensor.commands.SenateRegisterCommand.add_args"]], "add_args() (bittensor.commands.setidentitycommand static method)": [[6, "bittensor.commands.SetIdentityCommand.add_args"]], "add_args() (bittensor.commands.showvotescommand class method)": [[6, "bittensor.commands.ShowVotesCommand.add_args"]], "add_args() (bittensor.commands.stakecommand class method)": [[6, "bittensor.commands.StakeCommand.add_args"]], "add_args() (bittensor.commands.stakeshow static method)": [[6, "bittensor.commands.StakeShow.add_args"]], "add_args() (bittensor.commands.swaphotkeycommand static method)": [[6, "bittensor.commands.SwapHotkeyCommand.add_args"]], "add_args() (bittensor.commands.transfercommand static method)": [[6, "bittensor.commands.TransferCommand.add_args"]], "add_args() (bittensor.commands.unstakecommand static method)": [[6, "bittensor.commands.UnStakeCommand.add_args"]], "add_args() (bittensor.commands.updatecommand static method)": [[6, "bittensor.commands.UpdateCommand.add_args"]], "add_args() (bittensor.commands.updatewalletcommand static method)": [[6, "bittensor.commands.UpdateWalletCommand.add_args"]], "add_args() (bittensor.commands.votecommand class method)": [[6, "bittensor.commands.VoteCommand.add_args"]], "add_args() (bittensor.commands.walletbalancecommand static method)": [[6, "bittensor.commands.WalletBalanceCommand.add_args"]], "add_args() (bittensor.commands.walletcreatecommand static method)": [[6, "bittensor.commands.WalletCreateCommand.add_args"]], "bittensor.commands": [[6, "module-bittensor.commands"]], "check_config() (bittensor.commands.delegatestakecommand static method)": [[6, "bittensor.commands.DelegateStakeCommand.check_config"]], "check_config() (bittensor.commands.delegateunstakecommand static method)": [[6, "bittensor.commands.DelegateUnstakeCommand.check_config"]], "check_config() (bittensor.commands.getidentitycommand static method)": [[6, "bittensor.commands.GetIdentityCommand.check_config"]], "check_config() (bittensor.commands.inspectcommand static method)": [[6, "bittensor.commands.InspectCommand.check_config"]], "check_config() (bittensor.commands.listcommand static method)": [[6, "bittensor.commands.ListCommand.check_config"]], "check_config() (bittensor.commands.listdelegatescommand static method)": [[6, "bittensor.commands.ListDelegatesCommand.check_config"]], "check_config() (bittensor.commands.metagraphcommand static method)": [[6, "bittensor.commands.MetagraphCommand.check_config"]], "check_config() (bittensor.commands.mydelegatescommand static method)": [[6, "bittensor.commands.MyDelegatesCommand.check_config"]], "check_config() (bittensor.commands.newcoldkeycommand static method)": [[6, "bittensor.commands.NewColdkeyCommand.check_config"]], "check_config() (bittensor.commands.newhotkeycommand static method)": [[6, "bittensor.commands.NewHotkeyCommand.check_config"]], "check_config() (bittensor.commands.nominatecommand static method)": [[6, "bittensor.commands.NominateCommand.check_config"]], "check_config() (bittensor.commands.overviewcommand static method)": [[6, "bittensor.commands.OverviewCommand.check_config"]], "check_config() (bittensor.commands.powregistercommand static method)": [[6, "bittensor.commands.PowRegisterCommand.check_config"]], "check_config() (bittensor.commands.proposalscommand class method)": [[6, "bittensor.commands.ProposalsCommand.check_config"]], "check_config() (bittensor.commands.regencoldkeycommand static method)": [[6, "bittensor.commands.RegenColdkeyCommand.check_config"]], "check_config() (bittensor.commands.regencoldkeypubcommand static method)": [[6, "bittensor.commands.RegenColdkeypubCommand.check_config"]], "check_config() (bittensor.commands.regenhotkeycommand static method)": [[6, "bittensor.commands.RegenHotkeyCommand.check_config"]], "check_config() (bittensor.commands.registercommand static method)": [[6, "bittensor.commands.RegisterCommand.check_config"]], "check_config() (bittensor.commands.rootgetweightscommand static method)": [[6, "bittensor.commands.RootGetWeightsCommand.check_config"]], "check_config() (bittensor.commands.rootlist static method)": [[6, "bittensor.commands.RootList.check_config"]], "check_config() (bittensor.commands.rootregistercommand static method)": [[6, "bittensor.commands.RootRegisterCommand.check_config"]], "check_config() (bittensor.commands.rootsetboostcommand static method)": [[6, "bittensor.commands.RootSetBoostCommand.check_config"]], "check_config() (bittensor.commands.rootsetslashcommand static method)": [[6, "bittensor.commands.RootSetSlashCommand.check_config"]], "check_config() (bittensor.commands.rootsetweightscommand static method)": [[6, "bittensor.commands.RootSetWeightsCommand.check_config"]], "check_config() (bittensor.commands.runfaucetcommand static method)": [[6, "bittensor.commands.RunFaucetCommand.check_config"]], "check_config() (bittensor.commands.senatecommand class method)": [[6, "bittensor.commands.SenateCommand.check_config"]], "check_config() (bittensor.commands.senateleavecommand class method)": [[6, "bittensor.commands.SenateLeaveCommand.check_config"]], "check_config() (bittensor.commands.senateregistercommand class method)": [[6, "bittensor.commands.SenateRegisterCommand.check_config"]], "check_config() (bittensor.commands.setidentitycommand static method)": [[6, "bittensor.commands.SetIdentityCommand.check_config"]], "check_config() (bittensor.commands.showvotescommand class method)": [[6, "bittensor.commands.ShowVotesCommand.check_config"]], "check_config() (bittensor.commands.stakecommand class method)": [[6, "bittensor.commands.StakeCommand.check_config"]], "check_config() (bittensor.commands.stakeshow static method)": [[6, "bittensor.commands.StakeShow.check_config"]], "check_config() (bittensor.commands.swaphotkeycommand static method)": [[6, "bittensor.commands.SwapHotkeyCommand.check_config"]], "check_config() (bittensor.commands.transfercommand static method)": [[6, "bittensor.commands.TransferCommand.check_config"]], "check_config() (bittensor.commands.unstakecommand class method)": [[6, "bittensor.commands.UnStakeCommand.check_config"]], "check_config() (bittensor.commands.updatecommand static method)": [[6, "bittensor.commands.UpdateCommand.check_config"]], "check_config() (bittensor.commands.updatewalletcommand static method)": [[6, "bittensor.commands.UpdateWalletCommand.check_config"]], "check_config() (bittensor.commands.votecommand class method)": [[6, "bittensor.commands.VoteCommand.check_config"]], "check_config() (bittensor.commands.walletbalancecommand static method)": [[6, "bittensor.commands.WalletBalanceCommand.check_config"]], "check_config() (bittensor.commands.walletcreatecommand static method)": [[6, "bittensor.commands.WalletCreateCommand.check_config"]], "defaults (in module bittensor.commands)": [[6, "bittensor.commands.defaults"]], "run() (bittensor.commands.delegatestakecommand static method)": [[6, "bittensor.commands.DelegateStakeCommand.run"]], "run() (bittensor.commands.delegateunstakecommand static method)": [[6, "bittensor.commands.DelegateUnstakeCommand.run"]], "run() (bittensor.commands.getidentitycommand method)": [[6, "bittensor.commands.GetIdentityCommand.run"]], "run() (bittensor.commands.inspectcommand static method)": [[6, "bittensor.commands.InspectCommand.run"]], "run() (bittensor.commands.listcommand static method)": [[6, "bittensor.commands.ListCommand.run"]], "run() (bittensor.commands.listdelegatescommand static method)": [[6, "bittensor.commands.ListDelegatesCommand.run"]], "run() (bittensor.commands.metagraphcommand static method)": [[6, "bittensor.commands.MetagraphCommand.run"]], "run() (bittensor.commands.mydelegatescommand static method)": [[6, "bittensor.commands.MyDelegatesCommand.run"]], "run() (bittensor.commands.newcoldkeycommand method)": [[6, "bittensor.commands.NewColdkeyCommand.run"]], "run() (bittensor.commands.newhotkeycommand method)": [[6, "bittensor.commands.NewHotkeyCommand.run"]], "run() (bittensor.commands.nominatecommand static method)": [[6, "bittensor.commands.NominateCommand.run"]], "run() (bittensor.commands.overviewcommand static method)": [[6, "bittensor.commands.OverviewCommand.run"]], "run() (bittensor.commands.powregistercommand static method)": [[6, "bittensor.commands.PowRegisterCommand.run"]], "run() (bittensor.commands.proposalscommand static method)": [[6, "bittensor.commands.ProposalsCommand.run"]], "run() (bittensor.commands.regencoldkeycommand method)": [[6, "bittensor.commands.RegenColdkeyCommand.run"]], "run() (bittensor.commands.regencoldkeypubcommand method)": [[6, "bittensor.commands.RegenColdkeypubCommand.run"]], "run() (bittensor.commands.regenhotkeycommand method)": [[6, "bittensor.commands.RegenHotkeyCommand.run"]], "run() (bittensor.commands.registercommand static method)": [[6, "bittensor.commands.RegisterCommand.run"]], "run() (bittensor.commands.rootgetweightscommand static method)": [[6, "bittensor.commands.RootGetWeightsCommand.run"]], "run() (bittensor.commands.rootlist static method)": [[6, "bittensor.commands.RootList.run"]], "run() (bittensor.commands.rootregistercommand static method)": [[6, "bittensor.commands.RootRegisterCommand.run"]], "run() (bittensor.commands.rootsetboostcommand static method)": [[6, "bittensor.commands.RootSetBoostCommand.run"]], "run() (bittensor.commands.rootsetslashcommand static method)": [[6, "bittensor.commands.RootSetSlashCommand.run"]], "run() (bittensor.commands.rootsetweightscommand static method)": [[6, "bittensor.commands.RootSetWeightsCommand.run"]], "run() (bittensor.commands.runfaucetcommand static method)": [[6, "bittensor.commands.RunFaucetCommand.run"]], "run() (bittensor.commands.senatecommand static method)": [[6, "bittensor.commands.SenateCommand.run"]], "run() (bittensor.commands.senateleavecommand static method)": [[6, "bittensor.commands.SenateLeaveCommand.run"]], "run() (bittensor.commands.senateregistercommand static method)": [[6, "bittensor.commands.SenateRegisterCommand.run"]], "run() (bittensor.commands.setidentitycommand method)": [[6, "bittensor.commands.SetIdentityCommand.run"]], "run() (bittensor.commands.showvotescommand static method)": [[6, "bittensor.commands.ShowVotesCommand.run"]], "run() (bittensor.commands.stakecommand static method)": [[6, "bittensor.commands.StakeCommand.run"]], "run() (bittensor.commands.stakeshow static method)": [[6, "bittensor.commands.StakeShow.run"]], "run() (bittensor.commands.swaphotkeycommand static method)": [[6, "bittensor.commands.SwapHotkeyCommand.run"]], "run() (bittensor.commands.transfercommand static method)": [[6, "bittensor.commands.TransferCommand.run"]], "run() (bittensor.commands.unstakecommand static method)": [[6, "bittensor.commands.UnStakeCommand.run"]], "run() (bittensor.commands.updatecommand static method)": [[6, "bittensor.commands.UpdateCommand.run"]], "run() (bittensor.commands.updatewalletcommand static method)": [[6, "bittensor.commands.UpdateWalletCommand.run"]], "run() (bittensor.commands.votecommand static method)": [[6, "bittensor.commands.VoteCommand.run"]], "run() (bittensor.commands.walletbalancecommand static method)": [[6, "bittensor.commands.WalletBalanceCommand.run"]], "run() (bittensor.commands.walletcreatecommand method)": [[6, "bittensor.commands.WalletCreateCommand.run"]], "inspectcommand (class in bittensor.commands.inspect)": [[7, "bittensor.commands.inspect.InspectCommand"]], "_get_coldkey_wallets_for_path() (in module bittensor.commands.inspect)": [[7, "bittensor.commands.inspect._get_coldkey_wallets_for_path"]], "_get_hotkey_wallets_for_wallet() (in module bittensor.commands.inspect)": [[7, "bittensor.commands.inspect._get_hotkey_wallets_for_wallet"]], "add_args() (bittensor.commands.inspect.inspectcommand static method)": [[7, "bittensor.commands.inspect.InspectCommand.add_args"]], "bittensor.commands.inspect": [[7, "module-bittensor.commands.inspect"]], "check_config() (bittensor.commands.inspect.inspectcommand static method)": [[7, "bittensor.commands.inspect.InspectCommand.check_config"]], "console (in module bittensor.commands.inspect)": [[7, "bittensor.commands.inspect.console"]], "run() (bittensor.commands.inspect.inspectcommand static method)": [[7, "bittensor.commands.inspect.InspectCommand.run"]], "listcommand (class in bittensor.commands.list)": [[8, "bittensor.commands.list.ListCommand"]], "add_args() (bittensor.commands.list.listcommand static method)": [[8, "bittensor.commands.list.ListCommand.add_args"]], "bittensor.commands.list": [[8, "module-bittensor.commands.list"]], "check_config() (bittensor.commands.list.listcommand static method)": [[8, "bittensor.commands.list.ListCommand.check_config"]], "console (in module bittensor.commands.list)": [[8, "bittensor.commands.list.console"]], "run() (bittensor.commands.list.listcommand static method)": [[8, "bittensor.commands.list.ListCommand.run"]], "metagraphcommand (class in bittensor.commands.metagraph)": [[9, "bittensor.commands.metagraph.MetagraphCommand"]], "add_args() (bittensor.commands.metagraph.metagraphcommand static method)": [[9, "bittensor.commands.metagraph.MetagraphCommand.add_args"]], "bittensor.commands.metagraph": [[9, "module-bittensor.commands.metagraph"]], "check_config() (bittensor.commands.metagraph.metagraphcommand static method)": [[9, "bittensor.commands.metagraph.MetagraphCommand.check_config"]], "console (in module bittensor.commands.metagraph)": [[9, "bittensor.commands.metagraph.console"]], "run() (bittensor.commands.metagraph.metagraphcommand static method)": [[9, "bittensor.commands.metagraph.MetagraphCommand.run"]], "updatecommand (class in bittensor.commands.misc)": [[10, "bittensor.commands.misc.UpdateCommand"]], "add_args() (bittensor.commands.misc.updatecommand static method)": [[10, "bittensor.commands.misc.UpdateCommand.add_args"]], "bittensor.commands.misc": [[10, "module-bittensor.commands.misc"]], "check_config() (bittensor.commands.misc.updatecommand static method)": [[10, "bittensor.commands.misc.UpdateCommand.check_config"]], "console (in module bittensor.commands.misc)": [[10, "bittensor.commands.misc.console"]], "run() (bittensor.commands.misc.updatecommand static method)": [[10, "bittensor.commands.misc.UpdateCommand.run"]], "hyperparams (in module bittensor.commands.network)": [[11, "bittensor.commands.network.HYPERPARAMS"]], "registersubnetworkcommand (class in bittensor.commands.network)": [[11, "bittensor.commands.network.RegisterSubnetworkCommand"]], "subnetgethyperparamscommand (class in bittensor.commands.network)": [[11, "bittensor.commands.network.SubnetGetHyperparamsCommand"]], "subnethyperparamscommand (class in bittensor.commands.network)": [[11, "bittensor.commands.network.SubnetHyperparamsCommand"]], "subnetlistcommand (class in bittensor.commands.network)": [[11, "bittensor.commands.network.SubnetListCommand"]], "subnetlockcostcommand (class in bittensor.commands.network)": [[11, "bittensor.commands.network.SubnetLockCostCommand"]], "subnetsudocommand (class in bittensor.commands.network)": [[11, "bittensor.commands.network.SubnetSudoCommand"]], "add_args() (bittensor.commands.network.registersubnetworkcommand class method)": [[11, "bittensor.commands.network.RegisterSubnetworkCommand.add_args"]], "add_args() (bittensor.commands.network.subnetgethyperparamscommand static method)": [[11, "bittensor.commands.network.SubnetGetHyperparamsCommand.add_args"]], "add_args() (bittensor.commands.network.subnethyperparamscommand static method)": [[11, "bittensor.commands.network.SubnetHyperparamsCommand.add_args"]], "add_args() (bittensor.commands.network.subnetlistcommand static method)": [[11, "bittensor.commands.network.SubnetListCommand.add_args"]], "add_args() (bittensor.commands.network.subnetlockcostcommand class method)": [[11, "bittensor.commands.network.SubnetLockCostCommand.add_args"]], "add_args() (bittensor.commands.network.subnetsudocommand static method)": [[11, "bittensor.commands.network.SubnetSudoCommand.add_args"]], "bittensor.commands.network": [[11, "module-bittensor.commands.network"]], "check_config() (bittensor.commands.network.registersubnetworkcommand class method)": [[11, "bittensor.commands.network.RegisterSubnetworkCommand.check_config"]], "check_config() (bittensor.commands.network.subnetgethyperparamscommand static method)": [[11, "bittensor.commands.network.SubnetGetHyperparamsCommand.check_config"]], "check_config() (bittensor.commands.network.subnethyperparamscommand static method)": [[11, "bittensor.commands.network.SubnetHyperparamsCommand.check_config"]], "check_config() (bittensor.commands.network.subnetlistcommand static method)": [[11, "bittensor.commands.network.SubnetListCommand.check_config"]], "check_config() (bittensor.commands.network.subnetlockcostcommand class method)": [[11, "bittensor.commands.network.SubnetLockCostCommand.check_config"]], "check_config() (bittensor.commands.network.subnetsudocommand static method)": [[11, "bittensor.commands.network.SubnetSudoCommand.check_config"]], "console (in module bittensor.commands.network)": [[11, "bittensor.commands.network.console"]], "run() (bittensor.commands.network.registersubnetworkcommand static method)": [[11, "bittensor.commands.network.RegisterSubnetworkCommand.run"]], "run() (bittensor.commands.network.subnetgethyperparamscommand static method)": [[11, "bittensor.commands.network.SubnetGetHyperparamsCommand.run"]], "run() (bittensor.commands.network.subnethyperparamscommand static method)": [[11, "bittensor.commands.network.SubnetHyperparamsCommand.run"]], "run() (bittensor.commands.network.subnetlistcommand static method)": [[11, "bittensor.commands.network.SubnetListCommand.run"]], "run() (bittensor.commands.network.subnetlockcostcommand static method)": [[11, "bittensor.commands.network.SubnetLockCostCommand.run"]], "run() (bittensor.commands.network.subnetsudocommand static method)": [[11, "bittensor.commands.network.SubnetSudoCommand.run"]], "overviewcommand (class in bittensor.commands.overview)": [[12, "bittensor.commands.overview.OverviewCommand"]], "_get_de_registered_stake_for_coldkey_wallet() (bittensor.commands.overview.overviewcommand static method)": [[12, "bittensor.commands.overview.OverviewCommand._get_de_registered_stake_for_coldkey_wallet"]], "_get_neurons_for_netuid() (bittensor.commands.overview.overviewcommand static method)": [[12, "bittensor.commands.overview.OverviewCommand._get_neurons_for_netuid"]], "add_args() (bittensor.commands.overview.overviewcommand static method)": [[12, "bittensor.commands.overview.OverviewCommand.add_args"]], "bittensor.commands.overview": [[12, "module-bittensor.commands.overview"]], "check_config() (bittensor.commands.overview.overviewcommand static method)": [[12, "bittensor.commands.overview.OverviewCommand.check_config"]], "console (in module bittensor.commands.overview)": [[12, "bittensor.commands.overview.console"]], "run() (bittensor.commands.overview.overviewcommand static method)": [[12, "bittensor.commands.overview.OverviewCommand.run"]], "powregistercommand (class in bittensor.commands.register)": [[13, "bittensor.commands.register.PowRegisterCommand"]], "registercommand (class in bittensor.commands.register)": [[13, "bittensor.commands.register.RegisterCommand"]], "runfaucetcommand (class in bittensor.commands.register)": [[13, "bittensor.commands.register.RunFaucetCommand"]], "swaphotkeycommand (class in bittensor.commands.register)": [[13, "bittensor.commands.register.SwapHotkeyCommand"]], "add_args() (bittensor.commands.register.powregistercommand static method)": [[13, "bittensor.commands.register.PowRegisterCommand.add_args"]], "add_args() (bittensor.commands.register.registercommand static method)": [[13, "bittensor.commands.register.RegisterCommand.add_args"]], "add_args() (bittensor.commands.register.runfaucetcommand static method)": [[13, "bittensor.commands.register.RunFaucetCommand.add_args"]], "add_args() (bittensor.commands.register.swaphotkeycommand static method)": [[13, "bittensor.commands.register.SwapHotkeyCommand.add_args"]], "bittensor.commands.register": [[13, "module-bittensor.commands.register"]], "check_config() (bittensor.commands.register.powregistercommand static method)": [[13, "bittensor.commands.register.PowRegisterCommand.check_config"]], "check_config() (bittensor.commands.register.registercommand static method)": [[13, "bittensor.commands.register.RegisterCommand.check_config"]], "check_config() (bittensor.commands.register.runfaucetcommand static method)": [[13, "bittensor.commands.register.RunFaucetCommand.check_config"]], "check_config() (bittensor.commands.register.swaphotkeycommand static method)": [[13, "bittensor.commands.register.SwapHotkeyCommand.check_config"]], "console (in module bittensor.commands.register)": [[13, "bittensor.commands.register.console"]], "run() (bittensor.commands.register.powregistercommand static method)": [[13, "bittensor.commands.register.PowRegisterCommand.run"]], "run() (bittensor.commands.register.registercommand static method)": [[13, "bittensor.commands.register.RegisterCommand.run"]], "run() (bittensor.commands.register.runfaucetcommand static method)": [[13, "bittensor.commands.register.RunFaucetCommand.run"]], "run() (bittensor.commands.register.swaphotkeycommand static method)": [[13, "bittensor.commands.register.SwapHotkeyCommand.run"]], "rootgetweightscommand (class in bittensor.commands.root)": [[14, "bittensor.commands.root.RootGetWeightsCommand"]], "rootlist (class in bittensor.commands.root)": [[14, "bittensor.commands.root.RootList"]], "rootregistercommand (class in bittensor.commands.root)": [[14, "bittensor.commands.root.RootRegisterCommand"]], "rootsetboostcommand (class in bittensor.commands.root)": [[14, "bittensor.commands.root.RootSetBoostCommand"]], "rootsetslashcommand (class in bittensor.commands.root)": [[14, "bittensor.commands.root.RootSetSlashCommand"]], "rootsetweightscommand (class in bittensor.commands.root)": [[14, "bittensor.commands.root.RootSetWeightsCommand"]], "add_args() (bittensor.commands.root.rootgetweightscommand static method)": [[14, "bittensor.commands.root.RootGetWeightsCommand.add_args"]], "add_args() (bittensor.commands.root.rootlist static method)": [[14, "bittensor.commands.root.RootList.add_args"]], "add_args() (bittensor.commands.root.rootregistercommand static method)": [[14, "bittensor.commands.root.RootRegisterCommand.add_args"]], "add_args() (bittensor.commands.root.rootsetboostcommand static method)": [[14, "bittensor.commands.root.RootSetBoostCommand.add_args"]], "add_args() (bittensor.commands.root.rootsetslashcommand static method)": [[14, "bittensor.commands.root.RootSetSlashCommand.add_args"]], "add_args() (bittensor.commands.root.rootsetweightscommand static method)": [[14, "bittensor.commands.root.RootSetWeightsCommand.add_args"]], "bittensor.commands.root": [[14, "module-bittensor.commands.root"]], "check_config() (bittensor.commands.root.rootgetweightscommand static method)": [[14, "bittensor.commands.root.RootGetWeightsCommand.check_config"]], "check_config() (bittensor.commands.root.rootlist static method)": [[14, "bittensor.commands.root.RootList.check_config"]], "check_config() (bittensor.commands.root.rootregistercommand static method)": [[14, "bittensor.commands.root.RootRegisterCommand.check_config"]], "check_config() (bittensor.commands.root.rootsetboostcommand static method)": [[14, "bittensor.commands.root.RootSetBoostCommand.check_config"]], "check_config() (bittensor.commands.root.rootsetslashcommand static method)": [[14, "bittensor.commands.root.RootSetSlashCommand.check_config"]], "check_config() (bittensor.commands.root.rootsetweightscommand static method)": [[14, "bittensor.commands.root.RootSetWeightsCommand.check_config"]], "console (in module bittensor.commands.root)": [[14, "bittensor.commands.root.console"]], "run() (bittensor.commands.root.rootgetweightscommand static method)": [[14, "bittensor.commands.root.RootGetWeightsCommand.run"]], "run() (bittensor.commands.root.rootlist static method)": [[14, "bittensor.commands.root.RootList.run"]], "run() (bittensor.commands.root.rootregistercommand static method)": [[14, "bittensor.commands.root.RootRegisterCommand.run"]], "run() (bittensor.commands.root.rootsetboostcommand static method)": [[14, "bittensor.commands.root.RootSetBoostCommand.run"]], "run() (bittensor.commands.root.rootsetslashcommand static method)": [[14, "bittensor.commands.root.RootSetSlashCommand.run"]], "run() (bittensor.commands.root.rootsetweightscommand static method)": [[14, "bittensor.commands.root.RootSetWeightsCommand.run"]], "proposalscommand (class in bittensor.commands.senate)": [[15, "bittensor.commands.senate.ProposalsCommand"]], "senatecommand (class in bittensor.commands.senate)": [[15, "bittensor.commands.senate.SenateCommand"]], "senateleavecommand (class in bittensor.commands.senate)": [[15, "bittensor.commands.senate.SenateLeaveCommand"]], "senateregistercommand (class in bittensor.commands.senate)": [[15, "bittensor.commands.senate.SenateRegisterCommand"]], "showvotescommand (class in bittensor.commands.senate)": [[15, "bittensor.commands.senate.ShowVotesCommand"]], "votecommand (class in bittensor.commands.senate)": [[15, "bittensor.commands.senate.VoteCommand"]], "add_args() (bittensor.commands.senate.proposalscommand class method)": [[15, "bittensor.commands.senate.ProposalsCommand.add_args"]], "add_args() (bittensor.commands.senate.senatecommand class method)": [[15, "bittensor.commands.senate.SenateCommand.add_args"]], "add_args() (bittensor.commands.senate.senateleavecommand class method)": [[15, "bittensor.commands.senate.SenateLeaveCommand.add_args"]], "add_args() (bittensor.commands.senate.senateregistercommand class method)": [[15, "bittensor.commands.senate.SenateRegisterCommand.add_args"]], "add_args() (bittensor.commands.senate.showvotescommand class method)": [[15, "bittensor.commands.senate.ShowVotesCommand.add_args"]], "add_args() (bittensor.commands.senate.votecommand class method)": [[15, "bittensor.commands.senate.VoteCommand.add_args"]], "bittensor.commands.senate": [[15, "module-bittensor.commands.senate"]], "check_config() (bittensor.commands.senate.proposalscommand class method)": [[15, "bittensor.commands.senate.ProposalsCommand.check_config"]], "check_config() (bittensor.commands.senate.senatecommand class method)": [[15, "bittensor.commands.senate.SenateCommand.check_config"]], "check_config() (bittensor.commands.senate.senateleavecommand class method)": [[15, "bittensor.commands.senate.SenateLeaveCommand.check_config"]], "check_config() (bittensor.commands.senate.senateregistercommand class method)": [[15, "bittensor.commands.senate.SenateRegisterCommand.check_config"]], "check_config() (bittensor.commands.senate.showvotescommand class method)": [[15, "bittensor.commands.senate.ShowVotesCommand.check_config"]], "check_config() (bittensor.commands.senate.votecommand class method)": [[15, "bittensor.commands.senate.VoteCommand.check_config"]], "console (in module bittensor.commands.senate)": [[15, "bittensor.commands.senate.console"]], "display_votes() (in module bittensor.commands.senate)": [[15, "bittensor.commands.senate.display_votes"]], "format_call_data() (in module bittensor.commands.senate)": [[15, "bittensor.commands.senate.format_call_data"]], "run() (bittensor.commands.senate.proposalscommand static method)": [[15, "bittensor.commands.senate.ProposalsCommand.run"]], "run() (bittensor.commands.senate.senatecommand static method)": [[15, "bittensor.commands.senate.SenateCommand.run"]], "run() (bittensor.commands.senate.senateleavecommand static method)": [[15, "bittensor.commands.senate.SenateLeaveCommand.run"]], "run() (bittensor.commands.senate.senateregistercommand static method)": [[15, "bittensor.commands.senate.SenateRegisterCommand.run"]], "run() (bittensor.commands.senate.showvotescommand static method)": [[15, "bittensor.commands.senate.ShowVotesCommand.run"]], "run() (bittensor.commands.senate.votecommand static method)": [[15, "bittensor.commands.senate.VoteCommand.run"]], "stakecommand (class in bittensor.commands.stake)": [[16, "bittensor.commands.stake.StakeCommand"]], "stakeshow (class in bittensor.commands.stake)": [[16, "bittensor.commands.stake.StakeShow"]], "_get_coldkey_wallets_for_path() (in module bittensor.commands.stake)": [[16, "bittensor.commands.stake._get_coldkey_wallets_for_path"]], "_get_hotkey_wallets_for_wallet() (in module bittensor.commands.stake)": [[16, "bittensor.commands.stake._get_hotkey_wallets_for_wallet"]], "add_args() (bittensor.commands.stake.stakecommand class method)": [[16, "bittensor.commands.stake.StakeCommand.add_args"]], "add_args() (bittensor.commands.stake.stakeshow static method)": [[16, "bittensor.commands.stake.StakeShow.add_args"]], "bittensor.commands.stake": [[16, "module-bittensor.commands.stake"]], "check_config() (bittensor.commands.stake.stakecommand class method)": [[16, "bittensor.commands.stake.StakeCommand.check_config"]], "check_config() (bittensor.commands.stake.stakeshow static method)": [[16, "bittensor.commands.stake.StakeShow.check_config"]], "console (in module bittensor.commands.stake)": [[16, "bittensor.commands.stake.console"], [16, "id0"]], "run() (bittensor.commands.stake.stakecommand static method)": [[16, "bittensor.commands.stake.StakeCommand.run"]], "run() (bittensor.commands.stake.stakeshow static method)": [[16, "bittensor.commands.stake.StakeShow.run"]], "transfercommand (class in bittensor.commands.transfer)": [[17, "bittensor.commands.transfer.TransferCommand"]], "add_args() (bittensor.commands.transfer.transfercommand static method)": [[17, "bittensor.commands.transfer.TransferCommand.add_args"]], "bittensor.commands.transfer": [[17, "module-bittensor.commands.transfer"]], "check_config() (bittensor.commands.transfer.transfercommand static method)": [[17, "bittensor.commands.transfer.TransferCommand.check_config"]], "console (in module bittensor.commands.transfer)": [[17, "bittensor.commands.transfer.console"]], "run() (bittensor.commands.transfer.transfercommand static method)": [[17, "bittensor.commands.transfer.TransferCommand.run"]], "unstakecommand (class in bittensor.commands.unstake)": [[18, "bittensor.commands.unstake.UnStakeCommand"]], "add_args() (bittensor.commands.unstake.unstakecommand static method)": [[18, "bittensor.commands.unstake.UnStakeCommand.add_args"]], "bittensor.commands.unstake": [[18, "module-bittensor.commands.unstake"]], "check_config() (bittensor.commands.unstake.unstakecommand class method)": [[18, "bittensor.commands.unstake.UnStakeCommand.check_config"]], "console (in module bittensor.commands.unstake)": [[18, "bittensor.commands.unstake.console"]], "run() (bittensor.commands.unstake.unstakecommand static method)": [[18, "bittensor.commands.unstake.UnStakeCommand.run"]], "newcoldkeycommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.NewColdkeyCommand"]], "newhotkeycommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.NewHotkeyCommand"]], "regencoldkeycommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.RegenColdkeyCommand"]], "regencoldkeypubcommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.RegenColdkeypubCommand"]], "regenhotkeycommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.RegenHotkeyCommand"]], "updatewalletcommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.UpdateWalletCommand"]], "walletbalancecommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.WalletBalanceCommand"]], "walletcreatecommand (class in bittensor.commands.wallets)": [[19, "bittensor.commands.wallets.WalletCreateCommand"]], "_get_coldkey_ss58_addresses_for_path() (in module bittensor.commands.wallets)": [[19, "bittensor.commands.wallets._get_coldkey_ss58_addresses_for_path"]], "_get_coldkey_wallets_for_path() (in module bittensor.commands.wallets)": [[19, "bittensor.commands.wallets._get_coldkey_wallets_for_path"]], "add_args() (bittensor.commands.wallets.newcoldkeycommand static method)": [[19, "bittensor.commands.wallets.NewColdkeyCommand.add_args"]], "add_args() (bittensor.commands.wallets.newhotkeycommand static method)": [[19, "bittensor.commands.wallets.NewHotkeyCommand.add_args"]], "add_args() (bittensor.commands.wallets.regencoldkeycommand static method)": [[19, "bittensor.commands.wallets.RegenColdkeyCommand.add_args"]], "add_args() (bittensor.commands.wallets.regencoldkeypubcommand static method)": [[19, "bittensor.commands.wallets.RegenColdkeypubCommand.add_args"]], "add_args() (bittensor.commands.wallets.regenhotkeycommand static method)": [[19, "bittensor.commands.wallets.RegenHotkeyCommand.add_args"]], "add_args() (bittensor.commands.wallets.updatewalletcommand static method)": [[19, "bittensor.commands.wallets.UpdateWalletCommand.add_args"]], "add_args() (bittensor.commands.wallets.walletbalancecommand static method)": [[19, "bittensor.commands.wallets.WalletBalanceCommand.add_args"]], "add_args() (bittensor.commands.wallets.walletcreatecommand static method)": [[19, "bittensor.commands.wallets.WalletCreateCommand.add_args"]], "bittensor.commands.wallets": [[19, "module-bittensor.commands.wallets"]], "check_config() (bittensor.commands.wallets.newcoldkeycommand static method)": [[19, "bittensor.commands.wallets.NewColdkeyCommand.check_config"]], "check_config() (bittensor.commands.wallets.newhotkeycommand static method)": [[19, "bittensor.commands.wallets.NewHotkeyCommand.check_config"]], "check_config() (bittensor.commands.wallets.regencoldkeycommand static method)": [[19, "bittensor.commands.wallets.RegenColdkeyCommand.check_config"]], "check_config() (bittensor.commands.wallets.regencoldkeypubcommand static method)": [[19, "bittensor.commands.wallets.RegenColdkeypubCommand.check_config"]], "check_config() (bittensor.commands.wallets.regenhotkeycommand static method)": [[19, "bittensor.commands.wallets.RegenHotkeyCommand.check_config"]], "check_config() (bittensor.commands.wallets.updatewalletcommand static method)": [[19, "bittensor.commands.wallets.UpdateWalletCommand.check_config"]], "check_config() (bittensor.commands.wallets.walletbalancecommand static method)": [[19, "bittensor.commands.wallets.WalletBalanceCommand.check_config"]], "check_config() (bittensor.commands.wallets.walletcreatecommand static method)": [[19, "bittensor.commands.wallets.WalletCreateCommand.check_config"]], "run() (bittensor.commands.wallets.newcoldkeycommand method)": [[19, "bittensor.commands.wallets.NewColdkeyCommand.run"]], "run() (bittensor.commands.wallets.newhotkeycommand method)": [[19, "bittensor.commands.wallets.NewHotkeyCommand.run"]], "run() (bittensor.commands.wallets.regencoldkeycommand method)": [[19, "bittensor.commands.wallets.RegenColdkeyCommand.run"]], "run() (bittensor.commands.wallets.regencoldkeypubcommand method)": [[19, "bittensor.commands.wallets.RegenColdkeypubCommand.run"]], "run() (bittensor.commands.wallets.regenhotkeycommand method)": [[19, "bittensor.commands.wallets.RegenHotkeyCommand.run"]], "run() (bittensor.commands.wallets.updatewalletcommand static method)": [[19, "bittensor.commands.wallets.UpdateWalletCommand.run"]], "run() (bittensor.commands.wallets.walletbalancecommand static method)": [[19, "bittensor.commands.wallets.WalletBalanceCommand.run"]], "run() (bittensor.commands.wallets.walletcreatecommand method)": [[19, "bittensor.commands.wallets.WalletCreateCommand.run"]], "defaultconfig (class in bittensor.config)": [[20, "bittensor.config.DefaultConfig"]], "invalidconfigfile": [[20, "bittensor.config.InvalidConfigFile"], [36, "bittensor.InvalidConfigFile"]], "t (in module bittensor.config)": [[20, "bittensor.config.T"]], "__deepcopy__() (bittensor.config.config method)": [[20, "bittensor.config.config.__deepcopy__"]], "__is_set (bittensor.config.config attribute)": [[20, "bittensor.config.config.__is_set"]], "__parse_args__() (bittensor.config.config static method)": [[20, "bittensor.config.config.__parse_args__"]], "__repr__() (bittensor.config.config method)": [[20, "bittensor.config.config.__repr__"]], "__split_params__() (bittensor.config.config static method)": [[20, "bittensor.config.config.__split_params__"]], "__str__() (bittensor.config.config method)": [[20, "bittensor.config.config.__str__"]], "_merge() (bittensor.config.config class method)": [[20, "bittensor.config.config._merge"]], "_remove_private_keys() (bittensor.config.config static method)": [[20, "bittensor.config.config._remove_private_keys"]], "bittensor.config": [[20, "module-bittensor.config"]], "config (class in bittensor.config)": [[20, "bittensor.config.config"]], "copy() (bittensor.config.config method)": [[20, "bittensor.config.config.copy"]], "default() (bittensor.config.defaultconfig class method)": [[20, "bittensor.config.DefaultConfig.default"]], "is_set() (bittensor.config.config method)": [[20, "bittensor.config.config.is_set"]], "merge() (bittensor.config.config method)": [[20, "bittensor.config.config.merge"]], "merge_all() (bittensor.config.config class method)": [[20, "bittensor.config.config.merge_all"]], "to_string() (bittensor.config.config method)": [[20, "bittensor.config.config.to_string"]], "update_with_kwargs() (bittensor.config.config method)": [[20, "bittensor.config.config.update_with_kwargs"]], "__aenter__() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.__aenter__"]], "__aexit__() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.__aexit__"]], "__del__() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.__del__"]], "__repr__() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.__repr__"], [21, "id9"]], "__str__() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.__str__"], [21, "id8"]], "_get_endpoint_url() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite._get_endpoint_url"]], "_handle_request_errors() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite._handle_request_errors"]], "_log_incoming_response() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite._log_incoming_response"]], "_log_outgoing_request() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite._log_outgoing_request"]], "aclose_session() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.aclose_session"], [21, "id1"]], "bittensor.dendrite": [[21, "module-bittensor.dendrite"]], "call() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.call"], [21, "id4"]], "call_stream() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.call_stream"], [21, "id5"]], "close_session() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.close_session"], [21, "id0"]], "dendrite (class in bittensor.dendrite)": [[21, "bittensor.dendrite.dendrite"]], "external_ip (bittensor.dendrite.dendrite attribute)": [[21, "bittensor.dendrite.dendrite.external_ip"]], "forward() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.forward"], [21, "id3"]], "keypair (bittensor.dendrite.dendrite attribute)": [[21, "bittensor.dendrite.dendrite.keypair"]], "preprocess_synapse_for_request() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.preprocess_synapse_for_request"], [21, "id6"]], "process_server_response() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.process_server_response"], [21, "id7"]], "query() (bittensor.dendrite.dendrite method)": [[21, "bittensor.dendrite.dendrite.query"], [21, "id2"]], "session (bittensor.dendrite.dendrite property)": [[21, "bittensor.dendrite.dendrite.session"]], "synapse_history (bittensor.dendrite.dendrite attribute)": [[21, "bittensor.dendrite.dendrite.synapse_history"]], "chainconnectionerror": [[22, "bittensor.errors.ChainConnectionError"], [36, "bittensor.ChainConnectionError"]], "chainerror": [[22, "bittensor.errors.ChainError"], [36, "bittensor.ChainError"]], "chainqueryerror": [[22, "bittensor.errors.ChainQueryError"], [36, "bittensor.ChainQueryError"]], "chaintransactionerror": [[22, "bittensor.errors.ChainTransactionError"], [36, "bittensor.ChainTransactionError"]], "identityerror": [[22, "bittensor.errors.IdentityError"], [36, "bittensor.IdentityError"]], "keyfileerror": [[22, "bittensor.errors.KeyFileError"], [36, "bittensor.KeyFileError"], [36, "id0"]], "nominationerror": [[22, "bittensor.errors.NominationError"], [36, "bittensor.NominationError"]], "notdelegateerror": [[22, "bittensor.errors.NotDelegateError"], [36, "bittensor.NotDelegateError"]], "notregisterederror": [[22, "bittensor.errors.NotRegisteredError"], [36, "bittensor.NotRegisteredError"]], "registrationerror": [[22, "bittensor.errors.RegistrationError"], [36, "bittensor.RegistrationError"]], "stakeerror": [[22, "bittensor.errors.StakeError"], [36, "bittensor.StakeError"]], "transfererror": [[22, "bittensor.errors.TransferError"], [36, "bittensor.TransferError"]], "unstakeerror": [[22, "bittensor.errors.UnstakeError"], [36, "bittensor.UnstakeError"]], "bittensor.errors": [[22, "module-bittensor.errors"]], "bittensor.extrinsics.delegation": [[23, "module-bittensor.extrinsics.delegation"]], "delegate_extrinsic() (in module bittensor.extrinsics.delegation)": [[23, "bittensor.extrinsics.delegation.delegate_extrinsic"]], "logger (in module bittensor.extrinsics.delegation)": [[23, "bittensor.extrinsics.delegation.logger"]], "nominate_extrinsic() (in module bittensor.extrinsics.delegation)": [[23, "bittensor.extrinsics.delegation.nominate_extrinsic"]], "undelegate_extrinsic() (in module bittensor.extrinsics.delegation)": [[23, "bittensor.extrinsics.delegation.undelegate_extrinsic"]], "bittensor.extrinsics": [[24, "module-bittensor.extrinsics"]], "validatorlogger (class in bittensor.extrinsics.log_utilities)": [[25, "bittensor.extrinsics.log_utilities.ValidatorLogger"]], "validatorprometheus (class in bittensor.extrinsics.log_utilities)": [[25, "bittensor.extrinsics.log_utilities.ValidatorPrometheus"]], "bittensor.extrinsics.log_utilities": [[25, "module-bittensor.extrinsics.log_utilities"]], "log_epoch_end() (bittensor.extrinsics.log_utilities.validatorprometheus method)": [[25, "bittensor.extrinsics.log_utilities.ValidatorPrometheus.log_epoch_end"]], "log_epoch_start() (bittensor.extrinsics.log_utilities.validatorprometheus method)": [[25, "bittensor.extrinsics.log_utilities.ValidatorPrometheus.log_epoch_start"]], "log_run_info() (bittensor.extrinsics.log_utilities.validatorprometheus method)": [[25, "bittensor.extrinsics.log_utilities.ValidatorPrometheus.log_run_info"]], "log_step() (bittensor.extrinsics.log_utilities.validatorprometheus method)": [[25, "bittensor.extrinsics.log_utilities.ValidatorPrometheus.log_step"]], "print_console_metagraph_status() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[25, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_console_metagraph_status"]], "print_console_query_summary() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[25, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_console_query_summary"]], "print_console_subtensor_weight() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[25, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_console_subtensor_weight"]], "print_console_validator_identifier() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[25, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_console_validator_identifier"]], "print_response_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[25, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_response_table"]], "print_stats_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[25, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_stats_table"]], "print_synapse_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[25, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_synapse_table"]], "print_synergy_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[25, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_synergy_table"]], "print_weights_table() (bittensor.extrinsics.log_utilities.validatorlogger method)": [[25, "bittensor.extrinsics.log_utilities.ValidatorLogger.print_weights_table"]], "bittensor.extrinsics.network": [[26, "module-bittensor.extrinsics.network"]], "register_subnetwork_extrinsic() (in module bittensor.extrinsics.network)": [[26, "bittensor.extrinsics.network.register_subnetwork_extrinsic"]], "set_hyperparameter_extrinsic() (in module bittensor.extrinsics.network)": [[26, "bittensor.extrinsics.network.set_hyperparameter_extrinsic"]], "bittensor.extrinsics.prometheus": [[27, "module-bittensor.extrinsics.prometheus"]], "prometheus_extrinsic() (in module bittensor.extrinsics.prometheus)": [[27, "bittensor.extrinsics.prometheus.prometheus_extrinsic"]], "maxattemptsexception": [[28, "bittensor.extrinsics.registration.MaxAttemptsException"]], "maxsuccessexception": [[28, "bittensor.extrinsics.registration.MaxSuccessException"]], "bittensor.extrinsics.registration": [[28, "module-bittensor.extrinsics.registration"]], "burned_register_extrinsic() (in module bittensor.extrinsics.registration)": [[28, "bittensor.extrinsics.registration.burned_register_extrinsic"]], "register_extrinsic() (in module bittensor.extrinsics.registration)": [[28, "bittensor.extrinsics.registration.register_extrinsic"]], "run_faucet_extrinsic() (in module bittensor.extrinsics.registration)": [[28, "bittensor.extrinsics.registration.run_faucet_extrinsic"]], "swap_hotkey_extrinsic() (in module bittensor.extrinsics.registration)": [[28, "bittensor.extrinsics.registration.swap_hotkey_extrinsic"]], "bittensor.extrinsics.root": [[29, "module-bittensor.extrinsics.root"]], "logger (in module bittensor.extrinsics.root)": [[29, "bittensor.extrinsics.root.logger"]], "root_register_extrinsic() (in module bittensor.extrinsics.root)": [[29, "bittensor.extrinsics.root.root_register_extrinsic"]], "set_root_weights_extrinsic() (in module bittensor.extrinsics.root)": [[29, "bittensor.extrinsics.root.set_root_weights_extrinsic"]], "bittensor.extrinsics.senate": [[30, "module-bittensor.extrinsics.senate"]], "leave_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[30, "bittensor.extrinsics.senate.leave_senate_extrinsic"]], "register_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[30, "bittensor.extrinsics.senate.register_senate_extrinsic"]], "vote_senate_extrinsic() (in module bittensor.extrinsics.senate)": [[30, "bittensor.extrinsics.senate.vote_senate_extrinsic"]], "bittensor.extrinsics.serving": [[31, "module-bittensor.extrinsics.serving"]], "serve_axon_extrinsic() (in module bittensor.extrinsics.serving)": [[31, "bittensor.extrinsics.serving.serve_axon_extrinsic"]], "serve_extrinsic() (in module bittensor.extrinsics.serving)": [[31, "bittensor.extrinsics.serving.serve_extrinsic"]], "bittensor.extrinsics.set_weights": [[32, "module-bittensor.extrinsics.set_weights"]], "logger (in module bittensor.extrinsics.set_weights)": [[32, "bittensor.extrinsics.set_weights.logger"]], "set_weights_extrinsic() (in module bittensor.extrinsics.set_weights)": [[32, "bittensor.extrinsics.set_weights.set_weights_extrinsic"]], "__do_add_stake_single() (in module bittensor.extrinsics.staking)": [[33, "bittensor.extrinsics.staking.__do_add_stake_single"]], "add_stake_extrinsic() (in module bittensor.extrinsics.staking)": [[33, "bittensor.extrinsics.staking.add_stake_extrinsic"]], "add_stake_multiple_extrinsic() (in module bittensor.extrinsics.staking)": [[33, "bittensor.extrinsics.staking.add_stake_multiple_extrinsic"]], "bittensor.extrinsics.staking": [[33, "module-bittensor.extrinsics.staking"]], "bittensor.extrinsics.transfer": [[34, "module-bittensor.extrinsics.transfer"]], "transfer_extrinsic() (in module bittensor.extrinsics.transfer)": [[34, "bittensor.extrinsics.transfer.transfer_extrinsic"]], "__do_remove_stake_single() (in module bittensor.extrinsics.unstaking)": [[35, "bittensor.extrinsics.unstaking.__do_remove_stake_single"]], "bittensor.extrinsics.unstaking": [[35, "module-bittensor.extrinsics.unstaking"]], "unstake_extrinsic() (in module bittensor.extrinsics.unstaking)": [[35, "bittensor.extrinsics.unstaking.unstake_extrinsic"]], "unstake_multiple_extrinsic() (in module bittensor.extrinsics.unstaking)": [[35, "bittensor.extrinsics.unstaking.unstake_multiple_extrinsic"]], "all_commands (in module bittensor)": [[36, "bittensor.ALL_COMMANDS"]], "axoninfo (class in bittensor)": [[36, "bittensor.AxonInfo"]], "b (bittensor.metagraph property)": [[36, "bittensor.metagraph.B"]], "btstreamingresponsemodel (class in bittensor)": [[36, "bittensor.BTStreamingResponseModel"]], "c (bittensor.metagraph property)": [[36, "bittensor.metagraph.C"]], "chaindatatype (class in bittensor)": [[36, "bittensor.ChainDataType"]], "d (bittensor.metagraph property)": [[36, "bittensor.metagraph.D"]], "defaultconfig (class in bittensor)": [[36, "bittensor.DefaultConfig"]], "delegateinfo (bittensor.chaindatatype attribute)": [[36, "bittensor.ChainDataType.DelegateInfo"]], "delegateinfo (class in bittensor)": [[36, "bittensor.DelegateInfo"]], "delegatedinfo (bittensor.chaindatatype attribute)": [[36, "bittensor.ChainDataType.DelegatedInfo"]], "e (bittensor.metagraph property)": [[36, "bittensor.metagraph.E"]], "i (bittensor.metagraph property)": [[36, "bittensor.metagraph.I"]], "ipinfo (bittensor.chaindatatype attribute)": [[36, "bittensor.ChainDataType.IPInfo"]], "ipinfo (class in bittensor)": [[36, "bittensor.IPInfo"]], "mockkeyfile (class in bittensor)": [[36, "bittensor.Mockkeyfile"]], "nacl_salt (in module bittensor)": [[36, "bittensor.NACL_SALT"]], "neuroninfo (bittensor.chaindatatype attribute)": [[36, "bittensor.ChainDataType.NeuronInfo"]], "neuroninfo (class in bittensor)": [[36, "bittensor.NeuronInfo"]], "neuroninfolite (bittensor.chaindatatype attribute)": [[36, "bittensor.ChainDataType.NeuronInfoLite"]], "neuroninfolite (class in bittensor)": [[36, "bittensor.NeuronInfoLite"]], "prioritythreadpoolexecutor (class in bittensor)": [[36, "bittensor.PriorityThreadPoolExecutor"]], "prometheusinfo (class in bittensor)": [[36, "bittensor.PrometheusInfo"]], "proposalcalldata (in module bittensor)": [[36, "bittensor.ProposalCallData"]], "proposalvotedata (class in bittensor)": [[36, "bittensor.ProposalVoteData"]], "r (bittensor.metagraph property)": [[36, "bittensor.metagraph.R"]], "raopertao (in module bittensor)": [[36, "bittensor.RAOPERTAO"]], "s (bittensor.metagraph property)": [[36, "bittensor.metagraph.S"]], "stakeinfo (bittensor.chaindatatype attribute)": [[36, "bittensor.ChainDataType.StakeInfo"]], "stakeinfo (class in bittensor)": [[36, "bittensor.StakeInfo"]], "streamingsynapse (class in bittensor)": [[36, "bittensor.StreamingSynapse"]], "streamingsynapse.btstreamingresponse (class in bittensor)": [[36, "bittensor.StreamingSynapse.BTStreamingResponse"]], "streamingsynapse.config (class in bittensor)": [[36, "bittensor.StreamingSynapse.Config"]], "subnethyperparameters (bittensor.chaindatatype attribute)": [[36, "bittensor.ChainDataType.SubnetHyperparameters"]], "subnethyperparameters (class in bittensor)": [[36, "bittensor.SubnetHyperparameters"]], "subnetinfo (bittensor.chaindatatype attribute)": [[36, "bittensor.ChainDataType.SubnetInfo"]], "subnetinfo (class in bittensor)": [[36, "bittensor.SubnetInfo"]], "synapse (class in bittensor)": [[36, "bittensor.Synapse"]], "synapse.config (class in bittensor)": [[36, "bittensor.Synapse.Config"]], "t (bittensor.metagraph property)": [[36, "bittensor.metagraph.T"]], "t (in module bittensor)": [[36, "bittensor.T"]], "torch_dtypes (in module bittensor)": [[36, "bittensor.TORCH_DTYPES"]], "tensor (class in bittensor)": [[36, "bittensor.Tensor"], [36, "bittensor.tensor"]], "tensor.config (class in bittensor)": [[36, "bittensor.Tensor.Config"]], "terminalinfo (class in bittensor)": [[36, "bittensor.TerminalInfo"]], "terminalinfo.config (class in bittensor)": [[36, "bittensor.TerminalInfo.Config"]], "tv (bittensor.metagraph property)": [[36, "bittensor.metagraph.Tv"]], "u16_max (in module bittensor)": [[36, "bittensor.U16_MAX"]], "u64_max (in module bittensor)": [[36, "bittensor.U64_MAX"]], "w (bittensor.metagraph property)": [[36, "bittensor.metagraph.W"]], "__aenter__() (bittensor.dendrite method)": [[36, "bittensor.dendrite.__aenter__"]], "__aexit__() (bittensor.dendrite method)": [[36, "bittensor.dendrite.__aexit__"]], "__archive_entrypoint__ (in module bittensor)": [[36, "bittensor.__archive_entrypoint__"]], "__bellagene_entrypoint__ (in module bittensor)": [[36, "bittensor.__bellagene_entrypoint__"]], "__blocktime__ (in module bittensor)": [[36, "bittensor.__blocktime__"]], "__call__() (bittensor.streamingsynapse.btstreamingresponse method)": [[36, "bittensor.StreamingSynapse.BTStreamingResponse.__call__"]], "__console__ (in module bittensor)": [[36, "bittensor.__console__"]], "__create_parser__() (bittensor.cli static method)": [[36, "bittensor.cli.__create_parser__"]], "__debug_on__ (bittensor.logging attribute)": [[36, "bittensor.logging.__debug_on__"]], "__deepcopy__() (bittensor.config method)": [[36, "bittensor.config.__deepcopy__"]], "__del__() (bittensor.axon method)": [[36, "bittensor.axon.__del__"]], "__del__() (bittensor.dendrite method)": [[36, "bittensor.dendrite.__del__"]], "__delegates_details_url__ (in module bittensor)": [[36, "bittensor.__delegates_details_url__"]], "__eq__() (bittensor.axoninfo method)": [[36, "bittensor.AxonInfo.__eq__"]], "__file_sink__ (bittensor.logging attribute)": [[36, "bittensor.logging.__file_sink__"]], "__finney_entrypoint__ (in module bittensor)": [[36, "bittensor.__finney_entrypoint__"]], "__finney_test_entrypoint__ (in module bittensor)": [[36, "bittensor.__finney_test_entrypoint__"]], "__has_been_inited__ (bittensor.logging attribute)": [[36, "bittensor.logging.__has_been_inited__"]], "__is_set (bittensor.config attribute)": [[36, "bittensor.config.__is_set"]], "__local_entrypoint__ (in module bittensor)": [[36, "bittensor.__local_entrypoint__"]], "__network_explorer_map__ (in module bittensor)": [[36, "bittensor.__network_explorer_map__"]], "__networks__ (in module bittensor)": [[36, "bittensor.__networks__"]], "__new_signature_version__ (in module bittensor)": [[36, "bittensor.__new_signature_version__"]], "__parse_args__() (bittensor.config static method)": [[36, "bittensor.config.__parse_args__"]], "__pipaddress__ (in module bittensor)": [[36, "bittensor.__pipaddress__"]], "__rao_symbol__ (in module bittensor)": [[36, "bittensor.__rao_symbol__"]], "__repr__() (bittensor.axoninfo method)": [[36, "bittensor.AxonInfo.__repr__"]], "__repr__() (bittensor.mockkeyfile method)": [[36, "bittensor.Mockkeyfile.__repr__"]], "__repr__() (bittensor.axon method)": [[36, "bittensor.axon.__repr__"]], "__repr__() (bittensor.config method)": [[36, "bittensor.config.__repr__"]], "__repr__() (bittensor.dendrite method)": [[36, "bittensor.dendrite.__repr__"], [36, "id63"]], "__repr__() (bittensor.keyfile method)": [[36, "bittensor.keyfile.__repr__"]], "__repr__() (bittensor.metagraph method)": [[36, "bittensor.metagraph.__repr__"]], "__repr__() (bittensor.subtensor method)": [[36, "bittensor.subtensor.__repr__"]], "__repr__() (bittensor.wallet method)": [[36, "bittensor.wallet.__repr__"]], "__setattr__() (bittensor.synapse method)": [[36, "bittensor.Synapse.__setattr__"], [36, "id29"]], "__split_params__() (bittensor.config static method)": [[36, "bittensor.config.__split_params__"]], "__ss58_address_length__ (in module bittensor)": [[36, "bittensor.__ss58_address_length__"]], "__ss58_format__ (in module bittensor)": [[36, "bittensor.__ss58_format__"]], "__std_sink__ (bittensor.logging attribute)": [[36, "bittensor.logging.__std_sink__"]], "__str__() (bittensor.axoninfo method)": [[36, "bittensor.AxonInfo.__str__"]], "__str__() (bittensor.mockkeyfile method)": [[36, "bittensor.Mockkeyfile.__str__"]], "__str__() (bittensor.axon method)": [[36, "bittensor.axon.__str__"]], "__str__() (bittensor.config method)": [[36, "bittensor.config.__str__"]], "__str__() (bittensor.dendrite method)": [[36, "bittensor.dendrite.__str__"], [36, "id62"]], "__str__() (bittensor.keyfile method)": [[36, "bittensor.keyfile.__str__"]], "__str__() (bittensor.metagraph method)": [[36, "bittensor.metagraph.__str__"]], "__str__() (bittensor.subtensor method)": [[36, "bittensor.subtensor.__str__"]], "__str__() (bittensor.wallet method)": [[36, "bittensor.wallet.__str__"]], "__tao_symbol__ (in module bittensor)": [[36, "bittensor.__tao_symbol__"]], "__trace_on__ (bittensor.logging attribute)": [[36, "bittensor.logging.__trace_on__"]], "__type_registry__ (in module bittensor)": [[36, "bittensor.__type_registry__"]], "__use_console__ (in module bittensor)": [[36, "bittensor.__use_console__"]], "__version__ (in module bittensor)": [[36, "bittensor.__version__"]], "__version_as_int__ (in module bittensor)": [[36, "bittensor.__version_as_int__"]], "_adjust_thread_count() (bittensor.prioritythreadpoolexecutor method)": [[36, "bittensor.PriorityThreadPoolExecutor._adjust_thread_count"]], "_assign_neurons() (bittensor.metagraph method)": [[36, "bittensor.metagraph._assign_neurons"]], "_counter (bittensor.prioritythreadpoolexecutor attribute)": [[36, "bittensor.PriorityThreadPoolExecutor._counter"]], "_create_tensor() (bittensor.metagraph method)": [[36, "bittensor.metagraph._create_tensor"]], "_do_associate_ips() (bittensor.subtensor method)": [[36, "bittensor.subtensor._do_associate_ips"]], "_do_burned_register() (bittensor.subtensor method)": [[36, "bittensor.subtensor._do_burned_register"]], "_do_delegation() (bittensor.subtensor method)": [[36, "bittensor.subtensor._do_delegation"]], "_do_nominate() (bittensor.subtensor method)": [[36, "bittensor.subtensor._do_nominate"]], "_do_pow_register() (bittensor.subtensor method)": [[36, "bittensor.subtensor._do_pow_register"]], "_do_root_register() (bittensor.subtensor method)": [[36, "bittensor.subtensor._do_root_register"]], "_do_serve_axon() (bittensor.subtensor method)": [[36, "bittensor.subtensor._do_serve_axon"]], "_do_serve_prometheus() (bittensor.subtensor method)": [[36, "bittensor.subtensor._do_serve_prometheus"]], "_do_set_weights() (bittensor.subtensor method)": [[36, "bittensor.subtensor._do_set_weights"]], "_do_stake() (bittensor.subtensor method)": [[36, "bittensor.subtensor._do_stake"]], "_do_swap_hotkey() (bittensor.subtensor method)": [[36, "bittensor.subtensor._do_swap_hotkey"]], "_do_transfer() (bittensor.subtensor method)": [[36, "bittensor.subtensor._do_transfer"]], "_do_undelegation() (bittensor.subtensor method)": [[36, "bittensor.subtensor._do_undelegation"]], "_do_unstake() (bittensor.subtensor method)": [[36, "bittensor.subtensor._do_unstake"]], "_encode_params() (bittensor.subtensor method)": [[36, "bittensor.subtensor._encode_params"]], "_extract_dtype (bittensor.tensor attribute)": [[36, "bittensor.Tensor._extract_dtype"]], "_extract_header_size (bittensor.synapse attribute)": [[36, "bittensor.Synapse._extract_header_size"]], "_extract_nonce (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo._extract_nonce"]], "_extract_port (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo._extract_port"]], "_extract_process_time (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo._extract_process_time"]], "_extract_shape (bittensor.tensor attribute)": [[36, "bittensor.Tensor._extract_shape"]], "_extract_status_code (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo._extract_status_code"]], "_extract_timeout (bittensor.synapse attribute)": [[36, "bittensor.Synapse._extract_timeout"]], "_extract_total_size (bittensor.synapse attribute)": [[36, "bittensor.Synapse._extract_total_size"]], "_extract_version (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo._extract_version"]], "_format() (bittensor.logging class method)": [[36, "bittensor.logging._format"]], "_get_endpoint_url() (bittensor.dendrite method)": [[36, "bittensor.dendrite._get_endpoint_url"]], "_handle_request_errors() (bittensor.dendrite method)": [[36, "bittensor.dendrite._handle_request_errors"]], "_initialize_subtensor() (bittensor.metagraph method)": [[36, "bittensor.metagraph._initialize_subtensor"]], "_initializer_failed() (bittensor.prioritythreadpoolexecutor method)": [[36, "bittensor.PriorityThreadPoolExecutor._initializer_failed"]], "_log_incoming_response() (bittensor.dendrite method)": [[36, "bittensor.dendrite._log_incoming_response"]], "_log_outgoing_request() (bittensor.dendrite method)": [[36, "bittensor.dendrite._log_outgoing_request"]], "_may_overwrite() (bittensor.keyfile method)": [[36, "bittensor.keyfile._may_overwrite"]], "_merge() (bittensor.config class method)": [[36, "bittensor.config._merge"]], "_neuron_dict_to_namespace() (bittensor.neuroninfo static method)": [[36, "bittensor.NeuronInfo._neuron_dict_to_namespace"]], "_neuron_dict_to_namespace() (bittensor.neuroninfolite static method)": [[36, "bittensor.NeuronInfoLite._neuron_dict_to_namespace"]], "_null_neuron() (bittensor.neuroninfo static method)": [[36, "bittensor.NeuronInfo._null_neuron"]], "_null_neuron() (bittensor.neuroninfolite static method)": [[36, "bittensor.NeuronInfoLite._null_neuron"]], "_null_neuron() (bittensor.subtensor static method)": [[36, "bittensor.subtensor._null_neuron"]], "_process_root_weights() (bittensor.metagraph method)": [[36, "bittensor.metagraph._process_root_weights"]], "_process_weights_or_bonds() (bittensor.metagraph method)": [[36, "bittensor.metagraph._process_weights_or_bonds"]], "_read_keyfile_data_from_file() (bittensor.keyfile method)": [[36, "bittensor.keyfile._read_keyfile_data_from_file"]], "_remove_private_keys() (bittensor.config static method)": [[36, "bittensor.config._remove_private_keys"]], "_set_metagraph_attributes() (bittensor.metagraph method)": [[36, "bittensor.metagraph._set_metagraph_attributes"]], "_set_weights_and_bonds() (bittensor.metagraph method)": [[36, "bittensor.metagraph._set_weights_and_bonds"]], "_write_keyfile_data_to_file() (bittensor.keyfile method)": [[36, "bittensor.keyfile._write_keyfile_data_to_file"]], "aclose_session() (bittensor.dendrite method)": [[36, "bittensor.dendrite.aclose_session"], [36, "id55"]], "active (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.active"]], "active (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.active"]], "activity_cutoff (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.activity_cutoff"]], "add_args() (bittensor.prioritythreadpoolexecutor class method)": [[36, "bittensor.PriorityThreadPoolExecutor.add_args"]], "add_args() (bittensor.axon class method)": [[36, "bittensor.axon.add_args"]], "add_args() (bittensor.logging class method)": [[36, "bittensor.logging.add_args"]], "add_args() (bittensor.subtensor class method)": [[36, "bittensor.subtensor.add_args"]], "add_args() (bittensor.wallet class method)": [[36, "bittensor.wallet.add_args"]], "add_stake() (bittensor.subtensor method)": [[36, "bittensor.subtensor.add_stake"]], "add_stake_multiple() (bittensor.subtensor method)": [[36, "bittensor.subtensor.add_stake_multiple"]], "addresses (bittensor.metagraph property)": [[36, "bittensor.metagraph.addresses"]], "adjustment_interval (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.adjustment_interval"]], "ask_password_to_encrypt() (in module bittensor)": [[36, "bittensor.ask_password_to_encrypt"]], "associated_validator_ip_info() (bittensor.subtensor method)": [[36, "bittensor.subtensor.associated_validator_ip_info"]], "attach() (bittensor.axon method)": [[36, "bittensor.axon.attach"]], "axon (bittensor.synapse attribute)": [[36, "bittensor.Synapse.axon"], [36, "id25"]], "axon (class in bittensor)": [[36, "bittensor.axon"]], "axon_info (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.axon_info"]], "axon_info (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.axon_info"]], "ayes (bittensor.proposalvotedata attribute)": [[36, "bittensor.ProposalVoteData.ayes"]], "bittensor": [[36, "module-bittensor"]], "block (bittensor.prometheusinfo attribute)": [[36, "bittensor.PrometheusInfo.block"]], "block (bittensor.subtensor property)": [[36, "bittensor.subtensor.block"]], "blocks_since_epoch (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.blocks_since_epoch"]], "blocks_since_epoch() (bittensor.subtensor method)": [[36, "bittensor.subtensor.blocks_since_epoch"]], "body_hash (bittensor.synapse property)": [[36, "id19"]], "body_hash() (bittensor.synapse method)": [[36, "bittensor.Synapse.body_hash"]], "bonds (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.bonds"]], "bonds() (bittensor.subtensor method)": [[36, "bittensor.subtensor.bonds"]], "bonds_moving_avg (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.bonds_moving_avg"]], "buffer (bittensor.tensor attribute)": [[36, "bittensor.Tensor.buffer"], [36, "id35"]], "burn (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.burn"]], "burn() (bittensor.subtensor method)": [[36, "bittensor.subtensor.burn"]], "burned_register() (bittensor.subtensor method)": [[36, "bittensor.subtensor.burned_register"]], "call() (bittensor.dendrite method)": [[36, "bittensor.dendrite.call"], [36, "id58"]], "call_stream() (bittensor.dendrite method)": [[36, "bittensor.dendrite.call_stream"], [36, "id59"]], "cast_dtype() (in module bittensor)": [[36, "bittensor.cast_dtype"]], "cast_float() (in module bittensor)": [[36, "bittensor.cast_float"]], "cast_int() (in module bittensor)": [[36, "bittensor.cast_int"]], "cast_shape() (in module bittensor)": [[36, "bittensor.cast_shape"]], "chain_endpoint (bittensor.subtensor attribute)": [[36, "bittensor.subtensor.chain_endpoint"]], "check_and_update_encryption() (bittensor.mockkeyfile method)": [[36, "bittensor.Mockkeyfile.check_and_update_encryption"]], "check_and_update_encryption() (bittensor.keyfile method)": [[36, "bittensor.keyfile.check_and_update_encryption"]], "check_config() (bittensor.axon class method)": [[36, "bittensor.axon.check_config"]], "check_config() (bittensor.cli static method)": [[36, "bittensor.cli.check_config"]], "check_config() (bittensor.logging class method)": [[36, "bittensor.logging.check_config"]], "cli (class in bittensor)": [[36, "bittensor.cli"]], "close_session() (bittensor.dendrite method)": [[36, "bittensor.dendrite.close_session"], [36, "id54"]], "coldkey (bittensor.axoninfo attribute)": [[36, "bittensor.AxonInfo.coldkey"]], "coldkey (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.coldkey"]], "coldkey (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.coldkey"]], "coldkey (bittensor.wallet property)": [[36, "bittensor.wallet.coldkey"]], "coldkey_file (bittensor.wallet property)": [[36, "bittensor.wallet.coldkey_file"]], "coldkey_ss58 (bittensor.stakeinfo attribute)": [[36, "bittensor.StakeInfo.coldkey_ss58"]], "coldkeypub (bittensor.wallet property)": [[36, "bittensor.wallet.coldkeypub"]], "coldkeypub_file (bittensor.wallet property)": [[36, "bittensor.wallet.coldkeypub_file"]], "coldkeys (bittensor.metagraph property)": [[36, "bittensor.metagraph.coldkeys"]], "computed_body_hash (bittensor.synapse attribute)": [[36, "bittensor.Synapse.computed_body_hash"], [36, "id26"]], "config (class in bittensor)": [[36, "bittensor.config"]], "config() (bittensor.prioritythreadpoolexecutor class method)": [[36, "bittensor.PriorityThreadPoolExecutor.config"]], "config() (bittensor.axon class method)": [[36, "bittensor.axon.config"]], "config() (bittensor.logging class method)": [[36, "bittensor.logging.config"]], "config() (bittensor.subtensor static method)": [[36, "bittensor.subtensor.config"]], "config() (bittensor.wallet class method)": [[36, "bittensor.wallet.config"]], "configs (in module bittensor)": [[36, "bittensor.configs"]], "connection_requirements (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.connection_requirements"]], "consensus (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.consensus"]], "consensus (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.consensus"]], "copy() (bittensor.config method)": [[36, "bittensor.config.copy"]], "create() (bittensor.wallet method)": [[36, "bittensor.wallet.create"]], "create_coldkey_from_uri() (bittensor.wallet method)": [[36, "bittensor.wallet.create_coldkey_from_uri"]], "create_config() (bittensor.cli static method)": [[36, "bittensor.cli.create_config"]], "create_hotkey_from_uri() (bittensor.wallet method)": [[36, "bittensor.wallet.create_hotkey_from_uri"]], "create_if_non_existent() (bittensor.wallet method)": [[36, "bittensor.wallet.create_if_non_existent"]], "create_new_coldkey() (bittensor.wallet method)": [[36, "bittensor.wallet.create_new_coldkey"]], "create_new_hotkey() (bittensor.wallet method)": [[36, "bittensor.wallet.create_new_hotkey"]], "create_streaming_response() (bittensor.streamingsynapse method)": [[36, "bittensor.StreamingSynapse.create_streaming_response"]], "custom_rpc_type_registry (in module bittensor)": [[36, "bittensor.custom_rpc_type_registry"]], "data (bittensor.mockkeyfile property)": [[36, "bittensor.Mockkeyfile.data"]], "data (bittensor.keyfile property)": [[36, "bittensor.keyfile.data"]], "debug() (bittensor.logging class method)": [[36, "bittensor.logging.debug"]], "debug() (in module bittensor)": [[36, "bittensor.debug"]], "decrypt() (bittensor.mockkeyfile method)": [[36, "bittensor.Mockkeyfile.decrypt"]], "decrypt() (bittensor.keyfile method)": [[36, "bittensor.keyfile.decrypt"]], "decrypt_keyfile_data() (in module bittensor)": [[36, "bittensor.decrypt_keyfile_data"]], "default() (bittensor.defaultconfig class method)": [[36, "bittensor.DefaultConfig.default"]], "default_verify() (bittensor.axon method)": [[36, "bittensor.axon.default_verify"]], "defaults (in module bittensor)": [[36, "bittensor.defaults"]], "delegate() (bittensor.subtensor method)": [[36, "bittensor.subtensor.delegate"]], "delegated_list_from_vec_u8() (bittensor.delegateinfo class method)": [[36, "bittensor.DelegateInfo.delegated_list_from_vec_u8"]], "dendrite (bittensor.synapse attribute)": [[36, "bittensor.Synapse.dendrite"], [36, "id24"]], "dendrite (class in bittensor)": [[36, "bittensor.dendrite"]], "deserialize() (bittensor.synapse method)": [[36, "bittensor.Synapse.deserialize"], [36, "id28"]], "deserialize() (bittensor.tensor method)": [[36, "bittensor.Tensor.deserialize"]], "deserialize_keypair_from_keyfile_data() (in module bittensor)": [[36, "bittensor.deserialize_keypair_from_keyfile_data"]], "determine_chain_endpoint_and_network() (bittensor.subtensor static method)": [[36, "bittensor.subtensor.determine_chain_endpoint_and_network"]], "difficulty (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.difficulty"]], "difficulty() (bittensor.subtensor method)": [[36, "bittensor.subtensor.difficulty"]], "display_mnemonic_msg() (in module bittensor)": [[36, "bittensor.display_mnemonic_msg"]], "dividends (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.dividends"]], "dividends (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.dividends"]], "does_hotkey_exist() (bittensor.subtensor method)": [[36, "bittensor.subtensor.does_hotkey_exist"]], "dtype (bittensor.tensor attribute)": [[36, "bittensor.Tensor.dtype"], [36, "id36"]], "emission (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.emission"]], "emission (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.emission"]], "emission_value (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.emission_value"]], "encode() (bittensor.ipinfo method)": [[36, "bittensor.IPInfo.encode"]], "encrypt() (bittensor.mockkeyfile method)": [[36, "bittensor.Mockkeyfile.encrypt"]], "encrypt() (bittensor.keyfile method)": [[36, "bittensor.keyfile.encrypt"]], "encrypt_keyfile_data() (in module bittensor)": [[36, "bittensor.encrypt_keyfile_data"]], "end (bittensor.proposalvotedata attribute)": [[36, "bittensor.ProposalVoteData.end"]], "error() (bittensor.logging class method)": [[36, "bittensor.logging.error"]], "exception() (bittensor.logging class method)": [[36, "bittensor.logging.exception"]], "exists_on_device() (bittensor.mockkeyfile method)": [[36, "bittensor.Mockkeyfile.exists_on_device"]], "exists_on_device() (bittensor.keyfile method)": [[36, "bittensor.keyfile.exists_on_device"]], "external_ip (bittensor.dendrite attribute)": [[36, "bittensor.dendrite.external_ip"]], "extract_response_json() (bittensor.streamingsynapse method)": [[36, "bittensor.StreamingSynapse.extract_response_json"]], "failed_verification (bittensor.synapse property)": [[36, "bittensor.Synapse.failed_verification"]], "fix_decoded_values() (bittensor.delegateinfo class method)": [[36, "bittensor.DelegateInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.ipinfo class method)": [[36, "bittensor.IPInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.neuroninfo class method)": [[36, "bittensor.NeuronInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.neuroninfolite class method)": [[36, "bittensor.NeuronInfoLite.fix_decoded_values"]], "fix_decoded_values() (bittensor.prometheusinfo class method)": [[36, "bittensor.PrometheusInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.stakeinfo class method)": [[36, "bittensor.StakeInfo.fix_decoded_values"]], "fix_decoded_values() (bittensor.subnethyperparameters class method)": [[36, "bittensor.SubnetHyperparameters.fix_decoded_values"]], "fix_decoded_values() (bittensor.subnetinfo class method)": [[36, "bittensor.SubnetInfo.fix_decoded_values"]], "forward() (bittensor.dendrite method)": [[36, "bittensor.dendrite.forward"], [36, "id57"]], "from_headers() (bittensor.synapse class method)": [[36, "id33"]], "from_headers() (bittensor.synapse method)": [[36, "bittensor.Synapse.from_headers"]], "from_neuron_info() (bittensor.axoninfo class method)": [[36, "bittensor.AxonInfo.from_neuron_info"]], "from_parameter_dict() (bittensor.axoninfo class method)": [[36, "bittensor.AxonInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.ipinfo class method)": [[36, "bittensor.IPInfo.from_parameter_dict"]], "from_parameter_dict() (bittensor.subnethyperparameters class method)": [[36, "bittensor.SubnetHyperparameters.from_parameter_dict"]], "from_parameter_dict() (bittensor.subnetinfo class method)": [[36, "bittensor.SubnetInfo.from_parameter_dict"]], "from_scale_encoding() (in module bittensor)": [[36, "bittensor.from_scale_encoding"]], "from_scale_encoding_using_type_string() (in module bittensor)": [[36, "bittensor.from_scale_encoding_using_type_string"]], "from_string() (bittensor.axoninfo class method)": [[36, "bittensor.AxonInfo.from_string"]], "from_vec_u8() (bittensor.delegateinfo class method)": [[36, "bittensor.DelegateInfo.from_vec_u8"]], "from_vec_u8() (bittensor.ipinfo class method)": [[36, "bittensor.IPInfo.from_vec_u8"]], "from_vec_u8() (bittensor.neuroninfo class method)": [[36, "bittensor.NeuronInfo.from_vec_u8"]], "from_vec_u8() (bittensor.neuroninfolite class method)": [[36, "bittensor.NeuronInfoLite.from_vec_u8"]], "from_vec_u8() (bittensor.stakeinfo class method)": [[36, "bittensor.StakeInfo.from_vec_u8"]], "from_vec_u8() (bittensor.subnethyperparameters class method)": [[36, "bittensor.SubnetHyperparameters.from_vec_u8"]], "from_vec_u8() (bittensor.subnetinfo class method)": [[36, "bittensor.SubnetInfo.from_vec_u8"]], "from_weights_bonds_and_neuron_lite() (bittensor.neuroninfo class method)": [[36, "bittensor.NeuronInfo.from_weights_bonds_and_neuron_lite"]], "get_all_neurons_for_pubkey() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_all_neurons_for_pubkey"]], "get_all_subnet_netuids() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_all_subnet_netuids"]], "get_all_subnets_info() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_all_subnets_info"]], "get_all_uids_for_hotkey() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_all_uids_for_hotkey"]], "get_axon_info() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_axon_info"]], "get_balance() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_balance"]], "get_balances() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_balances"]], "get_block_hash() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_block_hash"]], "get_coldkey() (bittensor.wallet method)": [[36, "bittensor.wallet.get_coldkey"]], "get_coldkey_password_from_environment() (in module bittensor)": [[36, "bittensor.get_coldkey_password_from_environment"]], "get_coldkeypub() (bittensor.wallet method)": [[36, "bittensor.wallet.get_coldkeypub"]], "get_current_block() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_current_block"]], "get_delegate_by_hotkey() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_delegate_by_hotkey"]], "get_delegate_take() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_delegate_take"]], "get_delegated() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_delegated"]], "get_delegates() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_delegates"]], "get_emission_value_by_subnet() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_emission_value_by_subnet"]], "get_existential_deposit() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_existential_deposit"]], "get_hotkey() (bittensor.wallet method)": [[36, "bittensor.wallet.get_hotkey"]], "get_hotkey_owner() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_hotkey_owner"]], "get_keypair() (bittensor.mockkeyfile method)": [[36, "bittensor.Mockkeyfile.get_keypair"]], "get_keypair() (bittensor.keyfile method)": [[36, "bittensor.keyfile.get_keypair"]], "get_level() (bittensor.logging class method)": [[36, "bittensor.logging.get_level"]], "get_netuids_for_hotkey() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_netuids_for_hotkey"]], "get_neuron_for_pubkey_and_subnet() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_neuron_for_pubkey_and_subnet"]], "get_nominators_for_hotkey() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_nominators_for_hotkey"]], "get_prometheus_info() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_prometheus_info"]], "get_proposal_call_data() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_proposal_call_data"]], "get_proposal_hashes() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_proposal_hashes"]], "get_proposal_vote_data (bittensor.subtensor attribute)": [[36, "bittensor.subtensor.get_proposal_vote_data"]], "get_proposals() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_proposals"]], "get_senate_members() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_senate_members"]], "get_size() (in module bittensor)": [[36, "bittensor.get_size"]], "get_stake() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_stake"]], "get_stake_for_coldkey_and_hotkey() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_stake_for_coldkey_and_hotkey"]], "get_stake_info_for_coldkey() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_stake_info_for_coldkey"]], "get_stake_info_for_coldkeys() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_stake_info_for_coldkeys"]], "get_subnet_burn_cost() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_subnet_burn_cost"]], "get_subnet_connection_requirement() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_subnet_connection_requirement"]], "get_subnet_connection_requirements() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_subnet_connection_requirements"]], "get_subnet_hyperparameters() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_subnet_hyperparameters"]], "get_subnet_info() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_subnet_info"]], "get_subnet_modality() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_subnet_modality"]], "get_subnet_owner() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_subnet_owner"]], "get_subnets() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_subnets"]], "get_total_size() (bittensor.synapse method)": [[36, "bittensor.Synapse.get_total_size"], [36, "id30"]], "get_total_stake_for_coldkey() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_total_stake_for_coldkey"]], "get_total_stake_for_hotkey() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_total_stake_for_hotkey"]], "get_total_subnets() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_total_subnets"]], "get_transfer_fee() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_transfer_fee"]], "get_uid_for_hotkey_on_subnet() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_uid_for_hotkey_on_subnet"]], "get_vote_data() (bittensor.subtensor method)": [[36, "bittensor.subtensor.get_vote_data"]], "header_size (bittensor.synapse attribute)": [[36, "bittensor.Synapse.header_size"], [36, "id23"]], "help() (bittensor.axon class method)": [[36, "bittensor.axon.help"]], "help() (bittensor.logging class method)": [[36, "bittensor.logging.help"]], "help() (bittensor.subtensor class method)": [[36, "bittensor.subtensor.help"]], "help() (bittensor.wallet class method)": [[36, "bittensor.wallet.help"]], "hotkey (bittensor.axoninfo attribute)": [[36, "bittensor.AxonInfo.hotkey"]], "hotkey (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.hotkey"]], "hotkey (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.hotkey"]], "hotkey (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo.hotkey"], [36, "id17"]], "hotkey (bittensor.wallet property)": [[36, "bittensor.wallet.hotkey"]], "hotkey_file (bittensor.wallet property)": [[36, "bittensor.wallet.hotkey_file"]], "hotkey_ss58 (bittensor.delegateinfo attribute)": [[36, "bittensor.DelegateInfo.hotkey_ss58"]], "hotkey_ss58 (bittensor.stakeinfo attribute)": [[36, "bittensor.StakeInfo.hotkey_ss58"]], "hotkey_str (bittensor.wallet attribute)": [[36, "bittensor.wallet.hotkey_str"]], "hotkeys (bittensor.metagraph property)": [[36, "bittensor.metagraph.hotkeys"]], "immunity_period (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.immunity_period"]], "immunity_period (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.immunity_period"]], "immunity_period() (bittensor.subtensor method)": [[36, "bittensor.subtensor.immunity_period"]], "incentive (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.incentive"]], "incentive (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.incentive"]], "incentive() (bittensor.subtensor method)": [[36, "bittensor.subtensor.incentive"]], "index (bittensor.proposalvotedata attribute)": [[36, "bittensor.ProposalVoteData.index"]], "info() (bittensor.axon method)": [[36, "bittensor.axon.info"]], "info() (bittensor.logging class method)": [[36, "bittensor.logging.info"]], "ip (bittensor.axoninfo attribute)": [[36, "bittensor.AxonInfo.ip"]], "ip (bittensor.ipinfo attribute)": [[36, "bittensor.IPInfo.ip"]], "ip (bittensor.prometheusinfo attribute)": [[36, "bittensor.PrometheusInfo.ip"]], "ip (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo.ip"], [36, "id12"]], "ip_str() (bittensor.axoninfo method)": [[36, "bittensor.AxonInfo.ip_str"]], "ip_type (bittensor.axoninfo attribute)": [[36, "bittensor.AxonInfo.ip_type"]], "ip_type (bittensor.ipinfo attribute)": [[36, "bittensor.IPInfo.ip_type"]], "ip_type (bittensor.prometheusinfo attribute)": [[36, "bittensor.PrometheusInfo.ip_type"]], "is_blacklist (bittensor.synapse property)": [[36, "bittensor.Synapse.is_blacklist"]], "is_empty (bittensor.prioritythreadpoolexecutor property)": [[36, "bittensor.PriorityThreadPoolExecutor.is_empty"]], "is_encrypted() (bittensor.mockkeyfile method)": [[36, "bittensor.Mockkeyfile.is_encrypted"]], "is_encrypted() (bittensor.keyfile method)": [[36, "bittensor.keyfile.is_encrypted"]], "is_failure (bittensor.synapse property)": [[36, "bittensor.Synapse.is_failure"]], "is_hotkey_delegate() (bittensor.subtensor method)": [[36, "bittensor.subtensor.is_hotkey_delegate"]], "is_hotkey_registered() (bittensor.subtensor method)": [[36, "bittensor.subtensor.is_hotkey_registered"]], "is_hotkey_registered_any() (bittensor.subtensor method)": [[36, "bittensor.subtensor.is_hotkey_registered_any"]], "is_hotkey_registered_on_subnet() (bittensor.subtensor method)": [[36, "bittensor.subtensor.is_hotkey_registered_on_subnet"]], "is_null (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.is_null"]], "is_null (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.is_null"]], "is_readable() (bittensor.mockkeyfile method)": [[36, "bittensor.Mockkeyfile.is_readable"]], "is_readable() (bittensor.keyfile method)": [[36, "bittensor.keyfile.is_readable"]], "is_senate_member() (bittensor.subtensor method)": [[36, "bittensor.subtensor.is_senate_member"]], "is_serving (bittensor.axoninfo property)": [[36, "bittensor.AxonInfo.is_serving"]], "is_set() (bittensor.config method)": [[36, "bittensor.config.is_set"]], "is_success (bittensor.synapse property)": [[36, "bittensor.Synapse.is_success"]], "is_timeout (bittensor.synapse property)": [[36, "bittensor.Synapse.is_timeout"]], "is_writable() (bittensor.mockkeyfile method)": [[36, "bittensor.Mockkeyfile.is_writable"]], "is_writable() (bittensor.keyfile method)": [[36, "bittensor.keyfile.is_writable"]], "kappa (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.kappa"]], "kappa (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.kappa"]], "kappa() (bittensor.subtensor method)": [[36, "bittensor.subtensor.kappa"]], "keyfile (class in bittensor)": [[36, "bittensor.keyfile"]], "keyfile_data (bittensor.keyfile property)": [[36, "bittensor.keyfile.keyfile_data"]], "keyfile_data_encryption_method() (in module bittensor)": [[36, "bittensor.keyfile_data_encryption_method"]], "keyfile_data_is_encrypted() (in module bittensor)": [[36, "bittensor.keyfile_data_is_encrypted"]], "keyfile_data_is_encrypted_ansible() (in module bittensor)": [[36, "bittensor.keyfile_data_is_encrypted_ansible"]], "keyfile_data_is_encrypted_legacy() (in module bittensor)": [[36, "bittensor.keyfile_data_is_encrypted_legacy"]], "keyfile_data_is_encrypted_nacl() (in module bittensor)": [[36, "bittensor.keyfile_data_is_encrypted_nacl"]], "keypair (bittensor.mockkeyfile property)": [[36, "bittensor.Mockkeyfile.keypair"]], "keypair (bittensor.dendrite attribute)": [[36, "bittensor.dendrite.keypair"]], "keypair (bittensor.keyfile property)": [[36, "bittensor.keyfile.keypair"]], "last_update (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.last_update"]], "last_update (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.last_update"]], "leave_senate() (bittensor.subtensor method)": [[36, "bittensor.subtensor.leave_senate"]], "legacy_encrypt_keyfile_data() (in module bittensor)": [[36, "bittensor.legacy_encrypt_keyfile_data"]], "list_from_vec_u8() (bittensor.delegateinfo class method)": [[36, "bittensor.DelegateInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.ipinfo class method)": [[36, "bittensor.IPInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.neuroninfo class method)": [[36, "bittensor.NeuronInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.neuroninfolite class method)": [[36, "bittensor.NeuronInfoLite.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.stakeinfo class method)": [[36, "bittensor.StakeInfo.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.subnethyperparameters class method)": [[36, "bittensor.SubnetHyperparameters.list_from_vec_u8"]], "list_from_vec_u8() (bittensor.subnetinfo class method)": [[36, "bittensor.SubnetInfo.list_from_vec_u8"]], "list_of_tuple_from_vec_u8() (bittensor.stakeinfo class method)": [[36, "bittensor.StakeInfo.list_of_tuple_from_vec_u8"]], "load() (bittensor.metagraph method)": [[36, "bittensor.metagraph.load"]], "load_from_path() (bittensor.metagraph method)": [[36, "bittensor.metagraph.load_from_path"]], "log_filter() (bittensor.logging class method)": [[36, "bittensor.logging.log_filter"]], "log_formatter() (bittensor.logging class method)": [[36, "bittensor.logging.log_formatter"]], "log_save_filter() (bittensor.logging class method)": [[36, "bittensor.logging.log_save_filter"]], "log_save_formatter() (bittensor.logging class method)": [[36, "bittensor.logging.log_save_formatter"]], "logging (class in bittensor)": [[36, "bittensor.logging"]], "make_dirs() (bittensor.mockkeyfile method)": [[36, "bittensor.Mockkeyfile.make_dirs"]], "make_dirs() (bittensor.keyfile method)": [[36, "bittensor.keyfile.make_dirs"]], "max_allowed_validators (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.max_allowed_validators"]], "max_allowed_validators() (bittensor.subtensor method)": [[36, "bittensor.subtensor.max_allowed_validators"]], "max_burn (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.max_burn"]], "max_difficulty (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.max_difficulty"]], "max_n (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.max_n"]], "max_n() (bittensor.subtensor method)": [[36, "bittensor.subtensor.max_n"]], "max_regs_per_block (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.max_regs_per_block"]], "max_weight_limit (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.max_weight_limit"]], "max_weight_limit (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.max_weight_limit"]], "max_weight_limit() (bittensor.subtensor method)": [[36, "bittensor.subtensor.max_weight_limit"]], "merge() (bittensor.config method)": [[36, "bittensor.config.merge"]], "merge_all() (bittensor.config class method)": [[36, "bittensor.config.merge_all"]], "metadata() (bittensor.metagraph method)": [[36, "bittensor.metagraph.metadata"]], "metagraph (class in bittensor)": [[36, "bittensor.metagraph"]], "metagraph() (bittensor.subtensor method)": [[36, "bittensor.subtensor.metagraph"]], "min_allowed_weights (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.min_allowed_weights"]], "min_allowed_weights (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.min_allowed_weights"]], "min_allowed_weights() (bittensor.subtensor method)": [[36, "bittensor.subtensor.min_allowed_weights"]], "min_burn (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.min_burn"]], "min_difficulty (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.min_difficulty"]], "modality (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.modality"]], "name (bittensor.synapse attribute)": [[36, "bittensor.Synapse.name"], [36, "id20"]], "name (bittensor.wallet attribute)": [[36, "bittensor.wallet.name"]], "nays (bittensor.proposalvotedata attribute)": [[36, "bittensor.ProposalVoteData.nays"]], "netuid (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.netuid"]], "netuid (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.netuid"]], "netuid (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.netuid"]], "network (bittensor.subtensor attribute)": [[36, "bittensor.subtensor.network"]], "neuron_for_uid() (bittensor.subtensor method)": [[36, "bittensor.subtensor.neuron_for_uid"]], "neuron_for_uid_lite() (bittensor.subtensor method)": [[36, "bittensor.subtensor.neuron_for_uid_lite"]], "neuron_for_wallet() (bittensor.subtensor method)": [[36, "bittensor.subtensor.neuron_for_wallet"]], "neuron_has_validator_permit() (bittensor.subtensor method)": [[36, "bittensor.subtensor.neuron_has_validator_permit"]], "neurons() (bittensor.subtensor method)": [[36, "bittensor.subtensor.neurons"]], "neurons_lite() (bittensor.subtensor method)": [[36, "bittensor.subtensor.neurons_lite"]], "new_coldkey() (bittensor.wallet method)": [[36, "bittensor.wallet.new_coldkey"]], "new_hotkey() (bittensor.wallet method)": [[36, "bittensor.wallet.new_hotkey"]], "nominate() (bittensor.subtensor method)": [[36, "bittensor.subtensor.nominate"]], "nominators (bittensor.delegateinfo attribute)": [[36, "bittensor.DelegateInfo.nominators"]], "nonce (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo.nonce"], [36, "id15"]], "numpy() (bittensor.tensor method)": [[36, "bittensor.Tensor.numpy"]], "owner_ss58 (bittensor.delegateinfo attribute)": [[36, "bittensor.DelegateInfo.owner_ss58"]], "owner_ss58 (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.owner_ss58"]], "parse_headers_to_inputs() (bittensor.synapse class method)": [[36, "id32"]], "parse_headers_to_inputs() (bittensor.synapse method)": [[36, "bittensor.Synapse.parse_headers_to_inputs"]], "path (bittensor.wallet attribute)": [[36, "bittensor.wallet.path"]], "placeholder1 (bittensor.axoninfo attribute)": [[36, "bittensor.AxonInfo.placeholder1"]], "placeholder2 (bittensor.axoninfo attribute)": [[36, "bittensor.AxonInfo.placeholder2"]], "port (bittensor.axoninfo attribute)": [[36, "bittensor.AxonInfo.port"]], "port (bittensor.prometheusinfo attribute)": [[36, "bittensor.PrometheusInfo.port"]], "port (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo.port"], [36, "id13"]], "preprocess_synapse_for_request() (bittensor.dendrite method)": [[36, "bittensor.dendrite.preprocess_synapse_for_request"], [36, "id60"]], "process_server_response() (bittensor.dendrite method)": [[36, "bittensor.dendrite.process_server_response"], [36, "id61"]], "process_streaming_response() (bittensor.streamingsynapse method)": [[36, "bittensor.StreamingSynapse.process_streaming_response"]], "process_time (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo.process_time"], [36, "id11"]], "prometheus_info (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.prometheus_info"]], "prometheus_info (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.prometheus_info"]], "protocol (bittensor.axoninfo attribute)": [[36, "bittensor.AxonInfo.protocol"]], "protocol (bittensor.ipinfo attribute)": [[36, "bittensor.IPInfo.protocol"]], "pruning_score (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.pruning_score"]], "pruning_score (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.pruning_score"]], "query() (bittensor.dendrite method)": [[36, "bittensor.dendrite.query"], [36, "id56"]], "query_constant() (bittensor.subtensor method)": [[36, "bittensor.subtensor.query_constant"]], "query_identity() (bittensor.subtensor method)": [[36, "bittensor.subtensor.query_identity"]], "query_map() (bittensor.subtensor method)": [[36, "bittensor.subtensor.query_map"]], "query_map_subtensor() (bittensor.subtensor method)": [[36, "bittensor.subtensor.query_map_subtensor"]], "query_module() (bittensor.subtensor method)": [[36, "bittensor.subtensor.query_module"]], "query_runtime_api() (bittensor.subtensor method)": [[36, "bittensor.subtensor.query_runtime_api"]], "query_subtensor() (bittensor.subtensor method)": [[36, "bittensor.subtensor.query_subtensor"]], "rank (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.rank"]], "rank (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.rank"]], "recreate() (bittensor.wallet method)": [[36, "bittensor.wallet.recreate"]], "regen_coldkey (bittensor.wallet attribute)": [[36, "bittensor.wallet.regen_coldkey"]], "regen_coldkeypub (bittensor.wallet attribute)": [[36, "bittensor.wallet.regen_coldkeypub"]], "regen_hotkey (bittensor.wallet attribute)": [[36, "bittensor.wallet.regen_hotkey"]], "regenerate_coldkey() (bittensor.wallet method)": [[36, "bittensor.wallet.regenerate_coldkey"]], "regenerate_coldkeypub() (bittensor.wallet method)": [[36, "bittensor.wallet.regenerate_coldkeypub"]], "regenerate_hotkey() (bittensor.wallet method)": [[36, "bittensor.wallet.regenerate_hotkey"]], "register() (bittensor.subtensor method)": [[36, "bittensor.subtensor.register"]], "register_senate() (bittensor.subtensor method)": [[36, "bittensor.subtensor.register_senate"]], "register_subnetwork() (bittensor.subtensor method)": [[36, "bittensor.subtensor.register_subnetwork"]], "registration_allowed (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.registration_allowed"]], "registrations (bittensor.delegateinfo attribute)": [[36, "bittensor.DelegateInfo.registrations"]], "required_hash_fields (bittensor.synapse attribute)": [[36, "bittensor.Synapse.required_hash_fields"], [36, "id27"]], "return_per_1000 (bittensor.delegateinfo attribute)": [[36, "bittensor.DelegateInfo.return_per_1000"]], "rho (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.rho"]], "rho (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.rho"]], "rho() (bittensor.subtensor method)": [[36, "bittensor.subtensor.rho"]], "root_register() (bittensor.subtensor method)": [[36, "bittensor.subtensor.root_register"]], "root_set_weights() (bittensor.subtensor method)": [[36, "bittensor.subtensor.root_set_weights"]], "run() (bittensor.cli method)": [[36, "bittensor.cli.run"]], "run_faucet() (bittensor.subtensor method)": [[36, "bittensor.subtensor.run_faucet"]], "save() (bittensor.metagraph method)": [[36, "bittensor.metagraph.save"]], "scaling_law_power (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.scaling_law_power"]], "scaling_law_power() (bittensor.subtensor method)": [[36, "bittensor.subtensor.scaling_law_power"]], "serialize() (bittensor.tensor static method)": [[36, "bittensor.Tensor.serialize"]], "serialized_keypair_to_keyfile_data() (in module bittensor)": [[36, "bittensor.serialized_keypair_to_keyfile_data"]], "serve() (bittensor.axon method)": [[36, "bittensor.axon.serve"]], "serve() (bittensor.subtensor method)": [[36, "bittensor.subtensor.serve"]], "serve_axon() (bittensor.subtensor method)": [[36, "bittensor.subtensor.serve_axon"]], "serve_prometheus() (bittensor.subtensor method)": [[36, "bittensor.subtensor.serve_prometheus"]], "serving_rate_limit() (bittensor.subtensor method)": [[36, "bittensor.subtensor.serving_rate_limit"]], "session (bittensor.dendrite property)": [[36, "bittensor.dendrite.session"]], "set_coldkey() (bittensor.wallet method)": [[36, "bittensor.wallet.set_coldkey"]], "set_coldkeypub() (bittensor.wallet method)": [[36, "bittensor.wallet.set_coldkeypub"]], "set_debug() (bittensor.logging class method)": [[36, "bittensor.logging.set_debug"]], "set_hotkey() (bittensor.wallet method)": [[36, "bittensor.wallet.set_hotkey"]], "set_hyperparameter() (bittensor.subtensor method)": [[36, "bittensor.subtensor.set_hyperparameter"]], "set_keypair() (bittensor.mockkeyfile method)": [[36, "bittensor.Mockkeyfile.set_keypair"]], "set_keypair() (bittensor.keyfile method)": [[36, "bittensor.keyfile.set_keypair"]], "set_name_type() (bittensor.synapse method)": [[36, "bittensor.Synapse.set_name_type"]], "set_trace() (bittensor.logging class method)": [[36, "bittensor.logging.set_trace"]], "set_weights() (bittensor.subtensor method)": [[36, "bittensor.subtensor.set_weights"]], "setup_config() (bittensor.subtensor static method)": [[36, "bittensor.subtensor.setup_config"]], "shape (bittensor.tensor attribute)": [[36, "bittensor.Tensor.shape"], [36, "id37"]], "shutdown() (bittensor.prioritythreadpoolexecutor method)": [[36, "bittensor.PriorityThreadPoolExecutor.shutdown"]], "signature (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo.signature"], [36, "id18"]], "stake (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.stake"]], "stake (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.stake"]], "stake (bittensor.stakeinfo attribute)": [[36, "bittensor.StakeInfo.stake"]], "stake_dict (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.stake_dict"]], "stake_dict (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.stake_dict"]], "start() (bittensor.axon method)": [[36, "bittensor.axon.start"]], "state_call() (bittensor.subtensor method)": [[36, "bittensor.subtensor.state_call"]], "status_code (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo.status_code"], [36, "id9"]], "status_message (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo.status_message"], [36, "id10"]], "stop() (bittensor.axon method)": [[36, "bittensor.axon.stop"]], "stream_response() (bittensor.streamingsynapse.btstreamingresponse method)": [[36, "bittensor.StreamingSynapse.BTStreamingResponse.stream_response"]], "submit() (bittensor.prioritythreadpoolexecutor method)": [[36, "bittensor.PriorityThreadPoolExecutor.submit"]], "subnet_exists() (bittensor.subtensor method)": [[36, "bittensor.subtensor.subnet_exists"]], "subnetwork_n (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.subnetwork_n"]], "subnetwork_n() (bittensor.subtensor method)": [[36, "bittensor.subtensor.subnetwork_n"]], "subtensor (class in bittensor)": [[36, "bittensor.subtensor"]], "success() (bittensor.logging class method)": [[36, "bittensor.logging.success"]], "swap_hotkey() (bittensor.subtensor method)": [[36, "bittensor.subtensor.swap_hotkey"]], "synapse_history (bittensor.dendrite attribute)": [[36, "bittensor.dendrite.synapse_history"]], "sync() (bittensor.metagraph method)": [[36, "bittensor.metagraph.sync"]], "synergy_scaling_law_power() (bittensor.subtensor method)": [[36, "bittensor.subtensor.synergy_scaling_law_power"]], "take (bittensor.delegateinfo attribute)": [[36, "bittensor.DelegateInfo.take"]], "target_regs_per_interval (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.target_regs_per_interval"]], "tempo (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.tempo"]], "tempo (bittensor.subnetinfo attribute)": [[36, "bittensor.SubnetInfo.tempo"]], "tempo() (bittensor.subtensor method)": [[36, "bittensor.subtensor.tempo"]], "tensor() (bittensor.tensor method)": [[36, "bittensor.Tensor.tensor"]], "threshold (bittensor.proposalvotedata attribute)": [[36, "bittensor.ProposalVoteData.threshold"]], "timeout (bittensor.synapse attribute)": [[36, "bittensor.Synapse.timeout"], [36, "id21"]], "to_headers() (bittensor.synapse method)": [[36, "bittensor.Synapse.to_headers"], [36, "id31"]], "to_parameter_dict() (bittensor.axoninfo method)": [[36, "bittensor.AxonInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.ipinfo method)": [[36, "bittensor.IPInfo.to_parameter_dict"]], "to_parameter_dict() (bittensor.subnethyperparameters method)": [[36, "bittensor.SubnetHyperparameters.to_parameter_dict"]], "to_parameter_dict() (bittensor.subnetinfo method)": [[36, "bittensor.SubnetInfo.to_parameter_dict"]], "to_string() (bittensor.axoninfo method)": [[36, "bittensor.AxonInfo.to_string"]], "to_string() (bittensor.axon method)": [[36, "bittensor.axon.to_string"]], "to_string() (bittensor.config method)": [[36, "bittensor.config.to_string"]], "token_streamer (bittensor.btstreamingresponsemodel attribute)": [[36, "bittensor.BTStreamingResponseModel.token_streamer"], [36, "id34"]], "tolist() (bittensor.tensor method)": [[36, "bittensor.Tensor.tolist"]], "total_daily_return (bittensor.delegateinfo attribute)": [[36, "bittensor.DelegateInfo.total_daily_return"]], "total_issuance() (bittensor.subtensor method)": [[36, "bittensor.subtensor.total_issuance"]], "total_size (bittensor.synapse attribute)": [[36, "bittensor.Synapse.total_size"], [36, "id22"]], "total_stake (bittensor.delegateinfo attribute)": [[36, "bittensor.DelegateInfo.total_stake"]], "total_stake (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.total_stake"]], "total_stake (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.total_stake"]], "total_stake() (bittensor.subtensor method)": [[36, "bittensor.subtensor.total_stake"]], "trace() (bittensor.logging class method)": [[36, "bittensor.logging.trace"]], "trace() (in module bittensor)": [[36, "bittensor.trace"]], "transfer() (bittensor.subtensor method)": [[36, "bittensor.subtensor.transfer"]], "trust (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.trust"]], "trust (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.trust"]], "turn_console_off() (in module bittensor)": [[36, "bittensor.turn_console_off"]], "turn_console_on() (in module bittensor)": [[36, "bittensor.turn_console_on"]], "tx_rate_limit() (bittensor.subtensor method)": [[36, "bittensor.subtensor.tx_rate_limit"]], "uid (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.uid"]], "uid (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.uid"]], "undelegate() (bittensor.subtensor method)": [[36, "bittensor.subtensor.undelegate"]], "unstake() (bittensor.subtensor method)": [[36, "bittensor.subtensor.unstake"]], "unstake_multiple() (bittensor.subtensor method)": [[36, "bittensor.subtensor.unstake_multiple"]], "update_identity() (bittensor.subtensor method)": [[36, "bittensor.subtensor.update_identity"]], "update_with_kwargs() (bittensor.config method)": [[36, "bittensor.config.update_with_kwargs"]], "uuid (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo.uuid"], [36, "id16"]], "validate_assignment (bittensor.streamingsynapse.config attribute)": [[36, "bittensor.StreamingSynapse.Config.validate_assignment"]], "validate_assignment (bittensor.synapse.config attribute)": [[36, "bittensor.Synapse.Config.validate_assignment"]], "validate_assignment (bittensor.tensor.config attribute)": [[36, "bittensor.Tensor.Config.validate_assignment"]], "validate_assignment (bittensor.terminalinfo.config attribute)": [[36, "bittensor.TerminalInfo.Config.validate_assignment"]], "validate_password() (in module bittensor)": [[36, "bittensor.validate_password"]], "validator_batch_size() (bittensor.subtensor method)": [[36, "bittensor.subtensor.validator_batch_size"]], "validator_epoch_length() (bittensor.subtensor method)": [[36, "bittensor.subtensor.validator_epoch_length"]], "validator_epochs_per_reset() (bittensor.subtensor method)": [[36, "bittensor.subtensor.validator_epochs_per_reset"]], "validator_exclude_quantile() (bittensor.subtensor method)": [[36, "bittensor.subtensor.validator_exclude_quantile"]], "validator_logits_divergence() (bittensor.subtensor method)": [[36, "bittensor.subtensor.validator_logits_divergence"]], "validator_permit (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.validator_permit"]], "validator_permit (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.validator_permit"]], "validator_permits (bittensor.delegateinfo attribute)": [[36, "bittensor.DelegateInfo.validator_permits"]], "validator_prune_len() (bittensor.subtensor method)": [[36, "bittensor.subtensor.validator_prune_len"]], "validator_sequence_length() (bittensor.subtensor method)": [[36, "bittensor.subtensor.validator_sequence_length"]], "validator_trust (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.validator_trust"]], "validator_trust (bittensor.neuroninfolite attribute)": [[36, "bittensor.NeuronInfoLite.validator_trust"]], "verify_body_integrity() (bittensor.axon method)": [[36, "bittensor.axon.verify_body_integrity"]], "version (bittensor.axoninfo attribute)": [[36, "bittensor.AxonInfo.version"]], "version (bittensor.prometheusinfo attribute)": [[36, "bittensor.PrometheusInfo.version"]], "version (bittensor.terminalinfo attribute)": [[36, "bittensor.TerminalInfo.version"], [36, "id14"]], "version_split (in module bittensor)": [[36, "bittensor.version_split"]], "vote_senate() (bittensor.subtensor method)": [[36, "bittensor.subtensor.vote_senate"]], "wallet (class in bittensor)": [[36, "bittensor.wallet"]], "warning() (bittensor.logging class method)": [[36, "bittensor.logging.warning"]], "weights (bittensor.neuroninfo attribute)": [[36, "bittensor.NeuronInfo.weights"]], "weights() (bittensor.subtensor method)": [[36, "bittensor.subtensor.weights"]], "weights_rate_limit (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.weights_rate_limit"]], "weights_version (bittensor.subnethyperparameters attribute)": [[36, "bittensor.SubnetHyperparameters.weights_version"]], "mockkeyfile (class in bittensor.keyfile)": [[37, "bittensor.keyfile.Mockkeyfile"]], "nacl_salt (in module bittensor.keyfile)": [[37, "bittensor.keyfile.NACL_SALT"]], "__repr__() (bittensor.keyfile.mockkeyfile method)": [[37, "bittensor.keyfile.Mockkeyfile.__repr__"]], "__repr__() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile.__repr__"]], "__str__() (bittensor.keyfile.mockkeyfile method)": [[37, "bittensor.keyfile.Mockkeyfile.__str__"]], "__str__() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile.__str__"]], "_may_overwrite() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile._may_overwrite"]], "_read_keyfile_data_from_file() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile._read_keyfile_data_from_file"]], "_write_keyfile_data_to_file() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile._write_keyfile_data_to_file"]], "ask_password_to_encrypt() (in module bittensor.keyfile)": [[37, "bittensor.keyfile.ask_password_to_encrypt"]], "bittensor.keyfile": [[37, "module-bittensor.keyfile"]], "check_and_update_encryption() (bittensor.keyfile.mockkeyfile method)": [[37, "bittensor.keyfile.Mockkeyfile.check_and_update_encryption"]], "check_and_update_encryption() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile.check_and_update_encryption"]], "data (bittensor.keyfile.mockkeyfile property)": [[37, "bittensor.keyfile.Mockkeyfile.data"]], "data (bittensor.keyfile.keyfile property)": [[37, "bittensor.keyfile.keyfile.data"]], "decrypt() (bittensor.keyfile.mockkeyfile method)": [[37, "bittensor.keyfile.Mockkeyfile.decrypt"]], "decrypt() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile.decrypt"]], "decrypt_keyfile_data() (in module bittensor.keyfile)": [[37, "bittensor.keyfile.decrypt_keyfile_data"]], "deserialize_keypair_from_keyfile_data() (in module bittensor.keyfile)": [[37, "bittensor.keyfile.deserialize_keypair_from_keyfile_data"]], "encrypt() (bittensor.keyfile.mockkeyfile method)": [[37, "bittensor.keyfile.Mockkeyfile.encrypt"]], "encrypt() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile.encrypt"]], "encrypt_keyfile_data() (in module bittensor.keyfile)": [[37, "bittensor.keyfile.encrypt_keyfile_data"]], "exists_on_device() (bittensor.keyfile.mockkeyfile method)": [[37, "bittensor.keyfile.Mockkeyfile.exists_on_device"]], "exists_on_device() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile.exists_on_device"]], "get_coldkey_password_from_environment() (in module bittensor.keyfile)": [[37, "bittensor.keyfile.get_coldkey_password_from_environment"]], "get_keypair() (bittensor.keyfile.mockkeyfile method)": [[37, "bittensor.keyfile.Mockkeyfile.get_keypair"]], "get_keypair() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile.get_keypair"]], "is_encrypted() (bittensor.keyfile.mockkeyfile method)": [[37, "bittensor.keyfile.Mockkeyfile.is_encrypted"]], "is_encrypted() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile.is_encrypted"]], "is_readable() (bittensor.keyfile.mockkeyfile method)": [[37, "bittensor.keyfile.Mockkeyfile.is_readable"]], "is_readable() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile.is_readable"]], "is_writable() (bittensor.keyfile.mockkeyfile method)": [[37, "bittensor.keyfile.Mockkeyfile.is_writable"]], "is_writable() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile.is_writable"]], "keyfile (class in bittensor.keyfile)": [[37, "bittensor.keyfile.keyfile"]], "keyfile_data (bittensor.keyfile.keyfile property)": [[37, "bittensor.keyfile.keyfile.keyfile_data"]], "keyfile_data_encryption_method() (in module bittensor.keyfile)": [[37, "bittensor.keyfile.keyfile_data_encryption_method"]], "keyfile_data_is_encrypted() (in module bittensor.keyfile)": [[37, "bittensor.keyfile.keyfile_data_is_encrypted"]], "keyfile_data_is_encrypted_ansible() (in module bittensor.keyfile)": [[37, "bittensor.keyfile.keyfile_data_is_encrypted_ansible"]], "keyfile_data_is_encrypted_legacy() (in module bittensor.keyfile)": [[37, "bittensor.keyfile.keyfile_data_is_encrypted_legacy"]], "keyfile_data_is_encrypted_nacl() (in module bittensor.keyfile)": [[37, "bittensor.keyfile.keyfile_data_is_encrypted_nacl"]], "keypair (bittensor.keyfile.mockkeyfile property)": [[37, "bittensor.keyfile.Mockkeyfile.keypair"]], "keypair (bittensor.keyfile.keyfile property)": [[37, "bittensor.keyfile.keyfile.keypair"]], "legacy_encrypt_keyfile_data() (in module bittensor.keyfile)": [[37, "bittensor.keyfile.legacy_encrypt_keyfile_data"]], "make_dirs() (bittensor.keyfile.mockkeyfile method)": [[37, "bittensor.keyfile.Mockkeyfile.make_dirs"]], "make_dirs() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile.make_dirs"]], "serialized_keypair_to_keyfile_data() (in module bittensor.keyfile)": [[37, "bittensor.keyfile.serialized_keypair_to_keyfile_data"]], "set_keypair() (bittensor.keyfile.mockkeyfile method)": [[37, "bittensor.keyfile.Mockkeyfile.set_keypair"]], "set_keypair() (bittensor.keyfile.keyfile method)": [[37, "bittensor.keyfile.keyfile.set_keypair"]], "validate_password() (in module bittensor.keyfile)": [[37, "bittensor.keyfile.validate_password"]], "b (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.B"]], "c (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.C"]], "d (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.D"]], "e (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.E"]], "i (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.I"]], "r (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.R"]], "s (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.S"]], "t (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.T"]], "tv (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.Tv"]], "w (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.W"]], "__repr__() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph.__repr__"]], "__str__() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph.__str__"]], "_assign_neurons() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph._assign_neurons"]], "_create_tensor() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph._create_tensor"]], "_initialize_subtensor() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph._initialize_subtensor"]], "_process_root_weights() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph._process_root_weights"]], "_process_weights_or_bonds() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph._process_weights_or_bonds"]], "_set_metagraph_attributes() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph._set_metagraph_attributes"]], "_set_weights_and_bonds() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph._set_weights_and_bonds"]], "addresses (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.addresses"]], "bittensor.metagraph": [[38, "module-bittensor.metagraph"]], "coldkeys (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.coldkeys"]], "get_save_dir() (in module bittensor.metagraph)": [[38, "bittensor.metagraph.get_save_dir"]], "hotkeys (bittensor.metagraph.metagraph property)": [[38, "bittensor.metagraph.metagraph.hotkeys"]], "latest_block_path() (in module bittensor.metagraph)": [[38, "bittensor.metagraph.latest_block_path"]], "load() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph.load"]], "load_from_path() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph.load_from_path"]], "metadata() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph.metadata"]], "metagraph (class in bittensor.metagraph)": [[38, "bittensor.metagraph.metagraph"]], "save() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph.save"]], "sync() (bittensor.metagraph.metagraph method)": [[38, "bittensor.metagraph.metagraph.sync"]], "btstreamingresponsemodel (class in bittensor.stream)": [[39, "bittensor.stream.BTStreamingResponseModel"]], "streamingsynapse (class in bittensor.stream)": [[39, "bittensor.stream.StreamingSynapse"]], "streamingsynapse.btstreamingresponse (class in bittensor.stream)": [[39, "bittensor.stream.StreamingSynapse.BTStreamingResponse"]], "streamingsynapse.config (class in bittensor.stream)": [[39, "bittensor.stream.StreamingSynapse.Config"]], "__call__() (bittensor.stream.streamingsynapse.btstreamingresponse method)": [[39, "bittensor.stream.StreamingSynapse.BTStreamingResponse.__call__"]], "bittensor.stream": [[39, "module-bittensor.stream"]], "create_streaming_response() (bittensor.stream.streamingsynapse method)": [[39, "bittensor.stream.StreamingSynapse.create_streaming_response"]], "extract_response_json() (bittensor.stream.streamingsynapse method)": [[39, "bittensor.stream.StreamingSynapse.extract_response_json"]], "process_streaming_response() (bittensor.stream.streamingsynapse method)": [[39, "bittensor.stream.StreamingSynapse.process_streaming_response"]], "stream_response() (bittensor.stream.streamingsynapse.btstreamingresponse method)": [[39, "bittensor.stream.StreamingSynapse.BTStreamingResponse.stream_response"]], "token_streamer (bittensor.stream.btstreamingresponsemodel attribute)": [[39, "bittensor.stream.BTStreamingResponseModel.token_streamer"], [39, "id0"]], "validate_assignment (bittensor.stream.streamingsynapse.config attribute)": [[39, "bittensor.stream.StreamingSynapse.Config.validate_assignment"]], "paramwithtypes (class in bittensor.subtensor)": [[40, "bittensor.subtensor.ParamWithTypes"]], "__repr__() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.__repr__"]], "__str__() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.__str__"]], "_do_associate_ips() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._do_associate_ips"]], "_do_burned_register() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._do_burned_register"]], "_do_delegation() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._do_delegation"]], "_do_nominate() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._do_nominate"]], "_do_pow_register() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._do_pow_register"]], "_do_root_register() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._do_root_register"]], "_do_serve_axon() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._do_serve_axon"]], "_do_serve_prometheus() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._do_serve_prometheus"]], "_do_set_weights() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._do_set_weights"]], "_do_stake() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._do_stake"]], "_do_swap_hotkey() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._do_swap_hotkey"]], "_do_transfer() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._do_transfer"]], "_do_undelegation() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._do_undelegation"]], "_do_unstake() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._do_unstake"]], "_encode_params() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor._encode_params"]], "_null_neuron() (bittensor.subtensor.subtensor static method)": [[40, "bittensor.subtensor.subtensor._null_neuron"]], "add_args() (bittensor.subtensor.subtensor class method)": [[40, "bittensor.subtensor.subtensor.add_args"]], "add_stake() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.add_stake"]], "add_stake_multiple() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.add_stake_multiple"]], "associated_validator_ip_info() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.associated_validator_ip_info"]], "bittensor.subtensor": [[40, "module-bittensor.subtensor"]], "block (bittensor.subtensor.subtensor property)": [[40, "bittensor.subtensor.subtensor.block"]], "blocks_since_epoch() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.blocks_since_epoch"]], "bonds() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.bonds"]], "burn() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.burn"]], "burned_register() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.burned_register"]], "chain_endpoint (bittensor.subtensor.subtensor attribute)": [[40, "bittensor.subtensor.subtensor.chain_endpoint"]], "config() (bittensor.subtensor.subtensor static method)": [[40, "bittensor.subtensor.subtensor.config"]], "delegate() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.delegate"]], "determine_chain_endpoint_and_network() (bittensor.subtensor.subtensor static method)": [[40, "bittensor.subtensor.subtensor.determine_chain_endpoint_and_network"]], "difficulty() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.difficulty"]], "does_hotkey_exist() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.does_hotkey_exist"]], "get_all_neurons_for_pubkey() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_all_neurons_for_pubkey"]], "get_all_subnet_netuids() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_all_subnet_netuids"]], "get_all_subnets_info() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_all_subnets_info"]], "get_all_uids_for_hotkey() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_all_uids_for_hotkey"]], "get_axon_info() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_axon_info"]], "get_balance() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_balance"]], "get_balances() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_balances"]], "get_block_hash() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_block_hash"]], "get_current_block() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_current_block"]], "get_delegate_by_hotkey() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_delegate_by_hotkey"]], "get_delegate_take() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_delegate_take"]], "get_delegated() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_delegated"]], "get_delegates() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_delegates"]], "get_emission_value_by_subnet() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_emission_value_by_subnet"]], "get_existential_deposit() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_existential_deposit"]], "get_hotkey_owner() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_hotkey_owner"]], "get_netuids_for_hotkey() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_netuids_for_hotkey"]], "get_neuron_for_pubkey_and_subnet() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_neuron_for_pubkey_and_subnet"]], "get_nominators_for_hotkey() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_nominators_for_hotkey"]], "get_prometheus_info() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_prometheus_info"]], "get_proposal_call_data() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_proposal_call_data"]], "get_proposal_hashes() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_proposal_hashes"]], "get_proposal_vote_data (bittensor.subtensor.subtensor attribute)": [[40, "bittensor.subtensor.subtensor.get_proposal_vote_data"]], "get_proposals() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_proposals"]], "get_senate_members() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_senate_members"]], "get_stake() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_stake"]], "get_stake_for_coldkey_and_hotkey() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_stake_for_coldkey_and_hotkey"]], "get_stake_info_for_coldkey() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_stake_info_for_coldkey"]], "get_stake_info_for_coldkeys() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_stake_info_for_coldkeys"]], "get_subnet_burn_cost() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_subnet_burn_cost"]], "get_subnet_connection_requirement() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_subnet_connection_requirement"]], "get_subnet_connection_requirements() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_subnet_connection_requirements"]], "get_subnet_hyperparameters() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_subnet_hyperparameters"]], "get_subnet_info() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_subnet_info"]], "get_subnet_modality() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_subnet_modality"]], "get_subnet_owner() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_subnet_owner"]], "get_subnets() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_subnets"]], "get_total_stake_for_coldkey() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_total_stake_for_coldkey"]], "get_total_stake_for_hotkey() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_total_stake_for_hotkey"]], "get_total_subnets() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_total_subnets"]], "get_transfer_fee() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_transfer_fee"]], "get_uid_for_hotkey_on_subnet() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_uid_for_hotkey_on_subnet"]], "get_vote_data() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.get_vote_data"]], "help() (bittensor.subtensor.subtensor class method)": [[40, "bittensor.subtensor.subtensor.help"]], "immunity_period() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.immunity_period"]], "incentive() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.incentive"]], "is_hotkey_delegate() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.is_hotkey_delegate"]], "is_hotkey_registered() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.is_hotkey_registered"]], "is_hotkey_registered_any() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.is_hotkey_registered_any"]], "is_hotkey_registered_on_subnet() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.is_hotkey_registered_on_subnet"]], "is_senate_member() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.is_senate_member"]], "kappa() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.kappa"]], "leave_senate() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.leave_senate"]], "logger (in module bittensor.subtensor)": [[40, "bittensor.subtensor.logger"]], "max_allowed_validators() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.max_allowed_validators"]], "max_n() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.max_n"]], "max_weight_limit() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.max_weight_limit"]], "metagraph() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.metagraph"]], "min_allowed_weights() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.min_allowed_weights"]], "name (bittensor.subtensor.paramwithtypes attribute)": [[40, "bittensor.subtensor.ParamWithTypes.name"]], "network (bittensor.subtensor.subtensor attribute)": [[40, "bittensor.subtensor.subtensor.network"]], "neuron_for_uid() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.neuron_for_uid"]], "neuron_for_uid_lite() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.neuron_for_uid_lite"]], "neuron_for_wallet() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.neuron_for_wallet"]], "neuron_has_validator_permit() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.neuron_has_validator_permit"]], "neurons() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.neurons"]], "neurons_lite() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.neurons_lite"]], "nominate() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.nominate"]], "query_constant() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.query_constant"]], "query_identity() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.query_identity"]], "query_map() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.query_map"]], "query_map_subtensor() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.query_map_subtensor"]], "query_module() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.query_module"]], "query_runtime_api() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.query_runtime_api"]], "query_subtensor() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.query_subtensor"]], "register() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.register"]], "register_senate() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.register_senate"]], "register_subnetwork() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.register_subnetwork"]], "rho() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.rho"]], "root_register() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.root_register"]], "root_set_weights() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.root_set_weights"]], "run_faucet() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.run_faucet"]], "scaling_law_power() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.scaling_law_power"]], "serve() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.serve"]], "serve_axon() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.serve_axon"]], "serve_prometheus() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.serve_prometheus"]], "serving_rate_limit() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.serving_rate_limit"]], "set_hyperparameter() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.set_hyperparameter"]], "set_weights() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.set_weights"]], "setup_config() (bittensor.subtensor.subtensor static method)": [[40, "bittensor.subtensor.subtensor.setup_config"]], "state_call() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.state_call"]], "subnet_exists() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.subnet_exists"]], "subnetwork_n() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.subnetwork_n"]], "subtensor (class in bittensor.subtensor)": [[40, "bittensor.subtensor.subtensor"]], "swap_hotkey() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.swap_hotkey"]], "synergy_scaling_law_power() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.synergy_scaling_law_power"]], "tempo() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.tempo"]], "total_issuance() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.total_issuance"]], "total_stake() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.total_stake"]], "transfer() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.transfer"]], "tx_rate_limit() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.tx_rate_limit"]], "type (bittensor.subtensor.paramwithtypes attribute)": [[40, "bittensor.subtensor.ParamWithTypes.type"]], "undelegate() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.undelegate"]], "unstake() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.unstake"]], "unstake_multiple() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.unstake_multiple"]], "update_identity() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.update_identity"]], "validator_batch_size() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.validator_batch_size"]], "validator_epoch_length() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.validator_epoch_length"]], "validator_epochs_per_reset() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.validator_epochs_per_reset"]], "validator_exclude_quantile() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.validator_exclude_quantile"]], "validator_logits_divergence() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.validator_logits_divergence"]], "validator_prune_len() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.validator_prune_len"]], "validator_sequence_length() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.validator_sequence_length"]], "vote_senate() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.vote_senate"]], "weights() (bittensor.subtensor.subtensor method)": [[40, "bittensor.subtensor.subtensor.weights"]], "synapse (class in bittensor.synapse)": [[41, "bittensor.synapse.Synapse"]], "synapse.config (class in bittensor.synapse)": [[41, "bittensor.synapse.Synapse.Config"]], "terminalinfo (class in bittensor.synapse)": [[41, "bittensor.synapse.TerminalInfo"]], "terminalinfo.config (class in bittensor.synapse)": [[41, "bittensor.synapse.TerminalInfo.Config"]], "__setattr__() (bittensor.synapse.synapse method)": [[41, "bittensor.synapse.Synapse.__setattr__"], [41, "id20"]], "_extract_header_size (bittensor.synapse.synapse attribute)": [[41, "bittensor.synapse.Synapse._extract_header_size"]], "_extract_nonce (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo._extract_nonce"]], "_extract_port (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo._extract_port"]], "_extract_process_time (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo._extract_process_time"]], "_extract_status_code (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo._extract_status_code"]], "_extract_timeout (bittensor.synapse.synapse attribute)": [[41, "bittensor.synapse.Synapse._extract_timeout"]], "_extract_total_size (bittensor.synapse.synapse attribute)": [[41, "bittensor.synapse.Synapse._extract_total_size"]], "_extract_version (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo._extract_version"]], "axon (bittensor.synapse.synapse attribute)": [[41, "bittensor.synapse.Synapse.axon"], [41, "id16"]], "bittensor.synapse": [[41, "module-bittensor.synapse"]], "body_hash (bittensor.synapse.synapse property)": [[41, "id10"]], "body_hash() (bittensor.synapse.synapse method)": [[41, "bittensor.synapse.Synapse.body_hash"]], "cast_float() (in module bittensor.synapse)": [[41, "bittensor.synapse.cast_float"]], "cast_int() (in module bittensor.synapse)": [[41, "bittensor.synapse.cast_int"]], "computed_body_hash (bittensor.synapse.synapse attribute)": [[41, "bittensor.synapse.Synapse.computed_body_hash"], [41, "id17"]], "dendrite (bittensor.synapse.synapse attribute)": [[41, "bittensor.synapse.Synapse.dendrite"], [41, "id15"]], "deserialize() (bittensor.synapse.synapse method)": [[41, "bittensor.synapse.Synapse.deserialize"], [41, "id19"]], "failed_verification (bittensor.synapse.synapse property)": [[41, "bittensor.synapse.Synapse.failed_verification"]], "from_headers() (bittensor.synapse.synapse class method)": [[41, "id24"]], "from_headers() (bittensor.synapse.synapse method)": [[41, "bittensor.synapse.Synapse.from_headers"]], "get_size() (in module bittensor.synapse)": [[41, "bittensor.synapse.get_size"]], "get_total_size() (bittensor.synapse.synapse method)": [[41, "bittensor.synapse.Synapse.get_total_size"], [41, "id21"]], "header_size (bittensor.synapse.synapse attribute)": [[41, "bittensor.synapse.Synapse.header_size"], [41, "id14"]], "hotkey (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo.hotkey"], [41, "id8"]], "ip (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo.ip"], [41, "id3"]], "is_blacklist (bittensor.synapse.synapse property)": [[41, "bittensor.synapse.Synapse.is_blacklist"]], "is_failure (bittensor.synapse.synapse property)": [[41, "bittensor.synapse.Synapse.is_failure"]], "is_success (bittensor.synapse.synapse property)": [[41, "bittensor.synapse.Synapse.is_success"]], "is_timeout (bittensor.synapse.synapse property)": [[41, "bittensor.synapse.Synapse.is_timeout"]], "name (bittensor.synapse.synapse attribute)": [[41, "bittensor.synapse.Synapse.name"], [41, "id11"]], "nonce (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo.nonce"], [41, "id6"]], "parse_headers_to_inputs() (bittensor.synapse.synapse class method)": [[41, "id23"]], "parse_headers_to_inputs() (bittensor.synapse.synapse method)": [[41, "bittensor.synapse.Synapse.parse_headers_to_inputs"]], "port (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo.port"], [41, "id4"]], "process_time (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo.process_time"], [41, "id2"]], "required_hash_fields (bittensor.synapse.synapse attribute)": [[41, "bittensor.synapse.Synapse.required_hash_fields"], [41, "id18"]], "set_name_type() (bittensor.synapse.synapse method)": [[41, "bittensor.synapse.Synapse.set_name_type"]], "signature (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo.signature"], [41, "id9"]], "status_code (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo.status_code"], [41, "id0"]], "status_message (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo.status_message"], [41, "id1"]], "timeout (bittensor.synapse.synapse attribute)": [[41, "bittensor.synapse.Synapse.timeout"], [41, "id12"]], "to_headers() (bittensor.synapse.synapse method)": [[41, "bittensor.synapse.Synapse.to_headers"], [41, "id22"]], "total_size (bittensor.synapse.synapse attribute)": [[41, "bittensor.synapse.Synapse.total_size"], [41, "id13"]], "uuid (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo.uuid"], [41, "id7"]], "validate_assignment (bittensor.synapse.synapse.config attribute)": [[41, "bittensor.synapse.Synapse.Config.validate_assignment"]], "validate_assignment (bittensor.synapse.terminalinfo.config attribute)": [[41, "bittensor.synapse.TerminalInfo.Config.validate_assignment"]], "version (bittensor.synapse.terminalinfo attribute)": [[41, "bittensor.synapse.TerminalInfo.version"], [41, "id5"]], "torch_dtypes (in module bittensor.tensor)": [[42, "bittensor.tensor.TORCH_DTYPES"]], "tensor (class in bittensor.tensor)": [[42, "bittensor.tensor.Tensor"], [42, "bittensor.tensor.tensor"]], "tensor.config (class in bittensor.tensor)": [[42, "bittensor.tensor.Tensor.Config"]], "_extract_dtype (bittensor.tensor.tensor attribute)": [[42, "bittensor.tensor.Tensor._extract_dtype"]], "_extract_shape (bittensor.tensor.tensor attribute)": [[42, "bittensor.tensor.Tensor._extract_shape"]], "bittensor.tensor": [[42, "module-bittensor.tensor"]], "buffer (bittensor.tensor.tensor attribute)": [[42, "bittensor.tensor.Tensor.buffer"], [42, "id0"]], "cast_dtype() (in module bittensor.tensor)": [[42, "bittensor.tensor.cast_dtype"]], "cast_shape() (in module bittensor.tensor)": [[42, "bittensor.tensor.cast_shape"]], "deserialize() (bittensor.tensor.tensor method)": [[42, "bittensor.tensor.Tensor.deserialize"]], "dtype (bittensor.tensor.tensor attribute)": [[42, "bittensor.tensor.Tensor.dtype"], [42, "id1"]], "numpy() (bittensor.tensor.tensor method)": [[42, "bittensor.tensor.Tensor.numpy"]], "serialize() (bittensor.tensor.tensor static method)": [[42, "bittensor.tensor.Tensor.serialize"]], "shape (bittensor.tensor.tensor attribute)": [[42, "bittensor.tensor.Tensor.shape"], [42, "id2"]], "tensor() (bittensor.tensor.tensor method)": [[42, "bittensor.tensor.Tensor.tensor"]], "tolist() (bittensor.tensor.tensor method)": [[42, "bittensor.tensor.Tensor.tolist"]], "validate_assignment (bittensor.tensor.tensor.config attribute)": [[42, "bittensor.tensor.Tensor.Config.validate_assignment"]], "brokenthreadpool": [[43, "bittensor.threadpool.BrokenThreadPool"]], "null_entry (in module bittensor.threadpool)": [[43, "bittensor.threadpool.NULL_ENTRY"]], "prioritythreadpoolexecutor (class in bittensor.threadpool)": [[43, "bittensor.threadpool.PriorityThreadPoolExecutor"]], "_workitem (class in bittensor.threadpool)": [[43, "bittensor.threadpool._WorkItem"]], "__author__ (in module bittensor.threadpool)": [[43, "bittensor.threadpool.__author__"]], "_adjust_thread_count() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[43, "bittensor.threadpool.PriorityThreadPoolExecutor._adjust_thread_count"]], "_counter (bittensor.threadpool.prioritythreadpoolexecutor attribute)": [[43, "bittensor.threadpool.PriorityThreadPoolExecutor._counter"]], "_initializer_failed() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[43, "bittensor.threadpool.PriorityThreadPoolExecutor._initializer_failed"]], "_shutdown (in module bittensor.threadpool)": [[43, "bittensor.threadpool._shutdown"]], "_threads_queues (in module bittensor.threadpool)": [[43, "bittensor.threadpool._threads_queues"]], "_worker() (in module bittensor.threadpool)": [[43, "bittensor.threadpool._worker"]], "add_args() (bittensor.threadpool.prioritythreadpoolexecutor class method)": [[43, "bittensor.threadpool.PriorityThreadPoolExecutor.add_args"]], "bittensor.threadpool": [[43, "module-bittensor.threadpool"]], "config() (bittensor.threadpool.prioritythreadpoolexecutor class method)": [[43, "bittensor.threadpool.PriorityThreadPoolExecutor.config"]], "is_empty (bittensor.threadpool.prioritythreadpoolexecutor property)": [[43, "bittensor.threadpool.PriorityThreadPoolExecutor.is_empty"]], "run() (bittensor.threadpool._workitem method)": [[43, "bittensor.threadpool._WorkItem.run"]], "shutdown() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[43, "bittensor.threadpool.PriorityThreadPoolExecutor.shutdown"]], "submit() (bittensor.threadpool.prioritythreadpoolexecutor method)": [[43, "bittensor.threadpool.PriorityThreadPoolExecutor.submit"]], "axonservecallparams (class in bittensor.types)": [[44, "bittensor.types.AxonServeCallParams"]], "prometheusservecallparams (class in bittensor.types)": [[44, "bittensor.types.PrometheusServeCallParams"]], "bittensor.types": [[44, "module-bittensor.types"]], "ip (bittensor.types.axonservecallparams attribute)": [[44, "bittensor.types.AxonServeCallParams.ip"]], "ip (bittensor.types.prometheusservecallparams attribute)": [[44, "bittensor.types.PrometheusServeCallParams.ip"]], "ip_type (bittensor.types.axonservecallparams attribute)": [[44, "bittensor.types.AxonServeCallParams.ip_type"]], "ip_type (bittensor.types.prometheusservecallparams attribute)": [[44, "bittensor.types.PrometheusServeCallParams.ip_type"]], "netuid (bittensor.types.axonservecallparams attribute)": [[44, "bittensor.types.AxonServeCallParams.netuid"]], "netuid (bittensor.types.prometheusservecallparams attribute)": [[44, "bittensor.types.PrometheusServeCallParams.netuid"]], "port (bittensor.types.axonservecallparams attribute)": [[44, "bittensor.types.AxonServeCallParams.port"]], "port (bittensor.types.prometheusservecallparams attribute)": [[44, "bittensor.types.PrometheusServeCallParams.port"]], "version (bittensor.types.axonservecallparams attribute)": [[44, "bittensor.types.AxonServeCallParams.version"]], "version (bittensor.types.prometheusservecallparams attribute)": [[44, "bittensor.types.PrometheusServeCallParams.version"]], "__repr__() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.__repr__"]], "__str__() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.__str__"]], "add_args() (bittensor.wallet.wallet class method)": [[45, "bittensor.wallet.wallet.add_args"]], "bittensor.wallet": [[45, "module-bittensor.wallet"]], "coldkey (bittensor.wallet.wallet property)": [[45, "bittensor.wallet.wallet.coldkey"]], "coldkey_file (bittensor.wallet.wallet property)": [[45, "bittensor.wallet.wallet.coldkey_file"]], "coldkeypub (bittensor.wallet.wallet property)": [[45, "bittensor.wallet.wallet.coldkeypub"]], "coldkeypub_file (bittensor.wallet.wallet property)": [[45, "bittensor.wallet.wallet.coldkeypub_file"]], "config() (bittensor.wallet.wallet class method)": [[45, "bittensor.wallet.wallet.config"]], "create() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.create"]], "create_coldkey_from_uri() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.create_coldkey_from_uri"]], "create_hotkey_from_uri() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.create_hotkey_from_uri"]], "create_if_non_existent() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.create_if_non_existent"]], "create_new_coldkey() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.create_new_coldkey"]], "create_new_hotkey() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.create_new_hotkey"]], "display_mnemonic_msg() (in module bittensor.wallet)": [[45, "bittensor.wallet.display_mnemonic_msg"]], "get_coldkey() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.get_coldkey"]], "get_coldkeypub() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.get_coldkeypub"]], "get_hotkey() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.get_hotkey"]], "help() (bittensor.wallet.wallet class method)": [[45, "bittensor.wallet.wallet.help"]], "hotkey (bittensor.wallet.wallet property)": [[45, "bittensor.wallet.wallet.hotkey"]], "hotkey_file (bittensor.wallet.wallet property)": [[45, "bittensor.wallet.wallet.hotkey_file"]], "hotkey_str (bittensor.wallet.wallet attribute)": [[45, "bittensor.wallet.wallet.hotkey_str"]], "name (bittensor.wallet.wallet attribute)": [[45, "bittensor.wallet.wallet.name"]], "new_coldkey() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.new_coldkey"]], "new_hotkey() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.new_hotkey"]], "path (bittensor.wallet.wallet attribute)": [[45, "bittensor.wallet.wallet.path"]], "recreate() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.recreate"]], "regen_coldkey (bittensor.wallet.wallet attribute)": [[45, "bittensor.wallet.wallet.regen_coldkey"]], "regen_coldkeypub (bittensor.wallet.wallet attribute)": [[45, "bittensor.wallet.wallet.regen_coldkeypub"]], "regen_hotkey (bittensor.wallet.wallet attribute)": [[45, "bittensor.wallet.wallet.regen_hotkey"]], "regenerate_coldkey() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.regenerate_coldkey"]], "regenerate_coldkeypub() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.regenerate_coldkeypub"]], "regenerate_hotkey() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.regenerate_hotkey"]], "set_coldkey() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.set_coldkey"]], "set_coldkeypub() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.set_coldkeypub"]], "set_hotkey() (bittensor.wallet.wallet method)": [[45, "bittensor.wallet.wallet.set_hotkey"]], "wallet (class in bittensor.wallet)": [[45, "bittensor.wallet.wallet"]], "openaiminer (class in miner)": [[47, "miner.OpenAIMiner"]], "add_args() (miner.openaiminer class method)": [[47, "miner.OpenAIMiner.add_args"]], "config() (miner.openaiminer method)": [[47, "miner.OpenAIMiner.config"]], "miner": [[47, "module-miner"]], "openai_api_key (in module miner)": [[47, "miner.openai_api_key"]], "prompt() (miner.openaiminer method)": [[47, "miner.OpenAIMiner.prompt"]], "neurons": [[48, "module-neurons"]], "neurons.validators": [[49, "module-neurons.validators"]], "add_args() (neurons.validators.validator.neuron class method)": [[50, "neurons.validators.validator.neuron.add_args"]], "check_config() (neurons.validators.validator.neuron class method)": [[50, "neurons.validators.validator.neuron.check_config"]], "config() (neurons.validators.validator.neuron class method)": [[50, "neurons.validators.validator.neuron.config"]], "main() (in module neurons.validators.validator)": [[50, "neurons.validators.validator.main"]], "metagraph (neurons.validators.validator.neuron attribute)": [[50, "neurons.validators.validator.neuron.metagraph"]], "neuron (class in neurons.validators.validator)": [[50, "neurons.validators.validator.neuron"]], "neurons.validators.validator": [[50, "module-neurons.validators.validator"]], "run() (neurons.validators.validator.neuron method)": [[50, "neurons.validators.validator.neuron.run"]], "subtensor (neurons.validators.validator.neuron attribute)": [[50, "neurons.validators.validator.neuron.subtensor"]], "wallet (neurons.validators.validator.neuron attribute)": [[50, "neurons.validators.validator.neuron.wallet"]], "blacklist() (in module prompting.baseminer.blacklist)": [[51, "prompting.baseminer.blacklist.blacklist"]], "default_blacklist() (in module prompting.baseminer.blacklist)": [[51, "prompting.baseminer.blacklist.default_blacklist"]], "is_prompt_in_cache() (in module prompting.baseminer.blacklist)": [[51, "prompting.baseminer.blacklist.is_prompt_in_cache"]], "prompting.baseminer.blacklist": [[51, "module-prompting.baseminer.blacklist"]], "check_config() (in module prompting.baseminer.config)": [[52, "prompting.baseminer.config.check_config"]], "get_config() (in module prompting.baseminer.config)": [[52, "prompting.baseminer.config.get_config"]], "prompting.baseminer.config": [[52, "module-prompting.baseminer.config"]], "prompting.baseminer": [[53, "module-prompting.baseminer"]], "miner (class in prompting.baseminer.miner)": [[54, "prompting.baseminer.miner.Miner"]], "__enter__() (prompting.baseminer.miner.miner method)": [[54, "prompting.baseminer.miner.Miner.__enter__"]], "__exit__() (prompting.baseminer.miner.miner method)": [[54, "prompting.baseminer.miner.Miner.__exit__"]], "_prompt() (prompting.baseminer.miner.miner method)": [[54, "prompting.baseminer.miner.Miner._prompt"]], "add_args() (prompting.baseminer.miner.miner class method)": [[54, "prompting.baseminer.miner.Miner.add_args"]], "blacklist() (prompting.baseminer.miner.miner method)": [[54, "prompting.baseminer.miner.Miner.blacklist"]], "config() (prompting.baseminer.miner.miner method)": [[54, "prompting.baseminer.miner.Miner.config"]], "priority() (prompting.baseminer.miner.miner method)": [[54, "prompting.baseminer.miner.Miner.priority"]], "prompt() (prompting.baseminer.miner.miner method)": [[54, "prompting.baseminer.miner.Miner.prompt"]], "prompting.baseminer.miner": [[54, "module-prompting.baseminer.miner"]], "run() (prompting.baseminer.miner.miner method)": [[54, "prompting.baseminer.miner.Miner.run"]], "run_in_background_thread() (prompting.baseminer.miner.miner method)": [[54, "prompting.baseminer.miner.Miner.run_in_background_thread"]], "stop_run_thread() (prompting.baseminer.miner.miner method)": [[54, "prompting.baseminer.miner.Miner.stop_run_thread"]], "default_priority() (in module prompting.baseminer.priority)": [[55, "prompting.baseminer.priority.default_priority"]], "priority() (in module prompting.baseminer.priority)": [[55, "prompting.baseminer.priority.priority"]], "prompting.baseminer.priority": [[55, "module-prompting.baseminer.priority"]], "record_request_timestamps() (in module prompting.baseminer.priority)": [[55, "prompting.baseminer.priority.record_request_timestamps"]], "prompting.baseminer.run": [[56, "module-prompting.baseminer.run"]], "run() (in module prompting.baseminer.run)": [[56, "prompting.baseminer.run.run"]], "prompting.baseminer.set_weights": [[57, "module-prompting.baseminer.set_weights"]], "set_weights() (in module prompting.baseminer.set_weights)": [[57, "prompting.baseminer.set_weights.set_weights"]], "__spec_version__ (in module prompting)": [[58, "prompting.__spec_version__"]], "__version__ (in module prompting)": [[58, "prompting.__version__"]], "prompting": [[58, "module-prompting"]], "version_split (in module prompting)": [[58, "prompting.version_split"]], "prompting (class in prompting.protocol)": [[59, "prompting.protocol.Prompting"]], "prompting.config (class in prompting.protocol)": [[59, "prompting.protocol.Prompting.Config"]], "streamprompting (class in prompting.protocol)": [[59, "prompting.protocol.StreamPrompting"]], "completion (prompting.protocol.prompting attribute)": [[59, "id10"], [59, "prompting.protocol.Prompting.completion"]], "completion (prompting.protocol.streamprompting attribute)": [[59, "prompting.protocol.StreamPrompting.completion"]], "deserialize() (prompting.protocol.prompting method)": [[59, "id11"], [59, "prompting.protocol.Prompting.deserialize"]], "deserialize() (prompting.protocol.streamprompting method)": [[59, "prompting.protocol.StreamPrompting.deserialize"]], "extract_response_json() (prompting.protocol.streamprompting method)": [[59, "prompting.protocol.StreamPrompting.extract_response_json"]], "messages (prompting.protocol.prompting attribute)": [[59, "id9"], [59, "prompting.protocol.Prompting.messages"]], "messages (prompting.protocol.streamprompting attribute)": [[59, "prompting.protocol.StreamPrompting.messages"]], "process_streaming_response() (prompting.protocol.streamprompting method)": [[59, "prompting.protocol.StreamPrompting.process_streaming_response"]], "prompting.protocol": [[59, "module-prompting.protocol"]], "required_hash_fields (prompting.protocol.prompting attribute)": [[59, "prompting.protocol.Prompting.required_hash_fields"]], "required_hash_fields (prompting.protocol.streamprompting attribute)": [[59, "prompting.protocol.StreamPrompting.required_hash_fields"]], "roles (prompting.protocol.prompting attribute)": [[59, "id0"], [59, "prompting.protocol.Prompting.roles"]], "roles (prompting.protocol.streamprompting attribute)": [[59, "prompting.protocol.StreamPrompting.roles"]], "validate_assignment (prompting.protocol.prompting.config attribute)": [[59, "prompting.protocol.Prompting.Config.validate_assignment"]], "add_args() (in module prompting.validators.config)": [[60, "prompting.validators.config.add_args"]], "check_config() (in module prompting.validators.config)": [[60, "prompting.validators.config.check_config"]], "config() (in module prompting.validators.config)": [[60, "prompting.validators.config.config"]], "prompting.validators.config": [[60, "module-prompting.validators.config"]], "characters (prompting.validators.criteria.textlengthunitenum attribute)": [[61, "prompting.validators.criteria.TextLengthUnitEnum.CHARACTERS"]], "contentmatchtypeenum (class in prompting.validators.criteria)": [[61, "prompting.validators.criteria.ContentMatchTypeEnum"]], "ends_with (prompting.validators.criteria.contentmatchtypeenum attribute)": [[61, "prompting.validators.criteria.ContentMatchTypeEnum.ENDS_WITH"]], "includes (prompting.validators.criteria.contentmatchtypeenum attribute)": [[61, "prompting.validators.criteria.ContentMatchTypeEnum.INCLUDES"]], "layoutmatchtypeenum (class in prompting.validators.criteria)": [[61, "prompting.validators.criteria.LayoutMatchTypeEnum"]], "matchcontentcriteria (class in prompting.validators.criteria)": [[61, "prompting.validators.criteria.MatchContentCriteria"]], "matchlayoutcriteria (class in prompting.validators.criteria)": [[61, "prompting.validators.criteria.MatchLayoutCriteria"]], "matchlengthcriteria (class in prompting.validators.criteria)": [[61, "prompting.validators.criteria.MatchLengthCriteria"]], "numbered_list (prompting.validators.criteria.layoutmatchtypeenum attribute)": [[61, "prompting.validators.criteria.LayoutMatchTypeEnum.NUMBERED_LIST"]], "paragraphs (prompting.validators.criteria.textlengthunitenum attribute)": [[61, "prompting.validators.criteria.TextLengthUnitEnum.PARAGRAPHS"]], "sentences (prompting.validators.criteria.textlengthunitenum attribute)": [[61, "prompting.validators.criteria.TextLengthUnitEnum.SENTENCES"]], "starts_with (prompting.validators.criteria.contentmatchtypeenum attribute)": [[61, "prompting.validators.criteria.ContentMatchTypeEnum.STARTS_WITH"]], "simpleresponselayoutcriteria (class in prompting.validators.criteria)": [[61, "prompting.validators.criteria.SimpleResponseLayoutCriteria"]], "taskcriterion (class in prompting.validators.criteria)": [[61, "prompting.validators.criteria.TaskCriterion"]], "textlengthunitenum (class in prompting.validators.criteria)": [[61, "prompting.validators.criteria.TextLengthUnitEnum"]], "unordered_list (prompting.validators.criteria.layoutmatchtypeenum attribute)": [[61, "prompting.validators.criteria.LayoutMatchTypeEnum.UNORDERED_LIST"]], "words (prompting.validators.criteria.textlengthunitenum attribute)": [[61, "prompting.validators.criteria.TextLengthUnitEnum.WORDS"]], "__post_init__() (prompting.validators.criteria.matchcontentcriteria method)": [[61, "prompting.validators.criteria.MatchContentCriteria.__post_init__"]], "_count_sentences() (prompting.validators.criteria.matchlengthcriteria method)": [[61, "prompting.validators.criteria.MatchLengthCriteria._count_sentences"]], "_get_completion_length() (prompting.validators.criteria.matchlengthcriteria method)": [[61, "prompting.validators.criteria.MatchLengthCriteria._get_completion_length"]], "_get_regex_pattern() (prompting.validators.criteria.matchcontentcriteria method)": [[61, "prompting.validators.criteria.MatchContentCriteria._get_regex_pattern"]], "compose_text() (prompting.validators.criteria.matchcontentcriteria method)": [[61, "prompting.validators.criteria.MatchContentCriteria.compose_text"]], "compose_text() (prompting.validators.criteria.matchlayoutcriteria method)": [[61, "prompting.validators.criteria.MatchLayoutCriteria.compose_text"]], "compose_text() (prompting.validators.criteria.matchlengthcriteria method)": [[61, "prompting.validators.criteria.MatchLengthCriteria.compose_text"]], "compose_text() (prompting.validators.criteria.simpleresponselayoutcriteria method)": [[61, "prompting.validators.criteria.SimpleResponseLayoutCriteria.compose_text"]], "compose_text() (prompting.validators.criteria.taskcriterion method)": [[61, "prompting.validators.criteria.TaskCriterion.compose_text"]], "contentmatchtype (prompting.validators.criteria.matchcontentcriteria attribute)": [[61, "prompting.validators.criteria.MatchContentCriteria.contentMatchType"]], "default_text (prompting.validators.criteria.matchcontentcriteria attribute)": [[61, "prompting.validators.criteria.MatchContentCriteria.default_text"]], "evaluate() (prompting.validators.criteria.matchcontentcriteria method)": [[61, "prompting.validators.criteria.MatchContentCriteria.evaluate"]], "evaluate() (prompting.validators.criteria.matchlayoutcriteria method)": [[61, "prompting.validators.criteria.MatchLayoutCriteria.evaluate"]], "evaluate() (prompting.validators.criteria.matchlengthcriteria method)": [[61, "prompting.validators.criteria.MatchLengthCriteria.evaluate"]], "evaluate() (prompting.validators.criteria.simpleresponselayoutcriteria method)": [[61, "prompting.validators.criteria.SimpleResponseLayoutCriteria.evaluate"]], "evaluate() (prompting.validators.criteria.taskcriterion method)": [[61, "prompting.validators.criteria.TaskCriterion.evaluate"]], "layout_type (prompting.validators.criteria.matchlayoutcriteria attribute)": [[61, "prompting.validators.criteria.MatchLayoutCriteria.layout_type"]], "n_words (prompting.validators.criteria.matchcontentcriteria attribute)": [[61, "prompting.validators.criteria.MatchContentCriteria.n_words"]], "negate_match (prompting.validators.criteria.matchcontentcriteria attribute)": [[61, "prompting.validators.criteria.MatchContentCriteria.negate_match"]], "penalty (prompting.validators.criteria.matchcontentcriteria attribute)": [[61, "id5"], [61, "prompting.validators.criteria.MatchContentCriteria.penalty"]], "penalty (prompting.validators.criteria.matchlayoutcriteria attribute)": [[61, "id8"], [61, "prompting.validators.criteria.MatchLayoutCriteria.penalty"]], "penalty (prompting.validators.criteria.matchlengthcriteria attribute)": [[61, "id3"], [61, "prompting.validators.criteria.MatchLengthCriteria.penalty"]], "penalty (prompting.validators.criteria.simpleresponselayoutcriteria attribute)": [[61, "id6"], [61, "prompting.validators.criteria.SimpleResponseLayoutCriteria.penalty"]], "penalty (prompting.validators.criteria.taskcriterion attribute)": [[61, "id1"], [61, "prompting.validators.criteria.TaskCriterion.penalty"]], "prompting.validators.criteria": [[61, "module-prompting.validators.criteria"]], "sampled_words (prompting.validators.criteria.matchcontentcriteria attribute)": [[61, "prompting.validators.criteria.MatchContentCriteria.sampled_words"]], "target_length (prompting.validators.criteria.matchlengthcriteria attribute)": [[61, "prompting.validators.criteria.MatchLengthCriteria.target_length"]], "text (prompting.validators.criteria.matchcontentcriteria attribute)": [[61, "id4"], [61, "prompting.validators.criteria.MatchContentCriteria.text"]], "text (prompting.validators.criteria.matchlayoutcriteria attribute)": [[61, "id9"], [61, "prompting.validators.criteria.MatchLayoutCriteria.text"]], "text (prompting.validators.criteria.matchlengthcriteria attribute)": [[61, "id2"], [61, "prompting.validators.criteria.MatchLengthCriteria.text"]], "text (prompting.validators.criteria.simpleresponselayoutcriteria attribute)": [[61, "id7"], [61, "prompting.validators.criteria.SimpleResponseLayoutCriteria.text"]], "text (prompting.validators.criteria.taskcriterion attribute)": [[61, "id0"], [61, "prompting.validators.criteria.TaskCriterion.text"]], "unit (prompting.validators.criteria.matchlengthcriteria attribute)": [[61, "prompting.validators.criteria.MatchLengthCriteria.unit"]], "words_array (prompting.validators.criteria.matchcontentcriteria attribute)": [[61, "prompting.validators.criteria.MatchContentCriteria.words_array"]], "dataset (class in prompting.validators.dataset)": [[62, "prompting.validators.dataset.Dataset"]], "mockdataset (class in prompting.validators.dataset)": [[62, "prompting.validators.dataset.MockDataset"]], "__next__() (prompting.validators.dataset.dataset method)": [[62, "prompting.validators.dataset.Dataset.__next__"]], "__next__() (prompting.validators.dataset.mockdataset method)": [[62, "prompting.validators.dataset.MockDataset.__next__"]], "prompting.validators.dataset": [[62, "module-prompting.validators.dataset"]], "eventschema (class in prompting.validators.event)": [[63, "prompting.validators.event.EventSchema"]], "best (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.best"]], "blacklist_filter (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.blacklist_filter"]], "blacklist_filter_matched_ngram (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.blacklist_filter_matched_ngram"]], "blacklist_filter_significance_score (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.blacklist_filter_significance_score"]], "block (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.block"]], "completion_status_codes (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.completion_status_codes"]], "completion_status_messages (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.completion_status_messages"]], "completion_times (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.completion_times"]], "completions (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.completions"]], "dahoas_reward_model (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.dahoas_reward_model"]], "dahoas_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.dahoas_reward_model_normalized"]], "diversity_reward_model (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.diversity_reward_model"]], "diversity_reward_model_batch (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.diversity_reward_model_batch"]], "diversity_reward_model_historic (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.diversity_reward_model_historic"]], "diversity_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.diversity_reward_model_normalized"]], "dpo_reward_model (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.dpo_reward_model"]], "dpo_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.dpo_reward_model_normalized"]], "from_dict() (prompting.validators.event.eventschema static method)": [[63, "prompting.validators.event.EventSchema.from_dict"]], "gating_loss (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.gating_loss"]], "keyword_match_penalty_adjusted (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.keyword_match_penalty_adjusted"]], "keyword_match_penalty_applied (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.keyword_match_penalty_applied"]], "keyword_match_penalty_raw (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.keyword_match_penalty_raw"]], "name (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.name"]], "nsfw_filter (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.nsfw_filter"]], "nsfw_filter_normalized (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.nsfw_filter_normalized"]], "nsfw_filter_score (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.nsfw_filter_score"]], "prompt (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.prompt"]], "prompt_reward_model (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.prompt_reward_model"]], "prompt_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.prompt_reward_model_normalized"]], "prompting.validators.event": [[63, "module-prompting.validators.event"]], "reciprocate_reward_model (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.reciprocate_reward_model"]], "reciprocate_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.reciprocate_reward_model_normalized"]], "relevance_filter (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.relevance_filter"]], "relevance_filter_bert_score (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.relevance_filter_bert_score"]], "relevance_filter_mpnet_score (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.relevance_filter_mpnet_score"]], "relevance_filter_normalized (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.relevance_filter_normalized"]], "rewards (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.rewards"]], "rlhf_reward_model (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.rlhf_reward_model"]], "rlhf_reward_model_normalized (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.rlhf_reward_model_normalized"]], "sentence_match_penalty_adjusted (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.sentence_match_penalty_adjusted"]], "sentence_match_penalty_applied (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.sentence_match_penalty_applied"]], "sentence_match_penalty_raw (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.sentence_match_penalty_raw"]], "set_weights (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.set_weights"]], "step_length (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.step_length"]], "task_type (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.task_type"]], "task_validation_penalty_adjusted (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.task_validation_penalty_adjusted"]], "task_validation_penalty_applied (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.task_validation_penalty_applied"]], "task_validation_penalty_raw (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.task_validation_penalty_raw"]], "uids (prompting.validators.event.eventschema attribute)": [[63, "prompting.validators.event.EventSchema.uids"]], "forward() (in module prompting.validators.forward)": [[64, "prompting.validators.forward.forward"]], "get_random_uids() (in module prompting.validators.forward)": [[64, "prompting.validators.forward.get_random_uids"]], "prompting.validators.forward": [[64, "module-prompting.validators.forward"]], "run_step() (in module prompting.validators.forward)": [[64, "prompting.validators.forward.run_step"]], "basegatingmodel (class in prompting.validators.gating)": [[65, "prompting.validators.gating.BaseGatingModel"]], "gatingmodel (class in prompting.validators.gating)": [[65, "prompting.validators.gating.GatingModel"]], "sentenceembedgatingmodel (class in prompting.validators.gating)": [[65, "prompting.validators.gating.SentenceEmbedGatingModel"]], "add_args() (prompting.validators.gating.basegatingmodel class method)": [[65, "prompting.validators.gating.BaseGatingModel.add_args"]], "backward() (prompting.validators.gating.basegatingmodel method)": [[65, "prompting.validators.gating.BaseGatingModel.backward"]], "backward() (prompting.validators.gating.gatingmodel method)": [[65, "prompting.validators.gating.GatingModel.backward"]], "backward() (prompting.validators.gating.sentenceembedgatingmodel method)": [[65, "prompting.validators.gating.SentenceEmbedGatingModel.backward"]], "check_config() (prompting.validators.gating.basegatingmodel class method)": [[65, "prompting.validators.gating.BaseGatingModel.check_config"]], "config() (prompting.validators.gating.basegatingmodel class method)": [[65, "prompting.validators.gating.BaseGatingModel.config"]], "forward() (prompting.validators.gating.basegatingmodel method)": [[65, "prompting.validators.gating.BaseGatingModel.forward"]], "forward() (prompting.validators.gating.gatingmodel method)": [[65, "prompting.validators.gating.GatingModel.forward"]], "forward() (prompting.validators.gating.sentenceembedgatingmodel method)": [[65, "prompting.validators.gating.SentenceEmbedGatingModel.forward"]], "mean_pooling() (prompting.validators.gating.sentenceembedgatingmodel method)": [[65, "prompting.validators.gating.SentenceEmbedGatingModel.mean_pooling"]], "prompting.validators.gating": [[65, "module-prompting.validators.gating"]], "resync() (prompting.validators.gating.basegatingmodel method)": [[65, "prompting.validators.gating.BaseGatingModel.resync"]], "resync() (prompting.validators.gating.gatingmodel method)": [[65, "prompting.validators.gating.GatingModel.resync"]], "resync() (prompting.validators.gating.sentenceembedgatingmodel method)": [[65, "prompting.validators.gating.SentenceEmbedGatingModel.resync"]], "__spec_version__ (in module prompting.validators)": [[66, "prompting.validators.__spec_version__"]], "__version__ (in module prompting.validators)": [[66, "prompting.validators.__version__"]], "prompting.validators": [[66, "module-prompting.validators"]], "version_split (in module prompting.validators)": [[66, "prompting.validators.version_split"]], "_ttl_hash_gen() (in module prompting.validators.misc)": [[67, "prompting.validators.misc._ttl_hash_gen"]], "prompting.validators.misc": [[67, "module-prompting.validators.misc"]], "ttl_cache() (in module prompting.validators.misc)": [[67, "prompting.validators.misc.ttl_cache"]], "ttl_get_block() (in module prompting.validators.misc)": [[67, "prompting.validators.misc.ttl_get_block"]], "contentmatchpenaltymodel (class in prompting.validators.penalty.content_match)": [[68, "prompting.validators.penalty.content_match.ContentMatchPenaltyModel"]], "calculate_penalties() (prompting.validators.penalty.content_match.contentmatchpenaltymodel method)": [[68, "prompting.validators.penalty.content_match.ContentMatchPenaltyModel.calculate_penalties"]], "name (prompting.validators.penalty.content_match.contentmatchpenaltymodel property)": [[68, "prompting.validators.penalty.content_match.ContentMatchPenaltyModel.name"]], "prompting.validators.penalty.content_match": [[68, "module-prompting.validators.penalty.content_match"]], "basepenaltymodel (class in prompting.validators.penalty)": [[69, "prompting.validators.penalty.BasePenaltyModel"]], "contentmatchpenaltymodel (class in prompting.validators.penalty)": [[69, "prompting.validators.penalty.ContentMatchPenaltyModel"]], "keywordmatchpenaltymodel (class in prompting.validators.penalty)": [[69, "prompting.validators.penalty.KeywordMatchPenaltyModel"]], "penaltymodeltype (class in prompting.validators.penalty)": [[69, "prompting.validators.penalty.PenaltyModelType"]], "taskvalidationpenaltymodel (class in prompting.validators.penalty)": [[69, "prompting.validators.penalty.TaskValidationPenaltyModel"]], "__repr__() (prompting.validators.penalty.basepenaltymodel method)": [[69, "prompting.validators.penalty.BasePenaltyModel.__repr__"]], "__str__() (prompting.validators.penalty.basepenaltymodel method)": [[69, "prompting.validators.penalty.BasePenaltyModel.__str__"]], "apply_penalties() (prompting.validators.penalty.basepenaltymodel method)": [[69, "prompting.validators.penalty.BasePenaltyModel.apply_penalties"]], "calculate_penalties() (prompting.validators.penalty.basepenaltymodel method)": [[69, "prompting.validators.penalty.BasePenaltyModel.calculate_penalties"]], "calculate_penalties() (prompting.validators.penalty.contentmatchpenaltymodel method)": [[69, "prompting.validators.penalty.ContentMatchPenaltyModel.calculate_penalties"]], "calculate_penalties() (prompting.validators.penalty.keywordmatchpenaltymodel method)": [[69, "prompting.validators.penalty.KeywordMatchPenaltyModel.calculate_penalties"]], "calculate_penalties() (prompting.validators.penalty.taskvalidationpenaltymodel method)": [[69, "prompting.validators.penalty.TaskValidationPenaltyModel.calculate_penalties"]], "check_exploits_keywords() (prompting.validators.penalty.keywordmatchpenaltymodel method)": [[69, "prompting.validators.penalty.KeywordMatchPenaltyModel.check_exploits_keywords"]], "keyword_match_penalty (prompting.validators.penalty.penaltymodeltype attribute)": [[69, "prompting.validators.penalty.PenaltyModelType.keyword_match_penalty"]], "name (prompting.validators.penalty.basepenaltymodel property)": [[69, "prompting.validators.penalty.BasePenaltyModel.name"]], "name (prompting.validators.penalty.contentmatchpenaltymodel property)": [[69, "prompting.validators.penalty.ContentMatchPenaltyModel.name"]], "name (prompting.validators.penalty.keywordmatchpenaltymodel property)": [[69, "prompting.validators.penalty.KeywordMatchPenaltyModel.name"]], "name (prompting.validators.penalty.taskvalidationpenaltymodel property)": [[69, "prompting.validators.penalty.TaskValidationPenaltyModel.name"]], "prompting.validators.penalty": [[69, "module-prompting.validators.penalty"]], "sentence_match_penalty (prompting.validators.penalty.penaltymodeltype attribute)": [[69, "prompting.validators.penalty.PenaltyModelType.sentence_match_penalty"]], "task_validation_penalty (prompting.validators.penalty.penaltymodeltype attribute)": [[69, "prompting.validators.penalty.PenaltyModelType.task_validation_penalty"]], "keywordmatchpenaltymodel (class in prompting.validators.penalty.keyword_match)": [[70, "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel"]], "calculate_penalties() (prompting.validators.penalty.keyword_match.keywordmatchpenaltymodel method)": [[70, "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel.calculate_penalties"]], "check_exploits_keywords() (prompting.validators.penalty.keyword_match.keywordmatchpenaltymodel method)": [[70, "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel.check_exploits_keywords"]], "name (prompting.validators.penalty.keyword_match.keywordmatchpenaltymodel property)": [[70, "prompting.validators.penalty.keyword_match.KeywordMatchPenaltyModel.name"]], "prompting.validators.penalty.keyword_match": [[70, "module-prompting.validators.penalty.keyword_match"]], "basepenaltymodel (class in prompting.validators.penalty.penalty)": [[71, "prompting.validators.penalty.penalty.BasePenaltyModel"]], "penaltymodeltype (class in prompting.validators.penalty.penalty)": [[71, "prompting.validators.penalty.penalty.PenaltyModelType"]], "__repr__() (prompting.validators.penalty.penalty.basepenaltymodel method)": [[71, "prompting.validators.penalty.penalty.BasePenaltyModel.__repr__"]], "__str__() (prompting.validators.penalty.penalty.basepenaltymodel method)": [[71, "prompting.validators.penalty.penalty.BasePenaltyModel.__str__"]], "apply_penalties() (prompting.validators.penalty.penalty.basepenaltymodel method)": [[71, "prompting.validators.penalty.penalty.BasePenaltyModel.apply_penalties"]], "calculate_penalties() (prompting.validators.penalty.penalty.basepenaltymodel method)": [[71, "prompting.validators.penalty.penalty.BasePenaltyModel.calculate_penalties"]], "keyword_match_penalty (prompting.validators.penalty.penalty.penaltymodeltype attribute)": [[71, "prompting.validators.penalty.penalty.PenaltyModelType.keyword_match_penalty"]], "name (prompting.validators.penalty.penalty.basepenaltymodel property)": [[71, "prompting.validators.penalty.penalty.BasePenaltyModel.name"]], "prompting.validators.penalty.penalty": [[71, "module-prompting.validators.penalty.penalty"]], "sentence_match_penalty (prompting.validators.penalty.penalty.penaltymodeltype attribute)": [[71, "prompting.validators.penalty.penalty.PenaltyModelType.sentence_match_penalty"]], "task_validation_penalty (prompting.validators.penalty.penalty.penaltymodeltype attribute)": [[71, "prompting.validators.penalty.penalty.PenaltyModelType.task_validation_penalty"]], "taskvalidationpenaltymodel (class in prompting.validators.penalty.task_validation)": [[72, "prompting.validators.penalty.task_validation.TaskValidationPenaltyModel"]], "calculate_penalties() (prompting.validators.penalty.task_validation.taskvalidationpenaltymodel method)": [[72, "prompting.validators.penalty.task_validation.TaskValidationPenaltyModel.calculate_penalties"]], "name (prompting.validators.penalty.task_validation.taskvalidationpenaltymodel property)": [[72, "prompting.validators.penalty.task_validation.TaskValidationPenaltyModel.name"]], "prompting.validators.penalty.task_validation": [[72, "module-prompting.validators.penalty.task_validation"]], "answerprompt (class in prompting.validators.prompts)": [[73, "prompting.validators.prompts.AnswerPrompt"]], "augmentprompt (class in prompting.validators.prompts)": [[73, "prompting.validators.prompts.AugmentPrompt"]], "baseprompt (class in prompting.validators.prompts)": [[73, "prompting.validators.prompts.BasePrompt"]], "firewallprompt (class in prompting.validators.prompts)": [[73, "prompting.validators.prompts.FirewallPrompt"]], "followupprompt (class in prompting.validators.prompts)": [[73, "prompting.validators.prompts.FollowupPrompt"]], "scoringprompt (class in prompting.validators.prompts)": [[73, "prompting.validators.prompts.ScoringPrompt"]], "answer_prompt() (in module prompting.validators.prompts)": [[73, "prompting.validators.prompts.answer_prompt"]], "answer_scoring_template (in module prompting.validators.prompts)": [[73, "prompting.validators.prompts.answer_scoring_template"]], "augment_prompt() (in module prompting.validators.prompts)": [[73, "prompting.validators.prompts.augment_prompt"]], "augment_request_template (in module prompting.validators.prompts)": [[73, "prompting.validators.prompts.augment_request_template"]], "augment_scoring_template (in module prompting.validators.prompts)": [[73, "prompting.validators.prompts.augment_scoring_template"]], "detected() (prompting.validators.prompts.firewallprompt method)": [[73, "prompting.validators.prompts.FirewallPrompt.detected"]], "extract() (prompting.validators.prompts.baseprompt method)": [[73, "prompting.validators.prompts.BasePrompt.extract"]], "extract_score() (prompting.validators.prompts.scoringprompt method)": [[73, "prompting.validators.prompts.ScoringPrompt.extract_score"]], "find_unique_tags() (in module prompting.validators.prompts)": [[73, "prompting.validators.prompts.find_unique_tags"]], "firewall_template (in module prompting.validators.prompts)": [[73, "prompting.validators.prompts.firewall_template"]], "followup_prompt() (in module prompting.validators.prompts)": [[73, "prompting.validators.prompts.followup_prompt"]], "followup_request_template (in module prompting.validators.prompts)": [[73, "prompting.validators.prompts.followup_request_template"]], "followup_scoring_template (in module prompting.validators.prompts)": [[73, "prompting.validators.prompts.followup_scoring_template"]], "matches_template() (prompting.validators.prompts.baseprompt method)": [[73, "prompting.validators.prompts.BasePrompt.matches_template"]], "mock_response() (prompting.validators.prompts.firewallprompt static method)": [[73, "prompting.validators.prompts.FirewallPrompt.mock_response"]], "mock_response() (prompting.validators.prompts.scoringprompt static method)": [[73, "prompting.validators.prompts.ScoringPrompt.mock_response"]], "prompting.validators.prompts": [[73, "module-prompting.validators.prompts"]], "text() (prompting.validators.prompts.baseprompt method)": [[73, "prompting.validators.prompts.BasePrompt.text"]], "blacklist (class in prompting.validators.reward.blacklist)": [[74, "prompting.validators.reward.blacklist.Blacklist"]], "blacklistrewardevent (class in prompting.validators.reward.blacklist)": [[74, "prompting.validators.reward.blacklist.BlacklistRewardEvent"]], "_add_ngrams() (prompting.validators.reward.blacklist.blacklist method)": [[74, "prompting.validators.reward.blacklist.Blacklist._add_ngrams"]], "add() (prompting.validators.reward.blacklist.blacklist method)": [[74, "prompting.validators.reward.blacklist.Blacklist.add"]], "calculate_significance() (prompting.validators.reward.blacklist.blacklist method)": [[74, "prompting.validators.reward.blacklist.Blacklist.calculate_significance"]], "extract_ngrams() (prompting.validators.reward.blacklist.blacklist method)": [[74, "prompting.validators.reward.blacklist.Blacklist.extract_ngrams"]], "get_rewards() (prompting.validators.reward.blacklist.blacklist method)": [[74, "prompting.validators.reward.blacklist.Blacklist.get_rewards"]], "get_significance() (prompting.validators.reward.blacklist.blacklist method)": [[74, "prompting.validators.reward.blacklist.Blacklist.get_significance"]], "matched_ngram (prompting.validators.reward.blacklist.blacklistrewardevent attribute)": [[74, "prompting.validators.reward.blacklist.BlacklistRewardEvent.matched_ngram"]], "most_common() (prompting.validators.reward.blacklist.blacklist method)": [[74, "prompting.validators.reward.blacklist.Blacklist.most_common"]], "most_significant() (prompting.validators.reward.blacklist.blacklist method)": [[74, "prompting.validators.reward.blacklist.Blacklist.most_significant"]], "name (prompting.validators.reward.blacklist.blacklist property)": [[74, "prompting.validators.reward.blacklist.Blacklist.name"]], "normalize_rewards() (prompting.validators.reward.blacklist.blacklist method)": [[74, "prompting.validators.reward.blacklist.Blacklist.normalize_rewards"]], "prompting.validators.reward.blacklist": [[74, "module-prompting.validators.reward.blacklist"]], "prune() (prompting.validators.reward.blacklist.blacklist method)": [[74, "prompting.validators.reward.blacklist.Blacklist.prune"]], "reset() (prompting.validators.reward.blacklist.blacklist method)": [[74, "prompting.validators.reward.blacklist.Blacklist.reset"]], "reward() (prompting.validators.reward.blacklist.blacklist method)": [[74, "prompting.validators.reward.blacklist.Blacklist.reward"]], "set_counter_to_half() (prompting.validators.reward.blacklist.blacklist method)": [[74, "prompting.validators.reward.blacklist.Blacklist.set_counter_to_half"]], "significance_score (prompting.validators.reward.blacklist.blacklistrewardevent attribute)": [[74, "prompting.validators.reward.blacklist.BlacklistRewardEvent.significance_score"]], "defaultrewardframeworkconfig (class in prompting.validators.reward.config)": [[75, "prompting.validators.reward.config.DefaultRewardFrameworkConfig"]], "rewardmodeltype (class in prompting.validators.reward.config)": [[75, "prompting.validators.reward.config.RewardModelType"]], "blacklist (prompting.validators.reward.config.rewardmodeltype attribute)": [[75, "prompting.validators.reward.config.RewardModelType.blacklist"]], "dahoas (prompting.validators.reward.config.rewardmodeltype attribute)": [[75, "prompting.validators.reward.config.RewardModelType.dahoas"]], "dahoas_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[75, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.dahoas_model_weight"]], "diversity (prompting.validators.reward.config.rewardmodeltype attribute)": [[75, "prompting.validators.reward.config.RewardModelType.diversity"]], "dpo (prompting.validators.reward.config.rewardmodeltype attribute)": [[75, "prompting.validators.reward.config.RewardModelType.dpo"]], "dpo_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[75, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.dpo_model_weight"]], "keyword_match (prompting.validators.reward.config.rewardmodeltype attribute)": [[75, "prompting.validators.reward.config.RewardModelType.keyword_match"]], "nsfw (prompting.validators.reward.config.rewardmodeltype attribute)": [[75, "prompting.validators.reward.config.RewardModelType.nsfw"]], "prompt (prompting.validators.reward.config.rewardmodeltype attribute)": [[75, "prompting.validators.reward.config.RewardModelType.prompt"]], "prompt_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[75, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.prompt_model_weight"]], "prompting.validators.reward.config": [[75, "module-prompting.validators.reward.config"]], "reciprocate (prompting.validators.reward.config.rewardmodeltype attribute)": [[75, "prompting.validators.reward.config.RewardModelType.reciprocate"]], "reciprocate_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[75, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.reciprocate_model_weight"]], "relevance (prompting.validators.reward.config.rewardmodeltype attribute)": [[75, "prompting.validators.reward.config.RewardModelType.relevance"]], "relevance_bert (prompting.validators.reward.config.rewardmodeltype attribute)": [[75, "prompting.validators.reward.config.RewardModelType.relevance_bert"]], "relevance_mpnet (prompting.validators.reward.config.rewardmodeltype attribute)": [[75, "prompting.validators.reward.config.RewardModelType.relevance_mpnet"]], "rlhf (prompting.validators.reward.config.rewardmodeltype attribute)": [[75, "prompting.validators.reward.config.RewardModelType.rlhf"]], "rlhf_model_weight (prompting.validators.reward.config.defaultrewardframeworkconfig attribute)": [[75, "prompting.validators.reward.config.DefaultRewardFrameworkConfig.rlhf_model_weight"]], "task_validator (prompting.validators.reward.config.rewardmodeltype attribute)": [[75, "prompting.validators.reward.config.RewardModelType.task_validator"]], "dahoasrewardmodel (class in prompting.validators.reward.dahoas)": [[76, "prompting.validators.reward.dahoas.DahoasRewardModel"]], "forward() (prompting.validators.reward.dahoas.dahoasrewardmodel method)": [[76, "prompting.validators.reward.dahoas.DahoasRewardModel.forward"]], "get_rewards() (prompting.validators.reward.dahoas.dahoasrewardmodel method)": [[76, "prompting.validators.reward.dahoas.DahoasRewardModel.get_rewards"]], "load_weights() (prompting.validators.reward.dahoas.dahoasrewardmodel static method)": [[76, "prompting.validators.reward.dahoas.DahoasRewardModel.load_weights"]], "model_name (prompting.validators.reward.dahoas.dahoasrewardmodel attribute)": [[76, "prompting.validators.reward.dahoas.DahoasRewardModel.model_name"]], "name (prompting.validators.reward.dahoas.dahoasrewardmodel property)": [[76, "prompting.validators.reward.dahoas.DahoasRewardModel.name"]], "prompting.validators.reward.dahoas": [[76, "module-prompting.validators.reward.dahoas"]], "reward() (prompting.validators.reward.dahoas.dahoasrewardmodel method)": [[76, "prompting.validators.reward.dahoas.DahoasRewardModel.reward"]], "diversityrewardevent (class in prompting.validators.reward.diversity)": [[77, "prompting.validators.reward.diversity.DiversityRewardEvent"]], "diversityrewardmodel (class in prompting.validators.reward.diversity)": [[77, "prompting.validators.reward.diversity.DiversityRewardModel"]], "batch (prompting.validators.reward.diversity.diversityrewardevent attribute)": [[77, "prompting.validators.reward.diversity.DiversityRewardEvent.batch"]], "diversity_model_path (prompting.validators.reward.diversity.diversityrewardmodel attribute)": [[77, "prompting.validators.reward.diversity.DiversityRewardModel.diversity_model_path"]], "get_batch_rewards() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[77, "prompting.validators.reward.diversity.DiversityRewardModel.get_batch_rewards"]], "get_embeddings() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[77, "prompting.validators.reward.diversity.DiversityRewardModel.get_embeddings"]], "get_historic_rewards() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[77, "prompting.validators.reward.diversity.DiversityRewardModel.get_historic_rewards"]], "get_rewards() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[77, "prompting.validators.reward.diversity.DiversityRewardModel.get_rewards"]], "historic (prompting.validators.reward.diversity.diversityrewardevent attribute)": [[77, "prompting.validators.reward.diversity.DiversityRewardEvent.historic"]], "mean_pooling() (in module prompting.validators.reward.diversity)": [[77, "prompting.validators.reward.diversity.mean_pooling"]], "name (prompting.validators.reward.diversity.diversityrewardmodel property)": [[77, "prompting.validators.reward.diversity.DiversityRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[77, "prompting.validators.reward.diversity.DiversityRewardModel.normalize_rewards"]], "prompting.validators.reward.diversity": [[77, "module-prompting.validators.reward.diversity"]], "update_historic_embeddings() (prompting.validators.reward.diversity.diversityrewardmodel method)": [[77, "prompting.validators.reward.diversity.DiversityRewardModel.update_historic_embeddings"]], "directpreferencerewardmodel (class in prompting.validators.reward.dpo)": [[78, "prompting.validators.reward.dpo.DirectPreferenceRewardModel"]], "get_rewards() (prompting.validators.reward.dpo.directpreferencerewardmodel method)": [[78, "prompting.validators.reward.dpo.DirectPreferenceRewardModel.get_rewards"]], "name (prompting.validators.reward.dpo.directpreferencerewardmodel property)": [[78, "prompting.validators.reward.dpo.DirectPreferenceRewardModel.name"]], "prompting.validators.reward.dpo": [[78, "module-prompting.validators.reward.dpo"]], "reward_model_name (prompting.validators.reward.dpo.directpreferencerewardmodel attribute)": [[78, "prompting.validators.reward.dpo.DirectPreferenceRewardModel.reward_model_name"]], "reward_single() (prompting.validators.reward.dpo.directpreferencerewardmodel method)": [[78, "prompting.validators.reward.dpo.DirectPreferenceRewardModel.reward_single"]], "baserewardmodel (class in prompting.validators.reward)": [[79, "prompting.validators.reward.BaseRewardModel"]], "blacklist (class in prompting.validators.reward)": [[79, "prompting.validators.reward.Blacklist"]], "dahoasrewardmodel (class in prompting.validators.reward)": [[79, "prompting.validators.reward.DahoasRewardModel"]], "defaultrewardframeworkconfig (class in prompting.validators.reward)": [[79, "prompting.validators.reward.DefaultRewardFrameworkConfig"]], "directpreferencerewardmodel (class in prompting.validators.reward)": [[79, "prompting.validators.reward.DirectPreferenceRewardModel"]], "diversityrewardmodel (class in prompting.validators.reward)": [[79, "prompting.validators.reward.DiversityRewardModel"]], "nsfwrewardmodel (class in prompting.validators.reward)": [[79, "prompting.validators.reward.NSFWRewardModel"]], "openassistantrewardmodel (class in prompting.validators.reward)": [[79, "prompting.validators.reward.OpenAssistantRewardModel"]], "promptrewardmodel (class in prompting.validators.reward)": [[79, "prompting.validators.reward.PromptRewardModel"]], "reciprocaterewardmodel (class in prompting.validators.reward)": [[79, "prompting.validators.reward.ReciprocateRewardModel"]], "relevancerewardmodel (class in prompting.validators.reward)": [[79, "prompting.validators.reward.RelevanceRewardModel"]], "rewardmodeltype (class in prompting.validators.reward)": [[79, "prompting.validators.reward.RewardModelType"]], "__repr__() (prompting.validators.reward.baserewardmodel method)": [[79, "prompting.validators.reward.BaseRewardModel.__repr__"]], "__str__() (prompting.validators.reward.baserewardmodel method)": [[79, "prompting.validators.reward.BaseRewardModel.__str__"]], "_add_ngrams() (prompting.validators.reward.blacklist method)": [[79, "prompting.validators.reward.Blacklist._add_ngrams"]], "add() (prompting.validators.reward.blacklist method)": [[79, "prompting.validators.reward.Blacklist.add"]], "apply() (prompting.validators.reward.baserewardmodel method)": [[79, "prompting.validators.reward.BaseRewardModel.apply"]], "blacklist (prompting.validators.reward.rewardmodeltype attribute)": [[79, "prompting.validators.reward.RewardModelType.blacklist"]], "calculate_significance() (prompting.validators.reward.blacklist method)": [[79, "prompting.validators.reward.Blacklist.calculate_significance"]], "dahoas (prompting.validators.reward.rewardmodeltype attribute)": [[79, "prompting.validators.reward.RewardModelType.dahoas"]], "dahoas_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[79, "prompting.validators.reward.DefaultRewardFrameworkConfig.dahoas_model_weight"]], "diversity (prompting.validators.reward.rewardmodeltype attribute)": [[79, "prompting.validators.reward.RewardModelType.diversity"]], "diversity_model_path (prompting.validators.reward.diversityrewardmodel attribute)": [[79, "prompting.validators.reward.DiversityRewardModel.diversity_model_path"]], "dpo (prompting.validators.reward.rewardmodeltype attribute)": [[79, "prompting.validators.reward.RewardModelType.dpo"]], "dpo_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[79, "prompting.validators.reward.DefaultRewardFrameworkConfig.dpo_model_weight"]], "extract_ngrams() (prompting.validators.reward.blacklist method)": [[79, "prompting.validators.reward.Blacklist.extract_ngrams"]], "forward() (prompting.validators.reward.dahoasrewardmodel method)": [[79, "prompting.validators.reward.DahoasRewardModel.forward"]], "get_batch_rewards() (prompting.validators.reward.diversityrewardmodel method)": [[79, "prompting.validators.reward.DiversityRewardModel.get_batch_rewards"]], "get_embeddings() (prompting.validators.reward.diversityrewardmodel method)": [[79, "prompting.validators.reward.DiversityRewardModel.get_embeddings"]], "get_historic_rewards() (prompting.validators.reward.diversityrewardmodel method)": [[79, "prompting.validators.reward.DiversityRewardModel.get_historic_rewards"]], "get_rewards() (prompting.validators.reward.baserewardmodel method)": [[79, "prompting.validators.reward.BaseRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.blacklist method)": [[79, "prompting.validators.reward.Blacklist.get_rewards"]], "get_rewards() (prompting.validators.reward.dahoasrewardmodel method)": [[79, "prompting.validators.reward.DahoasRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.directpreferencerewardmodel method)": [[79, "prompting.validators.reward.DirectPreferenceRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.diversityrewardmodel method)": [[79, "prompting.validators.reward.DiversityRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.nsfwrewardmodel method)": [[79, "prompting.validators.reward.NSFWRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.openassistantrewardmodel method)": [[79, "prompting.validators.reward.OpenAssistantRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.promptrewardmodel method)": [[79, "prompting.validators.reward.PromptRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.reciprocaterewardmodel method)": [[79, "prompting.validators.reward.ReciprocateRewardModel.get_rewards"]], "get_rewards() (prompting.validators.reward.relevancerewardmodel method)": [[79, "prompting.validators.reward.RelevanceRewardModel.get_rewards"]], "get_significance() (prompting.validators.reward.blacklist method)": [[79, "prompting.validators.reward.Blacklist.get_significance"]], "keyword_match (prompting.validators.reward.rewardmodeltype attribute)": [[79, "prompting.validators.reward.RewardModelType.keyword_match"]], "load_weights() (prompting.validators.reward.dahoasrewardmodel static method)": [[79, "prompting.validators.reward.DahoasRewardModel.load_weights"]], "model_name (prompting.validators.reward.dahoasrewardmodel attribute)": [[79, "prompting.validators.reward.DahoasRewardModel.model_name"]], "most_common() (prompting.validators.reward.blacklist method)": [[79, "prompting.validators.reward.Blacklist.most_common"]], "most_significant() (prompting.validators.reward.blacklist method)": [[79, "prompting.validators.reward.Blacklist.most_significant"]], "name (prompting.validators.reward.baserewardmodel property)": [[79, "prompting.validators.reward.BaseRewardModel.name"]], "name (prompting.validators.reward.blacklist property)": [[79, "prompting.validators.reward.Blacklist.name"]], "name (prompting.validators.reward.dahoasrewardmodel property)": [[79, "prompting.validators.reward.DahoasRewardModel.name"]], "name (prompting.validators.reward.directpreferencerewardmodel property)": [[79, "prompting.validators.reward.DirectPreferenceRewardModel.name"]], "name (prompting.validators.reward.diversityrewardmodel property)": [[79, "prompting.validators.reward.DiversityRewardModel.name"]], "name (prompting.validators.reward.nsfwrewardmodel property)": [[79, "prompting.validators.reward.NSFWRewardModel.name"]], "name (prompting.validators.reward.openassistantrewardmodel property)": [[79, "prompting.validators.reward.OpenAssistantRewardModel.name"]], "name (prompting.validators.reward.promptrewardmodel property)": [[79, "prompting.validators.reward.PromptRewardModel.name"]], "name (prompting.validators.reward.reciprocaterewardmodel property)": [[79, "prompting.validators.reward.ReciprocateRewardModel.name"]], "name (prompting.validators.reward.relevancerewardmodel property)": [[79, "prompting.validators.reward.RelevanceRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.baserewardmodel method)": [[79, "prompting.validators.reward.BaseRewardModel.normalize_rewards"]], "normalize_rewards() (prompting.validators.reward.blacklist method)": [[79, "prompting.validators.reward.Blacklist.normalize_rewards"]], "normalize_rewards() (prompting.validators.reward.diversityrewardmodel method)": [[79, "prompting.validators.reward.DiversityRewardModel.normalize_rewards"]], "normalize_rewards() (prompting.validators.reward.nsfwrewardmodel method)": [[79, "prompting.validators.reward.NSFWRewardModel.normalize_rewards"]], "normalize_rewards() (prompting.validators.reward.relevancerewardmodel method)": [[79, "prompting.validators.reward.RelevanceRewardModel.normalize_rewards"]], "nsfw (prompting.validators.reward.rewardmodeltype attribute)": [[79, "prompting.validators.reward.RewardModelType.nsfw"]], "nsfw_filter_model_path (prompting.validators.reward.nsfwrewardmodel attribute)": [[79, "prompting.validators.reward.NSFWRewardModel.nsfw_filter_model_path"]], "prompt (prompting.validators.reward.rewardmodeltype attribute)": [[79, "prompting.validators.reward.RewardModelType.prompt"]], "prompt_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[79, "prompting.validators.reward.DefaultRewardFrameworkConfig.prompt_model_weight"]], "prompting.validators.reward": [[79, "module-prompting.validators.reward"]], "prune() (prompting.validators.reward.blacklist method)": [[79, "prompting.validators.reward.Blacklist.prune"]], "reciprocate (prompting.validators.reward.rewardmodeltype attribute)": [[79, "prompting.validators.reward.RewardModelType.reciprocate"]], "reciprocate_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[79, "prompting.validators.reward.DefaultRewardFrameworkConfig.reciprocate_model_weight"]], "relevance (prompting.validators.reward.rewardmodeltype attribute)": [[79, "prompting.validators.reward.RewardModelType.relevance"]], "relevance_bert (prompting.validators.reward.rewardmodeltype attribute)": [[79, "prompting.validators.reward.RewardModelType.relevance_bert"]], "relevance_mpnet (prompting.validators.reward.rewardmodeltype attribute)": [[79, "prompting.validators.reward.RewardModelType.relevance_mpnet"]], "reset() (prompting.validators.reward.blacklist method)": [[79, "prompting.validators.reward.Blacklist.reset"]], "revision (prompting.validators.reward.reciprocaterewardmodel attribute)": [[79, "prompting.validators.reward.ReciprocateRewardModel.revision"]], "reward() (prompting.validators.reward.blacklist method)": [[79, "prompting.validators.reward.Blacklist.reward"]], "reward() (prompting.validators.reward.dahoasrewardmodel method)": [[79, "prompting.validators.reward.DahoasRewardModel.reward"]], "reward() (prompting.validators.reward.nsfwrewardmodel method)": [[79, "prompting.validators.reward.NSFWRewardModel.reward"]], "reward() (prompting.validators.reward.promptrewardmodel method)": [[79, "prompting.validators.reward.PromptRewardModel.reward"]], "reward() (prompting.validators.reward.reciprocaterewardmodel method)": [[79, "prompting.validators.reward.ReciprocateRewardModel.reward"]], "reward() (prompting.validators.reward.relevancerewardmodel method)": [[79, "prompting.validators.reward.RelevanceRewardModel.reward"]], "reward_model_name (prompting.validators.reward.directpreferencerewardmodel attribute)": [[79, "prompting.validators.reward.DirectPreferenceRewardModel.reward_model_name"]], "reward_model_name (prompting.validators.reward.openassistantrewardmodel attribute)": [[79, "prompting.validators.reward.OpenAssistantRewardModel.reward_model_name"]], "reward_model_name (prompting.validators.reward.promptrewardmodel attribute)": [[79, "prompting.validators.reward.PromptRewardModel.reward_model_name"]], "reward_model_path (prompting.validators.reward.reciprocaterewardmodel attribute)": [[79, "prompting.validators.reward.ReciprocateRewardModel.reward_model_path"]], "reward_single() (prompting.validators.reward.directpreferencerewardmodel method)": [[79, "prompting.validators.reward.DirectPreferenceRewardModel.reward_single"]], "reward_single() (prompting.validators.reward.openassistantrewardmodel method)": [[79, "prompting.validators.reward.OpenAssistantRewardModel.reward_single"]], "rlhf (prompting.validators.reward.rewardmodeltype attribute)": [[79, "prompting.validators.reward.RewardModelType.rlhf"]], "rlhf_model_weight (prompting.validators.reward.defaultrewardframeworkconfig attribute)": [[79, "prompting.validators.reward.DefaultRewardFrameworkConfig.rlhf_model_weight"]], "set_counter_to_half() (prompting.validators.reward.blacklist method)": [[79, "prompting.validators.reward.Blacklist.set_counter_to_half"]], "task_validator (prompting.validators.reward.rewardmodeltype attribute)": [[79, "prompting.validators.reward.RewardModelType.task_validator"]], "update_historic_embeddings() (prompting.validators.reward.diversityrewardmodel method)": [[79, "prompting.validators.reward.DiversityRewardModel.update_historic_embeddings"]], "nsfwrewardevent (class in prompting.validators.reward.nsfw)": [[80, "prompting.validators.reward.nsfw.NSFWRewardEvent"]], "nsfwrewardmodel (class in prompting.validators.reward.nsfw)": [[80, "prompting.validators.reward.nsfw.NSFWRewardModel"]], "get_rewards() (prompting.validators.reward.nsfw.nsfwrewardmodel method)": [[80, "prompting.validators.reward.nsfw.NSFWRewardModel.get_rewards"]], "name (prompting.validators.reward.nsfw.nsfwrewardmodel property)": [[80, "prompting.validators.reward.nsfw.NSFWRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.nsfw.nsfwrewardmodel method)": [[80, "prompting.validators.reward.nsfw.NSFWRewardModel.normalize_rewards"]], "nsfw_filter_model_path (prompting.validators.reward.nsfw.nsfwrewardmodel attribute)": [[80, "prompting.validators.reward.nsfw.NSFWRewardModel.nsfw_filter_model_path"]], "prompting.validators.reward.nsfw": [[80, "module-prompting.validators.reward.nsfw"]], "reward() (prompting.validators.reward.nsfw.nsfwrewardmodel method)": [[80, "prompting.validators.reward.nsfw.NSFWRewardModel.reward"]], "score (prompting.validators.reward.nsfw.nsfwrewardevent attribute)": [[80, "prompting.validators.reward.nsfw.NSFWRewardEvent.score"]], "openassistantrewardmodel (class in prompting.validators.reward.open_assistant)": [[81, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel"]], "get_rewards() (prompting.validators.reward.open_assistant.openassistantrewardmodel method)": [[81, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel.get_rewards"]], "name (prompting.validators.reward.open_assistant.openassistantrewardmodel property)": [[81, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel.name"]], "prompting.validators.reward.open_assistant": [[81, "module-prompting.validators.reward.open_assistant"]], "reward_model_name (prompting.validators.reward.open_assistant.openassistantrewardmodel attribute)": [[81, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel.reward_model_name"]], "reward_single() (prompting.validators.reward.open_assistant.openassistantrewardmodel method)": [[81, "prompting.validators.reward.open_assistant.OpenAssistantRewardModel.reward_single"]], "promptrewardmodel (class in prompting.validators.reward.prompt)": [[82, "prompting.validators.reward.prompt.PromptRewardModel"]], "get_rewards() (prompting.validators.reward.prompt.promptrewardmodel method)": [[82, "prompting.validators.reward.prompt.PromptRewardModel.get_rewards"]], "name (prompting.validators.reward.prompt.promptrewardmodel property)": [[82, "prompting.validators.reward.prompt.PromptRewardModel.name"]], "prompting.validators.reward.prompt": [[82, "module-prompting.validators.reward.prompt"]], "reward() (prompting.validators.reward.prompt.promptrewardmodel method)": [[82, "prompting.validators.reward.prompt.PromptRewardModel.reward"]], "reward_model_name (prompting.validators.reward.prompt.promptrewardmodel attribute)": [[82, "prompting.validators.reward.prompt.PromptRewardModel.reward_model_name"]], "reciprocaterewardmodel (class in prompting.validators.reward.reciprocate)": [[83, "prompting.validators.reward.reciprocate.ReciprocateRewardModel"]], "get_rewards() (prompting.validators.reward.reciprocate.reciprocaterewardmodel method)": [[83, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.get_rewards"]], "name (prompting.validators.reward.reciprocate.reciprocaterewardmodel property)": [[83, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.name"]], "prompting.validators.reward.reciprocate": [[83, "module-prompting.validators.reward.reciprocate"]], "revision (prompting.validators.reward.reciprocate.reciprocaterewardmodel attribute)": [[83, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.revision"]], "reward() (prompting.validators.reward.reciprocate.reciprocaterewardmodel method)": [[83, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.reward"]], "reward_model_path (prompting.validators.reward.reciprocate.reciprocaterewardmodel attribute)": [[83, "prompting.validators.reward.reciprocate.ReciprocateRewardModel.reward_model_path"]], "bertrelevancerewardmodel (class in prompting.validators.reward.relevance)": [[84, "prompting.validators.reward.relevance.BertRelevanceRewardModel"]], "mpnetrelevencemodel (class in prompting.validators.reward.relevance)": [[84, "prompting.validators.reward.relevance.MpnetRelevenceModel"]], "relevancerewardevent (class in prompting.validators.reward.relevance)": [[84, "prompting.validators.reward.relevance.RelevanceRewardEvent"]], "relevancerewardmodel (class in prompting.validators.reward.relevance)": [[84, "prompting.validators.reward.relevance.RelevanceRewardModel"]], "bert_score (prompting.validators.reward.relevance.relevancerewardevent attribute)": [[84, "prompting.validators.reward.relevance.RelevanceRewardEvent.bert_score"]], "diversity_model_path (prompting.validators.reward.relevance.mpnetrelevencemodel attribute)": [[84, "prompting.validators.reward.relevance.MpnetRelevenceModel.diversity_model_path"]], "get_embedding() (prompting.validators.reward.relevance.bertrelevancerewardmodel method)": [[84, "prompting.validators.reward.relevance.BertRelevanceRewardModel.get_embedding"]], "get_embeddings() (prompting.validators.reward.relevance.mpnetrelevencemodel method)": [[84, "prompting.validators.reward.relevance.MpnetRelevenceModel.get_embeddings"]], "get_rewards() (prompting.validators.reward.relevance.relevancerewardmodel method)": [[84, "prompting.validators.reward.relevance.RelevanceRewardModel.get_rewards"]], "mean_pooling() (in module prompting.validators.reward.relevance)": [[84, "prompting.validators.reward.relevance.mean_pooling"]], "mpnet_score (prompting.validators.reward.relevance.relevancerewardevent attribute)": [[84, "prompting.validators.reward.relevance.RelevanceRewardEvent.mpnet_score"]], "name (prompting.validators.reward.relevance.bertrelevancerewardmodel property)": [[84, "prompting.validators.reward.relevance.BertRelevanceRewardModel.name"]], "name (prompting.validators.reward.relevance.mpnetrelevencemodel property)": [[84, "prompting.validators.reward.relevance.MpnetRelevenceModel.name"]], "name (prompting.validators.reward.relevance.relevancerewardmodel property)": [[84, "prompting.validators.reward.relevance.RelevanceRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.relevance.relevancerewardmodel method)": [[84, "prompting.validators.reward.relevance.RelevanceRewardModel.normalize_rewards"]], "prompting.validators.reward.relevance": [[84, "module-prompting.validators.reward.relevance"]], "relevance_model_path (prompting.validators.reward.relevance.bertrelevancerewardmodel attribute)": [[84, "prompting.validators.reward.relevance.BertRelevanceRewardModel.relevance_model_path"]], "reward() (prompting.validators.reward.relevance.bertrelevancerewardmodel method)": [[84, "prompting.validators.reward.relevance.BertRelevanceRewardModel.reward"]], "reward() (prompting.validators.reward.relevance.mpnetrelevencemodel method)": [[84, "prompting.validators.reward.relevance.MpnetRelevenceModel.reward"]], "reward() (prompting.validators.reward.relevance.relevancerewardmodel method)": [[84, "prompting.validators.reward.relevance.RelevanceRewardModel.reward"]], "baserewardevent (class in prompting.validators.reward.reward)": [[85, "prompting.validators.reward.reward.BaseRewardEvent"]], "baserewardmodel (class in prompting.validators.reward.reward)": [[85, "prompting.validators.reward.reward.BaseRewardModel"]], "__repr__() (prompting.validators.reward.reward.baserewardmodel method)": [[85, "prompting.validators.reward.reward.BaseRewardModel.__repr__"]], "__str__() (prompting.validators.reward.reward.baserewardmodel method)": [[85, "prompting.validators.reward.reward.BaseRewardModel.__str__"]], "apply() (prompting.validators.reward.reward.baserewardmodel method)": [[85, "prompting.validators.reward.reward.BaseRewardModel.apply"]], "get_rewards() (prompting.validators.reward.reward.baserewardmodel method)": [[85, "prompting.validators.reward.reward.BaseRewardModel.get_rewards"]], "name (prompting.validators.reward.reward.baserewardmodel property)": [[85, "prompting.validators.reward.reward.BaseRewardModel.name"]], "normalize_rewards() (prompting.validators.reward.reward.baserewardmodel method)": [[85, "prompting.validators.reward.reward.BaseRewardModel.normalize_rewards"]], "normalized_reward (prompting.validators.reward.reward.baserewardevent attribute)": [[85, "prompting.validators.reward.reward.BaseRewardEvent.normalized_reward"]], "parse_reward_events() (prompting.validators.reward.reward.baserewardevent static method)": [[85, "prompting.validators.reward.reward.BaseRewardEvent.parse_reward_events"]], "prompting.validators.reward.reward": [[85, "module-prompting.validators.reward.reward"]], "reward (prompting.validators.reward.reward.baserewardevent attribute)": [[85, "prompting.validators.reward.reward.BaseRewardEvent.reward"]], "questionanswertask (class in prompting.validators.tasks)": [[86, "prompting.validators.tasks.QuestionAnswerTask"]], "questiongenerationtask (class in prompting.validators.tasks)": [[86, "prompting.validators.tasks.QuestionGenerationTask"]], "summarytask (class in prompting.validators.tasks)": [[86, "prompting.validators.tasks.SummaryTask"]], "task (class in prompting.validators.tasks)": [[86, "prompting.validators.tasks.Task"]], "base_text (prompting.validators.tasks.task attribute)": [[86, "prompting.validators.tasks.Task.base_text"]], "compose_prompt() (prompting.validators.tasks.questionanswertask method)": [[86, "prompting.validators.tasks.QuestionAnswerTask.compose_prompt"]], "compose_prompt() (prompting.validators.tasks.questiongenerationtask method)": [[86, "prompting.validators.tasks.QuestionGenerationTask.compose_prompt"]], "compose_prompt() (prompting.validators.tasks.summarytask method)": [[86, "prompting.validators.tasks.SummaryTask.compose_prompt"]], "compose_prompt() (prompting.validators.tasks.task method)": [[86, "prompting.validators.tasks.Task.compose_prompt"]], "create_qa_task() (in module prompting.validators.tasks)": [[86, "prompting.validators.tasks.create_qa_task"]], "create_qg_task() (in module prompting.validators.tasks)": [[86, "prompting.validators.tasks.create_qg_task"]], "create_summarization_task() (in module prompting.validators.tasks)": [[86, "prompting.validators.tasks.create_summarization_task"]], "criteria (prompting.validators.tasks.task attribute)": [[86, "prompting.validators.tasks.Task.criteria"]], "prompting.validators.tasks": [[86, "module-prompting.validators.tasks"]], "task_name (prompting.validators.tasks.task attribute)": [[86, "prompting.validators.tasks.Task.task_name"]], "task_type (prompting.validators.tasks.task attribute)": [[86, "prompting.validators.tasks.Task.task_type"]], "prompting.validators.weights": [[87, "module-prompting.validators.weights"]], "set_weights() (in module prompting.validators.weights)": [[87, "prompting.validators.weights.set_weights"]], "should_set_weights() (in module prompting.validators.weights)": [[87, "prompting.validators.weights.should_set_weights"]], "validators": [[88, "module-validators"]], "validators.reward": [[89, "module-validators.reward"]], "rewardeventtestcase (class in validators.reward.test_reward_event)": [[90, "validators.reward.test_reward_event.RewardEventTestCase"]], "setup() (validators.reward.test_reward_event.rewardeventtestcase method)": [[90, "validators.reward.test_reward_event.RewardEventTestCase.setUp"]], "test_imputed_reward_values_are_correct() (validators.reward.test_reward_event.rewardeventtestcase method)": [[90, "validators.reward.test_reward_event.RewardEventTestCase.test_imputed_reward_values_are_correct"]], "test_no_missing_rewards() (validators.reward.test_reward_event.rewardeventtestcase method)": [[90, "validators.reward.test_reward_event.RewardEventTestCase.test_no_missing_rewards"]], "test_parse_reward_events_with_no_reward_events() (validators.reward.test_reward_event.rewardeventtestcase method)": [[90, "validators.reward.test_reward_event.RewardEventTestCase.test_parse_reward_events_with_no_reward_events"]], "test_parse_reward_events_with_reward_events() (validators.reward.test_reward_event.rewardeventtestcase method)": [[90, "validators.reward.test_reward_event.RewardEventTestCase.test_parse_reward_events_with_reward_events"]], "validators.reward.test_reward_event": [[90, "module-validators.reward.test_reward_event"]], "taskvalidatortestcase (class in validators.reward.test_task_validator)": [[91, "validators.reward.test_task_validator.TaskValidatorTestCase"]], "setup() (validators.reward.test_task_validator.taskvalidatortestcase method)": [[91, "validators.reward.test_task_validator.TaskValidatorTestCase.setUp"]], "test_answer_with_question_keyword() (validators.reward.test_task_validator.taskvalidatortestcase method)": [[91, "validators.reward.test_task_validator.TaskValidatorTestCase.test_answer_with_question_keyword"]], "test_augment_with_answer_keyword() (validators.reward.test_task_validator.taskvalidatortestcase method)": [[91, "validators.reward.test_task_validator.TaskValidatorTestCase.test_augment_with_answer_keyword"]], "test_augment_with_question_keyword() (validators.reward.test_task_validator.taskvalidatortestcase method)": [[91, "validators.reward.test_task_validator.TaskValidatorTestCase.test_augment_with_question_keyword"]], "test_followup_and_answer_with_summary_keyword() (validators.reward.test_task_validator.taskvalidatortestcase method)": [[91, "validators.reward.test_task_validator.TaskValidatorTestCase.test_followup_and_answer_with_summary_keyword"]], "test_followup_with_answer_keyword() (validators.reward.test_task_validator.taskvalidatortestcase method)": [[91, "validators.reward.test_task_validator.TaskValidatorTestCase.test_followup_with_answer_keyword"]], "test_reward_valid_answer() (validators.reward.test_task_validator.taskvalidatortestcase method)": [[91, "validators.reward.test_task_validator.TaskValidatorTestCase.test_reward_valid_answer"]], "test_reward_valid_augment() (validators.reward.test_task_validator.taskvalidatortestcase method)": [[91, "validators.reward.test_task_validator.TaskValidatorTestCase.test_reward_valid_augment"]], "test_reward_valid_followup() (validators.reward.test_task_validator.taskvalidatortestcase method)": [[91, "validators.reward.test_task_validator.TaskValidatorTestCase.test_reward_valid_followup"]], "test_reward_valid_other() (validators.reward.test_task_validator.taskvalidatortestcase method)": [[91, "validators.reward.test_task_validator.TaskValidatorTestCase.test_reward_valid_other"]], "validators.reward.test_task_validator": [[91, "module-validators.reward.test_task_validator"]], "datasettestcase (class in validators.test_dataset)": [[92, "validators.test_dataset.DatasetTestCase"]], "test_next_returns_regular_strings() (validators.test_dataset.datasettestcase method)": [[92, "validators.test_dataset.DatasetTestCase.test_next_returns_regular_strings"]], "test_next_skips_empty_and_newline_only_strings() (validators.test_dataset.datasettestcase method)": [[92, "validators.test_dataset.DatasetTestCase.test_next_skips_empty_and_newline_only_strings"]], "validators.test_dataset": [[92, "module-validators.test_dataset"]], "eventtestcase (class in validators.test_event)": [[93, "validators.test_event.EventTestCase"]], "test_event_from_dict_all_forward_columns_match() (validators.test_event.eventtestcase method)": [[93, "validators.test_event.EventTestCase.test_event_from_dict_all_forward_columns_match"]], "test_event_from_dict_forward_no_reward_logging() (validators.test_event.eventtestcase method)": [[93, "validators.test_event.EventTestCase.test_event_from_dict_forward_no_reward_logging"]], "test_event_from_dict_forward_reward_logging_mismatch() (validators.test_event.eventtestcase method)": [[93, "validators.test_event.EventTestCase.test_event_from_dict_forward_reward_logging_mismatch"]], "validators.test_event": [[93, "module-validators.test_event"]]}})